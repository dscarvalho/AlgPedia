{
    "about": "In numerical analysis and functional analysis, a discrete wavelet transform (DWT) is any wavelet transform for which the wavelets are discretely sampled. As with other wavelet transforms, a key advantage it has over Fourier transforms is temporal resolution: it captures both frequency and location information (location in time).", 
    "name": "Discrete Wavelet Transform", 
    "classification": "Digital Signal Processing", 
    "full_text": "In numerical analysis and functional analysis, a discrete wavelet transform (DWT) is any wavelet transform for which the wavelets are discretely sampled. As with other wavelet transforms, a key advantage it has over Fourier transforms is temporal resolution: it captures both frequency and location information (location in time).\n\n\nThe first DWT was invented by Hungarian mathematician Alfr\u00e9d Haar. For an input represented by a list of \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n numbers, the Haar wavelet transform may be considered to pair up input values, storing the difference and passing the sum. This process is repeated recursively, pairing up the sums to provide the next scale, which leads to \n\n\n\n\n2\n\nn\n\n\n\u2212\n1\n\n\n{\\displaystyle 2^{n}-1}\n\n differences and a final sum.\nThe most commonly used set of discrete wavelet transforms was formulated by the Belgian mathematician Ingrid Daubechies in 1988. This formulation is based on the use of recurrence relations to generate progressively finer discrete samplings of an implicit mother wavelet function; each resolution is twice that of the previous scale. In her seminal paper, Daubechies derives a family of wavelets, the first of which is the Haar wavelet. Interest in this field has exploded since then, and many variations of Daubechies' original wavelets were developed.[1]\nThe dual-tree complex wavelet transform (\u2102WT) is a relatively recent enhancement to the discrete wavelet transform (DWT), with important additional properties: It is nearly shift invariant and directionally selective in two and higher dimensions. It achieves this with a redundancy factor of only \n\n\n\n\n2\n\nd\n\n\n\n\n{\\displaystyle 2^{d}}\n\n substantially lower than the undecimated DWT. The multidimensional (M-D) dual-tree \u2102WT is nonseparable but is based on a computationally efficient, separable filter bank (FB).[2]\nOther forms of discrete wavelet transform include the non- or undecimated wavelet transform (where downsampling is omitted), the Newland transform (where an orthonormal basis of wavelets is formed from appropriately constructed top-hat filters in frequency space). Wavelet packet transforms are also related to the discrete wavelet transform. Complex wavelet transform is another form.\nThe Haar DWT illustrates the desirable properties of wavelets in general. First, it can be performed in \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n operations; second, it captures not only a notion of the frequency content of the input, by examining it at different scales, but also temporal content, i.e. the times at which these frequencies occur. Combined, these two properties make the Fast wavelet transform (FWT) an alternative to the conventional fast Fourier transform (FFT).\nDue to the rate-change operators in the filter bank, the discrete WT is not time-invariant but actually very sensitive to the alignment of the signal in time. To address the time-varying problem of wavelet transforms, Mallat and Zhong proposed a new algorithm for wavelet representation of a signal, which is invariant to time shifts.[3] According to this algorithm, which is called a TI-DWT, only the scale parameter is sampled along the dyadic sequence 2^j (j\u2208Z) and the wavelet transform is calculated for each point in time.[4][5]\nThe discrete wavelet transform has a huge number of applications in science, engineering, mathematics and computer science. Most notably, it is used for signal coding, to represent a discrete signal in a more redundant form, often as a preconditioning for data compression. Practical applications can also be found in signal processing of accelerations for gait analysis,[6] in digital communications and many others.[7] [8][9]\nIt is shown that discrete wavelet transform (discrete in scale and shift, and continuous in time) is successfully implemented as analog filter bank in biomedical signal processing for design of low-power pacemakers and also in ultra-wideband (UWB) wireless communications.[10]\nTo illustrate the differences and similarities between the discrete wavelet transform with the discrete Fourier transform, consider the DWT and DFT of the following sequence: (1,0,0,0), a unit impulse.\nThe DFT has orthogonal basis (DFT matrix):\nwhile the DWT with Haar wavelets for length 4 data has orthogonal basis in the rows of:\n(To simplify notation, whole numbers are used, so the bases are orthogonal but not orthonormal.)\nPreliminary observations include:\nDecomposing the sequence with respect to these bases yields:\nThe DWT demonstrates the localization: the (1,1,1,1) term gives the average signal value, the (1,1,\u20131,\u20131) places the signal in the left side of the domain, and the (1,\u20131,0,0) places it at the left side of the left side, and truncating at any stage yields a downsampled version of the signal:\nThe DFT, by contrast, expresses the sequence by the interference of waves of various frequencies \u2013 thus truncating the series yields a low-pass filtered version of the series:\nNotably, the middle approximation (2-term) differs. From the frequency domain perspective, this is a better approximation, but from the time domain perspective it has drawbacks \u2013 it exhibits undershoot \u2013 one of the values is negative, though the original series is non-negative everywhere \u2013 and ringing, where the right side is non-zero, unlike in the wavelet transform. On the other hand, the Fourier approximation correctly shows a peak, and all points are within \n\n\n\n1\n\n/\n\n4\n\n\n{\\displaystyle 1/4}\n\n of their correct value, though all points have error. The wavelet approximation, by contrast, places a peak on the left half, but has no peak at the first point, and while it is exactly correct for half the values (reflecting location), it has an error of \n\n\n\n1\n\n/\n\n2\n\n\n{\\displaystyle 1/2}\n\n for the other values.\nThis illustrates the kinds of trade-offs between these transforms, and how in some respects the DWT provides preferable behavior, particularly for the modeling of transients.\nThe DWT of a signal \n\n\n\nx\n\n\n{\\displaystyle x}\n\n is calculated by passing it through a series of filters. First the samples are passed through a low pass filter with impulse response \n\n\n\ng\n\n\n{\\displaystyle g}\n\n resulting in a convolution of the two:\nThe signal is also decomposed simultaneously using a high-pass filter \n\n\n\nh\n\n\n{\\displaystyle h}\n\n. The outputs giving the detail coefficients (from the high-pass filter) and approximation coefficients (from the low-pass). It is important that the two filters are related to each other and they are known as a quadrature mirror filter.\nHowever, since half the frequencies of the signal have now been removed, half the samples can be discarded according to Nyquist\u2019s rule. The filter output of the low-pass filter \n\n\n\ng\n\n\n{\\displaystyle g}\n\n in the diagram above is then subsampled by 2 and further processed by passing it again through a new low- pass filter \n\n\n\ng\n\n\n{\\displaystyle g}\n\n and a high- pass filter \n\n\n\nh\n\n\n{\\displaystyle h}\n\n with half the cut-off frequency of the previous one,i.e.:\nThis decomposition has halved the time resolution since only half of each filter output characterises the signal. However, each output has half the frequency band of the input, so the frequency resolution has been doubled.\nWith the subsampling operator \n\n\n\n\u2193\n\n\n{\\displaystyle \\downarrow }\n\n\nthe above summation can be written more concisely.\nHowever computing a complete convolution \n\n\n\nx\n\u2217\ng\n\n\n{\\displaystyle x*g}\n\n with subsequent downsampling would waste computation time.\nThe Lifting scheme is an optimization where these two computations are interleaved.\nThis decomposition is repeated to further increase the frequency resolution and the approximation coefficients decomposed with high and low pass filters and then down-sampled. This is represented as a binary tree with nodes representing a sub-space with a different time-frequency localisation. The tree is known as a filter bank.\nAt each level in the above diagram the signal is decomposed into low and high frequencies. Due to the decomposition process the input signal must be a multiple of \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n where \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the number of levels.\nFor example a signal with 32 samples, frequency range 0 to \n\n\n\n\nf\n\nn\n\n\n\n\n{\\displaystyle f_{n}}\n\n and 3 levels of decomposition, 4 output scales are produced:\nThe filterbank implementation of wavelets can be interpreted as computing the wavelet coefficients of a discrete set of child wavelets for a given mother wavelet \n\n\n\n\u03c8\n(\nt\n)\n\n\n{\\displaystyle \\psi (t)}\n\n. In the case of the discrete wavelet transform, the mother wavelet is shifted and scaled by powers of two\n\n\n\n\n\n\u03c8\n\nj\n,\nk\n\n\n(\nt\n)\n=\n\n\n1\n\n\n2\n\nj\n\n\n\n\n\n\u03c8\n\n(\n\n\n\nt\n\u2212\nk\n\n2\n\nj\n\n\n\n\n2\n\nj\n\n\n\n\n)\n\n\n\n{\\displaystyle \\psi _{j,k}(t)={\\frac {1}{\\sqrt {2^{j}}}}\\psi \\left({\\frac {t-k2^{j}}{2^{j}}}\\right)}\n\n\nwhere \n\n\n\nj\n\n\n{\\displaystyle j}\n\n is the scale parameter and \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is the shift parameter, both which are integers.\nRecall that the wavelet coefficient \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n of a signal \n\n\n\nx\n(\nt\n)\n\n\n{\\displaystyle x(t)}\n\n is the projection of \n\n\n\nx\n(\nt\n)\n\n\n{\\displaystyle x(t)}\n\n onto a wavelet, and let \n\n\n\nx\n(\nt\n)\n\n\n{\\displaystyle x(t)}\n\n be a signal of length \n\n\n\n\n2\n\nN\n\n\n\n\n{\\displaystyle 2^{N}}\n\n. In the case of a child wavelet in the discrete family above,\n\n\n\n\n\n\u03b3\n\nj\nk\n\n\n=\n\n\u222b\n\n\u2212\n\u221e\n\n\n\u221e\n\n\nx\n(\nt\n)\n\n\n1\n\n\n2\n\nj\n\n\n\n\n\n\u03c8\n\n(\n\n\n\nt\n\u2212\nk\n\n2\n\nj\n\n\n\n\n2\n\nj\n\n\n\n\n)\n\nd\nt\n\n\n{\\displaystyle \\gamma _{jk}=\\int _{-\\infty }^{\\infty }x(t){\\frac {1}{\\sqrt {2^{j}}}}\\psi \\left({\\frac {t-k2^{j}}{2^{j}}}\\right)dt}\n\n\nNow fix \n\n\n\nj\n\n\n{\\displaystyle j}\n\n at a particular scale, so that \n\n\n\n\n\u03b3\n\nj\nk\n\n\n\n\n{\\displaystyle \\gamma _{jk}}\n\n is a function of \n\n\n\nk\n\n\n{\\displaystyle k}\n\n only. In light of the above equation, \n\n\n\n\n\u03b3\n\nj\nk\n\n\n\n\n{\\displaystyle \\gamma _{jk}}\n\n can be viewed as a convolution of \n\n\n\nx\n(\nt\n)\n\n\n{\\displaystyle x(t)}\n\n with a dilated, reflected, and normalized version of the mother wavelet, \n\n\n\nh\n(\nt\n)\n=\n\n\n1\n\n\n2\n\nj\n\n\n\n\n\n\u03c8\n\n(\n\n\n\n\u2212\nt\n\n\n2\n\nj\n\n\n\n\n)\n\n\n\n{\\displaystyle h(t)={\\frac {1}{\\sqrt {2^{j}}}}\\psi \\left({\\frac {-t}{2^{j}}}\\right)}\n\n, sampled at the points \n\n\n\n1\n,\n\n2\n\nj\n\n\n,\n\n2\n\n2\nj\n\n\n,\n.\n.\n.\n,\n\n2\n\nN\n\n\n\n\n{\\displaystyle 1,2^{j},2^{2j},...,2^{N}}\n\n. But this is precisely what the detail coefficients give at level \n\n\n\nj\n\n\n{\\displaystyle j}\n\n of the discrete wavelet transform. Therefore, for an appropriate choice of \n\n\n\nh\n[\nn\n]\n\n\n{\\displaystyle h[n]}\n\n and \n\n\n\ng\n[\nn\n]\n\n\n{\\displaystyle g[n]}\n\n, the detail coefficients of the filter bank correspond exactly to a wavelet coefficient of a discrete set of child wavelets for a given mother wavelet \n\n\n\n\u03c8\n(\nt\n)\n\n\n{\\displaystyle \\psi (t)}\n\n.\nAs an example, consider the discrete Haar wavelet, whose mother wavelet is \n\n\n\n\u03c8\n=\n[\n1\n,\n\u2212\n1\n]\n\n\n{\\displaystyle \\psi =[1,-1]}\n\n. Then the dilated, reflected, and normalized version of this wavelet is \n\n\n\nh\n[\nn\n]\n=\n\n\n1\n\n2\n\n\n\n[\n\u2212\n1\n,\n1\n]\n\n\n{\\displaystyle h[n]={\\frac {1}{\\sqrt {2}}}[-1,1]}\n\n, which is, indeed, the highpass decomposition filter for the discrete Haar wavelet transform.\nThe filterbank implementation of the Discrete Wavelet Transform takes only O(N) in certain cases, as compared to O(N\u00a0log\u00a0N) for the fast Fourier transform.\nNote that if \n\n\n\ng\n[\nn\n]\n\n\n{\\displaystyle g[n]}\n\n and \n\n\n\nh\n[\nn\n]\n\n\n{\\displaystyle h[n]}\n\n are both a constant length (i.e. their length is independent of N), then \n\n\n\nx\n\u2217\nh\n\n\n{\\displaystyle x*h}\n\n and \n\n\n\nx\n\u2217\ng\n\n\n{\\displaystyle x*g}\n\n each take O(N) time. The wavelet filterbank does each of these two O(N) convolutions, then splits the signal into two branches of size N/2. But it only recursively splits the upper branch convolved with \n\n\n\ng\n[\nn\n]\n\n\n{\\displaystyle g[n]}\n\n (as contrasted with the FFT, which recursively splits both the upper branch and the lower branch). This leads to the following recurrence relation\nwhich leads to an O(N) time for the entire operation, as can be shown by a geometric series expansion of the above relation.\nAs an example, the discrete Haar wavelet transform is linear, since in that case \n\n\n\nh\n[\nn\n]\n\n\n{\\displaystyle h[n]}\n\n and \n\n\n\ng\n[\nn\n]\n\n\n{\\displaystyle g[n]}\n\n are constant length\u00a02.\nThe Adam7 algorithm, used for interlacing in the Portable Network Graphics (PNG) format, is a multiscale model of the data which is similar to a DWT with Haar wavelets.\nUnlike the DWT, it has a specific scale \u2013 it starts from an 8\u00d78 block, and it downsamples the image, rather than decimating (low-pass filtering, then downsampling). It thus offers worse frequency behavior, showing artifacts (pixelation) at the early stages, in return for simpler implementation.\nIn its simplest form, the DWT is remarkably easy to compute.\nThe Haar wavelet in Java:\nComplete Java code for a 1-D and 2-D DWT using Haar, Daubechies, Coiflet, and Legendre wavelets is available from the open source project: JWave. Furthermore, a fast lifting implementation of the discrete biorthogonal CDF 9/7 wavelet transform in C, used in the JPEG 2000 image compression standard can be found here (archived 5 March 2012).\nThis figure shows an example of applying the above code to compute the Haar wavelet coefficients on a sound waveform. This example highlights two key properties of the wavelet transform:", 
    "dbpedia_url": "http://dbpedia.org/resource/Discrete_wavelet_transform", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Discrete_wavelet_transform\n"
}