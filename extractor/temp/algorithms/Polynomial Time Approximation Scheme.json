{
    "about": "In computer science, a polynomial-time approximation scheme (PTAS) is a type of approximation algorithm for optimization problems (most often, NP-hard optimization problems).", 
    "classification": "Approximation Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Polynomial-time_approximation_scheme\n", 
    "full_text": "In computer science, a polynomial-time approximation scheme (PTAS) is a type of approximation algorithm for optimization problems (most often, NP-hard optimization problems).\nA PTAS is an algorithm which takes an instance of an optimization problem and a parameter \u03b5\u00a0>\u00a00 and, in polynomial time, produces a solution that is within a factor 1 + \u03b5 of being optimal (or 1 - \u03b5 for maximization problems). For example, for the Euclidean traveling salesman problem, a PTAS would produce a tour with length at most (1\u00a0+\u00a0\u03b5)L, with L being the length of the shortest tour.[1] There exists also PTAS for the class of all dense CSP problems.[2]\nThe running time of a PTAS is required to be polynomial in n for every fixed \u03b5 but can be different for different \u03b5. Thus an algorithm running in time O(n1/\u03b5) or even O(nexp(1/\u03b5)) counts as a PTAS.\n\n\nA practical problem with PTAS algorithms is that the exponent of the polynomial could increase dramatically as \u03b5 shrinks, for example if the runtime is O(n(1/\u03b5)!). One way of addressing this is to define the efficient polynomial-time approximation scheme or EPTAS, in which the running time is required to be O(nc) for a constant c independent of \u03b5. This ensures that an increase in problem size has the same relative effect on runtime regardless of what \u03b5 is being used; however, the constant under the big-O can still depend on \u03b5 arbitrarily. Even more restrictive, and useful in practice, is the fully polynomial-time approximation scheme or FPTAS, which requires the algorithm to be polynomial in both the problem size n and 1/\u03b5. All problems in FPTAS are fixed-parameter tractable. An example of a problem that has an FPTAS is the knapsack problem.\nAny strongly NP-hard optimization problem with a polynomially bounded objective function cannot have an FPTAS unless P=NP.[3] However, the converse fails: e.g. if P does not equal NP, knapsack with two constraints is not strongly NP-hard, but has no FPTAS even when the optimal objective is polynomially bounded.[4]\nUnless P = NP, it holds that FPTAS\u00a0\u228a\u00a0PTAS\u00a0\u228a\u00a0APX.[5] Consequently, under this assumption, APX-hard problems do not have PTASs.\nAnother deterministic variant of the PTAS is the quasi-polynomial-time approximation scheme or QPTAS. A QPTAS has time complexity \n\n\n\n\nn\n\npolylog\n\u2061\n(\nn\n)\n\n\n\n\n{\\displaystyle n^{\\operatorname {polylog} (n)}}\n\n for each fixed \n\n\n\n\u03f5\n>\n0\n\n\n{\\displaystyle \\epsilon >0}\n\n.\nSome problems which do not have a PTAS may admit a randomized algorithm with similar properties, a polynomial-time randomized approximation scheme or PRAS. A PRAS is an algorithm which takes an instance of an optimization or counting problem and a parameter \u03b5\u00a0>\u00a00 and, in polynomial time, produces a solution that has a high probability of being within a factor \u03b5 of optimal. Conventionally, \"high probability\" means probability greater than 3/4, though as with most probabilistic complexity classes the definition is robust to variations in this exact value (the bare minimum requirement is generally greater than 1/2). Like a PTAS, a PRAS must have running time polynomial in n, but not necessarily in \u03b5; with further restrictions on the running time in \u03b5, one can define an efficient polynomial-time randomized approximation scheme or EPRAS similar to the EPTAS, and a fully polynomial-time randomized approximation scheme or FPRAS similar to the FPTAS.[3]\nThe term PTAS may also be used to refer to the class of optimization problems that have a PTAS. PTAS is a subset of APX, and unless P = NP, it is a strict subset. [5]\nMembership in PTAS can be shown using a PTAS reduction, L-reduction, or P-reduction, all of which preserve PTAS membership, and these may also be used to demonstrate PTAS-completeness. On the other hand, showing non-membership in PTAS (namely, the nonexistence of a PTAS), may be done by showing that the problem is APX-hard, after which the existence of a PTAS would show P = NP. APX-hardness is commonly shown via PTAS reduction or AP-reduction.", 
    "name": "Polynomial Time Approximation Scheme"
}