{
    "about": "In computer science, iterative deepening search or more specifically iterative deepening depth-first search[2] (IDS or IDDFS) is a state space/graph search strategy in which a depth-limited version of depth-first search is run repeatedly with increasing depth limits until the goal is found. IDDFS is equivalent to breadth-first search, but uses much less memory; on each iteration, it visits the nodes in the search tree in the same order as depth-first search, but the cumulative order in which nodes are first visited is effectively breadth-first.", 
    "classification": "Graph Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search\n", 
    "full_text": "In computer science, iterative deepening search or more specifically iterative deepening depth-first search[2] (IDS or IDDFS) is a state space/graph search strategy in which a depth-limited version of depth-first search is run repeatedly with increasing depth limits until the goal is found. IDDFS is equivalent to breadth-first search, but uses much less memory; on each iteration, it visits the nodes in the search tree in the same order as depth-first search, but the cumulative order in which nodes are first visited is effectively breadth-first.\n\n\nThe following pseudocode shows IDDFS implemented in terms of a recursive depth-limited DFS (called DLS).\nIDDFS combines depth-first search's space-efficiency and breadth-first search's completeness (when the branching factor is finite). It is optimal when the path cost is a non-decreasing function of the depth of the node.[citation needed]\nSince iterative deepening visits states multiple times, it may seem wasteful, but it turns out to be not so costly, since in a tree most of the nodes are in the bottom level, so it does not matter much if the upper levels are visited multiple times.[3]\nThe main advantage of IDDFS in game tree searching is that the earlier searches tend to improve the commonly used heuristics, such as the killer heuristic and alpha-beta pruning, so that a more accurate estimate of the score of various nodes at the final depth search can occur, and the search completes more quickly since it is done in a better order. For example, alpha-beta pruning is most efficient if it searches the best moves first.[3]\nA second advantage is the responsiveness of the algorithm. Because early iterations use small values for \n\n\n\nd\n\n\n{\\displaystyle d}\n\n, they execute extremely quickly. This allows the algorithm to supply early indications of the result almost immediately, followed by refinements as \n\n\n\nd\n\n\n{\\displaystyle d}\n\n increases. When used in an interactive setting, such as in a chess-playing program, this facility allows the program to play at any time with the current best move found in the search it has completed so far. This can be phrased as each depth of the search corecursively producing a better approximation of the solution, though the work done at each step is recursive. This is not possible with a traditional depth-first search, which does not produce intermediate results.\nThe time complexity of IDDFS in a (well-balanced) tree works out to be the same as depth-first search, i.e. \n\n\n\nO\n(\n\nb\n\nd\n\n\n)\n\n\n{\\displaystyle O(b^{d})}\n\n,[4] where \n\n\n\nb\n\n\n{\\displaystyle b}\n\n is the branching factor and \n\n\n\nd\n\n\n{\\displaystyle d}\n\n is the depth of the goal.\nIn an iterative deepening search, the nodes at depth \n\n\n\nd\n\n\n{\\displaystyle d}\n\n are expanded once, those at depth \n\n\n\nd\n\u2212\n1\n\n\n{\\displaystyle d-1}\n\n are expanded twice, and so on up to the root of the search tree, which is expanded \n\n\n\nd\n+\n1\n\n\n{\\displaystyle d+1}\n\n times.[5] So the total number of expansions in an iterative deepening search is\nwhere \n\n\n\n\nb\n\nd\n\n\n\n\n{\\displaystyle b^{d}}\n\n is the number of times the nodes at depth \n\n\n\nd\n\n\n{\\displaystyle d}\n\n are visited, \n\n\n\n2\n\nb\n\nd\n\u2212\n1\n\n\n\n\n{\\displaystyle 2b^{d-1}}\n\n is the number of times the nodes at depth \n\n\n\nd\n\u2212\n1\n\n\n{\\displaystyle d-1}\n\n are visited, and so on. Factoring out \n\n\n\n\nb\n\nd\n\n\n\n\n{\\displaystyle b^{d}}\n\n gives\nNow let \n\n\n\nx\n=\n\n\n1\nb\n\n\n=\n\nb\n\n\u2212\n1\n\n\n\n\n{\\displaystyle x={\\frac {1}{b}}=b^{-1}}\n\n. Then we have\nThis is less than the infinite series\nwhich converges to\nThat is, we have\n\n\n\n\n\nb\n\nd\n\n\n(\n1\n+\n2\nx\n+\n3\n\nx\n\n2\n\n\n+\n\u22ef\n+\n(\nd\n\u2212\n1\n)\n\nx\n\nd\n\u2212\n2\n\n\n+\nd\n\nx\n\nd\n\u2212\n1\n\n\n+\n(\nd\n+\n1\n)\n\nx\n\nd\n\n\n)\n\u2264\n\nb\n\nd\n\n\n(\n1\n\u2212\nx\n\n)\n\n\u2212\n2\n\n\n\n\n{\\displaystyle b^{d}(1+2x+3x^{2}+\\cdots +(d-1)x^{d-2}+dx^{d-1}+(d+1)x^{d})\\leq b^{d}(1-x)^{-2}}\n\n, for \n\n\n\na\nb\ns\n(\nx\n)\n<\n1\n\n\n{\\displaystyle abs(x)<1}\n\n\nSince \n\n\n\n(\n1\n\u2212\nx\n\n)\n\n\u2212\n2\n\n\n\n\n{\\displaystyle (1-x)^{-2}}\n\n or \n\n\n\n\n\n(\n1\n\u2212\n\n\n1\nb\n\n\n)\n\n\n\u2212\n2\n\n\n\n\n{\\displaystyle \\left(1-{\\frac {1}{b}}\\right)^{-2}}\n\n is a constant independent of \n\n\n\nd\n\n\n{\\displaystyle d}\n\n (the depth), if \n\n\n\nb\n>\n1\n\n\n{\\displaystyle b>1}\n\n (i.e., if the branching factor is greater than 1), the running time of the depth-first iterative deepening search is \n\n\n\nO\n(\n\nb\n\nd\n\n\n)\n\n\n{\\displaystyle O(b^{d})}\n\n.\nFor \n\n\n\nb\n=\n10\n\n\n{\\displaystyle b=10}\n\n and \n\n\n\nd\n=\n5\n\n\n{\\displaystyle d=5}\n\n the number is\nAll together, an iterative deepening search from depth \n\n\n\n1\n\n\n{\\displaystyle 1}\n\n all the way down to depth \n\n\n\nd\n\n\n{\\displaystyle d}\n\n expands only about \n\n\n\n11\n%\n\n\n{\\displaystyle 11\\%}\n\n more nodes than a single breadth-first or depth-limited search to depth \n\n\n\nd\n\n\n{\\displaystyle d}\n\n, when \n\n\n\nb\n=\n10\n\n\n{\\displaystyle b=10}\n\n.[6]\nThe higher the branching factor, the lower the overhead of repeatedly expanded states,[7] but even when the branching factor is 2, iterative deepening search only takes about twice as long as a complete breadth-first search. This means that the time complexity of iterative deepening is still \n\n\n\nO\n(\n\nb\n\nd\n\n\n)\n\n\n{\\displaystyle O(b^{d})}\n\n.\nThe space complexity of IDDFS is \n\n\n\nO\n(\nd\n)\n\n\n{\\displaystyle O(d)}\n\n,[8] where \n\n\n\nd\n\n\n{\\displaystyle d}\n\n is the depth of the goal.\nSince IDDFS, at any point, is engaged in a depth-first search, it need only store a stack of nodes which represents the branch of the tree it is expanding. Since it finds a solution of optimal length, the maximum depth of this stack is \n\n\n\nd\n\n\n{\\displaystyle d}\n\n, and hence the maximum amount of space is \n\n\n\nO\n(\nd\n)\n\n\n{\\displaystyle O(d)}\n\n.\nIn general, iterative deepening is the preferred search method when there is a large search space and the depth of the solution is not known.[3]\nFor the following graph:\n\na depth-first search starting at A, assuming that the left edges in the shown graph are chosen before right edges, and assuming the search remembers previously-visited nodes and will not repeat them (since this is a small graph), will visit the nodes in the following order: A, B, D, F, E, C, G. The edges traversed in this search form a Tr\u00e9maux tree, a structure with important applications in graph theory.\nPerforming the same search without remembering previously visited nodes results in visiting nodes in the order A, B, D, F, E, A, B, D, F, E, etc. forever, caught in the A, B, D, F, E cycle and never reaching C or G.\nIterative deepening prevents this loop and will reach the following nodes on the following depths, assuming it proceeds left-to-right as above:\n(Note that iterative deepening has now seen C, when a conventional depth-first search did not.)\n(Note that it still sees C, but that it came later. Also note that it sees E via a different path, and loops back to F twice.)\nFor this graph, as more depth is added, the two cycles \"ABFE\" and \"AEFB\" will simply get longer before the algorithm gives up and tries another branch.\nSimilar to iterative deepening is a search strategy called iterative lengthening search that works with increasing path-cost limits instead of depth-limits. It expands nodes in the order of increasing path cost; therefore the first goal it encounters is the one with the cheapest path cost. But iterative lengthening incurs substantial overhead that makes it less useful than iterative deepening.[3]\nIterative deepening A* is a best-first search that performs iterative deepening based on \"f\"-values similar to the ones computed in the A* algorithm.", 
    "name": "Iterative Deepening Depth First Search"
}