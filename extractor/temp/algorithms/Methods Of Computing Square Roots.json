{
    "about": "In numerical analysis, a branch of mathematics, there are several square root algorithms or methods of computing the principal square root of a non-negative real number. For the square roots of a negative or complex number, see below.", 
    "name": "Methods Of Computing Square Roots", 
    "classification": "Computer Arithmetic Algorithms", 
    "full_text": "In numerical analysis, a branch of mathematics, there are several square root algorithms or methods of computing the principal square root of a non-negative real number. For the square roots of a negative or complex number, see below.\nFinding \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n is the same as solving the equation \n\n\n\nf\n(\nx\n)\n=\n\nx\n\n2\n\n\n\u2212\nS\n=\n0\n\n\n\n\n{\\displaystyle f(x)=x^{2}-S=0\\,\\!}\n\n for a positive \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. Therefore, any general numerical root-finding algorithm can be used. Newton's method, for example, reduces in this case to the so-called Babylonian method:\nThese methods generally yield approximate results, but can be made arbitrarily precise by increasing the number of calculation steps.\n\n\nMany square root algorithms require an initial seed value. If the initial seed value is far away from the actual square root, the algorithm will be slowed down. It is therefore useful to have a rough estimate, which may be very inaccurate but easy to calculate. With \n\n\n\nS\n\n\n{\\displaystyle S}\n\n expressed in scientific notation as \n\n\n\na\n\u00d7\n\n10\n\n2\nn\n\n\n\n\n{\\displaystyle a\\times 10^{2n}}\n\n where \n\n\n\n1\n\u2264\na\n<\n100\n\n\n{\\displaystyle 1\\leq a<100}\n\n and n is an integer, the square root \n\n\n\n\n\nS\n\n\n=\n\n\na\n\n\n\u00d7\n\n10\n\nn\n\n\n\n\n{\\displaystyle {\\sqrt {S}}={\\sqrt {a}}\\times 10^{n}}\n\n can be estimated as\nThe factors two and six are used because they approximate the geometric means of the lowest and highest possible values with the given number of digits: \n\n\n\n\n\n\n\n1\n\n\n\u22c5\n\n\n10\n\n\n\n\n=\n\n\n10\n\n4\n\n\n\n\u2248\n2\n\n\n\n{\\displaystyle {\\sqrt {{\\sqrt {1}}\\cdot {\\sqrt {10}}}}={\\sqrt[{4}]{10}}\\approx 2\\,}\n\n and \n\n\n\n\n\n\n\n10\n\n\n\u22c5\n\n\n100\n\n\n\n\n=\n\n\n1000\n\n4\n\n\n\n\u2248\n6\n\n\n\n{\\displaystyle {\\sqrt {{\\sqrt {10}}\\cdot {\\sqrt {100}}}}={\\sqrt[{4}]{1000}}\\approx 6\\,}\n\n.\nFor \n\n\n\nS\n=\n125348\n=\n12.5348\n\u00d7\n\n10\n\n4\n\n\n\n\n{\\displaystyle S=125348=12.5348\\times 10^{4}}\n\n, the estimate is \n\n\n\n\n\nS\n\n\n\u2248\n6\n\u22c5\n\n10\n\n2\n\n\n=\n600\n\n\n{\\displaystyle {\\sqrt {S}}\\approx 6\\cdot 10^{2}=600}\n\n.\nWhen working in the binary numeral system (as computers do internally), by expressing \n\n\n\nS\n\n\n{\\displaystyle S}\n\n as \n\n\n\na\n\u00d7\n\n2\n\n2\nn\n\n\n\n\n{\\displaystyle a\\times 2^{2n}}\n\n where \n\n\n\n\n0.1\n\n2\n\n\n\u2264\na\n<\n\n10\n\n2\n\n\n\n\n{\\displaystyle 0.1_{2}\\leq a<10_{2}}\n\n, the square root \n\n\n\n\n\nS\n\n\n=\n\n\na\n\n\n\u00d7\n\n2\n\nn\n\n\n\n\n{\\displaystyle {\\sqrt {S}}={\\sqrt {a}}\\times 2^{n}}\n\n can be estimated as \n\n\n\n\n\nS\n\n\n\u2248\n\n2\n\nn\n\n\n\n\n{\\displaystyle {\\sqrt {S}}\\approx 2^{n}}\n\n, since the geometric mean of the lowest and highest possible values is \n\n\n\n\n\n\n\n\n0.1\n\n2\n\n\n\n\n\u22c5\n\n\n\n10\n\n2\n\n\n\n\n\n\n=\n\n\n1\n\n4\n\n\n\n=\n1\n\n\n{\\displaystyle {\\sqrt {{\\sqrt {0.1_{2}}}\\cdot {\\sqrt {10_{2}}}}}={\\sqrt[{4}]{1}}=1}\n\n.\nFor \n\n\n\nS\n=\n125348\n=\n1\n\n1110\n\n1001\n\n1010\n\n\n0100\n\n2\n\n\n=\n1.1110\n\n1001\n\n1010\n\n\n0100\n\n2\n\n\n\u00d7\n\n2\n\n16\n\n\n\n\n\n{\\displaystyle S=125348=1\\;1110\\;1001\\;1010\\;0100_{2}=1.1110\\;1001\\;1010\\;0100_{2}\\times 2^{16}\\,}\n\n the binary approximation gives \n\n\n\n\n\nS\n\n\n\u2248\n\n2\n\n8\n\n\n=\n1\n\n0000\n\n\n0000\n\n2\n\n\n=\n256\n\n.\n\n\n{\\displaystyle {\\sqrt {S}}\\approx 2^{8}=1\\;0000\\;0000_{2}=256\\,.}\n\n\nThese approximations are useful to find better seeds for iterative algorithms, which results in faster convergence.\nPerhaps the first algorithm used for approximating \u221aS is known as the Babylonian method, named after the Babylonians,[1] or \"Hero's method\", named after the first-century Greek mathematician Hero of Alexandria who gave the first explicit description of the method.[2] It can be derived from (but predates by 16 centuries) Newton's method. The basic idea is that if x is an overestimate to the square root of a non-negative real number S then S/x will be an underestimate and so the average of these two numbers may reasonably be expected to provide a better approximation (though the formal proof of that assertion depends on the inequality of arithmetic and geometric means that shows this average is always an overestimate of the square root, as noted in the article on square roots, thus assuring convergence).\nMore precisely, if x is our initial guess of \u221aS and e is the error in our estimate such that S = (x+ e)2, then we can expand the binomial and solve for\nTherefore, we can compensate for the error and update our old estimate as\nSince the computed error was not exact, this becomes our next best guess. The process of updating is iterated until desired accuracy is obtained. This is a quadratically convergent algorithm, which means that the number of correct digits of the approximation roughly doubles with each iteration. It proceeds as follows:\nIt can also be represented as:\nThis algorithm works equally well in the p-adic numbers, but cannot be used to identify real square roots with p-adic square roots; one can, for example, construct a sequence of rational numbers by this method that converges to +3 in the reals, but to \u22123 in the 2-adics.\nTo calculate \u221aS, where S = 125348, to six significant figures, use the rough estimation method above to get\nTherefore, \u221a125348 \u2248 354.045.\nLet the relative error in xn be defined by\nand thus\nThen it can be shown that\nand thus that\nand consequently that convergence is assured provided that x0 and S are both positive.\nIf using the rough estimate above with the Babylonian method, then the least accurate cases in ascending order are as follows:\nThus in any case,\nRounding errors will slow the convergence. It is recommended to keep at least one extra digit beyond the desired accuracy of the xn being calculated to minimize round off error.\nThis is a method to find each digit of the square root in a sequence. It is slower than the Babylonian method (if you have a calculator that can divide in one operation), but it has several advantages:\nNapier's bones include an aid for the execution of this algorithm. The shifting nth root algorithm is a generalization of this method.\nFirst, let's consider the simplest possible case of finding the square root of a number Z, that is the square of a 2 digit number XY, where X is the ten's digit and Y is the unit's digit. Specifically:\nZ = (10X + Y)2 = 100X2 + 20XY + Y2\nNow using the Digit-by-Digit algorithm, we first determine the value of X. X is the largest digit such that X2 is less or equal to Z from which we removed the 2 rightmost digits.\nIn the next iteration, we pair the digits, multiply X by 2, and place it in the tenth's place while we try to figure out what the value of Y is.\nSince this is a simple case where the answer is a perfect square root XY, the algorithm stops here.\nThe same idea can be extended to any arbitrary square root computation next. Suppose we are able to find the square root of N by expressing it as a sum of n positive numbers such that\nBy repeatedly applying the basic identity\nthe right-hand-side term can be expanded as\nThis expression allows us to find the square root by sequentially guessing the values of \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\ns. Suppose that the numbers \n\n\n\n\na\n\n1\n\n\n,\n\u2026\n,\n\na\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle a_{1},\\ldots ,a_{m-1}}\n\n have already been guessed, then the m-th term of the right-hand-side of above summation is given by \n\n\n\n\nY\n\nm\n\n\n=\n[\n2\n\nP\n\nm\n\u2212\n1\n\n\n+\n\na\n\nm\n\n\n]\n\na\n\nm\n\n\n,\n\n\n{\\displaystyle Y_{m}=[2P_{m-1}+a_{m}]a_{m},}\n\n where \n\n\n\n\nP\n\nm\n\u2212\n1\n\n\n=\n\n\u2211\n\ni\n=\n1\n\n\nm\n\u2212\n1\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle P_{m-1}=\\sum _{i=1}^{m-1}a_{i}}\n\n is the approximate square root found so far. Now each new guess \n\n\n\n\na\n\nm\n\n\n\n\n{\\displaystyle a_{m}}\n\n should satisfy the recursion\nsuch that \n\n\n\n\nX\n\nm\n\n\n\u2265\n0\n\n\n{\\displaystyle X_{m}\\geq 0}\n\n for all \n\n\n\n1\n\u2264\nm\n\u2264\nn\n,\n\n\n{\\displaystyle 1\\leq m\\leq n,}\n\n with initialization \n\n\n\n\nX\n\n0\n\n\n=\nN\n.\n\n\n{\\displaystyle X_{0}=N.}\n\n When \n\n\n\n\nX\n\nn\n\n\n=\n0\n,\n\n\n{\\displaystyle X_{n}=0,}\n\n the exact square root has been found; if not, then the sum of \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\ns gives a suitable approximation of the square root, with \n\n\n\n\nX\n\nn\n\n\n\n\n{\\displaystyle X_{n}}\n\n being the approximation error.\nFor example, in the decimal number system we have\nwhere \n\n\n\n\n10\n\nn\n\u2212\ni\n\n\n\n\n{\\displaystyle 10^{n-i}}\n\n are place holders and the coefficients \n\n\n\n\na\n\ni\n\n\n\u2208\n{\n0\n,\n1\n,\n2\n,\n\u2026\n,\n9\n}\n\n\n{\\displaystyle a_{i}\\in \\{0,1,2,\\ldots ,9\\}}\n\n. At any m-th stage of the square root calculation, the approximate root found so far, \n\n\n\n\nP\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle P_{m-1}}\n\n and the summation term \n\n\n\n\nY\n\nm\n\n\n\n\n{\\displaystyle Y_{m}}\n\n are given by\nHere since the place value of \n\n\n\n\nY\n\nm\n\n\n\n\n{\\displaystyle Y_{m}}\n\n is an even power of 10, we only need to work with the pair of most significant digits of the remaining term \n\n\n\n\nX\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle X_{m-1}}\n\n at any m-th stage. The section below codifies this procedure.\nIt is obvious that a similar method can be used to compute the square root in number systems other than the decimal number system. For instance, finding the digit-by-digit square root in the binary number system is quite efficient since the value of \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n is searched from a smaller set of binary digits {0,1}. This makes the computation faster since at each stage the value of \n\n\n\n\nY\n\nm\n\n\n\n\n{\\displaystyle Y_{m}}\n\n is either \n\n\n\n\nY\n\nm\n\n\n=\n0\n\n\n{\\displaystyle Y_{m}=0}\n\n for \n\n\n\n\na\n\nm\n\n\n=\n0\n\n\n{\\displaystyle a_{m}=0}\n\n or \n\n\n\n\nY\n\nm\n\n\n=\n2\n\nP\n\nm\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle Y_{m}=2P_{m-1}+1}\n\n for \n\n\n\n\na\n\nm\n\n\n=\n1\n\n\n{\\displaystyle a_{m}=1}\n\n. The fact that we have only two possible options for \n\n\n\n\na\n\nm\n\n\n\n\n{\\displaystyle a_{m}}\n\n also makes the process of deciding the value of \n\n\n\n\na\n\nm\n\n\n\n\n{\\displaystyle a_{m}}\n\n at m-th stage of calculation easier. This is because we only need to check if \n\n\n\n\nY\n\nm\n\n\n\u2264\n\nX\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle Y_{m}\\leq X_{m-1}}\n\n for \n\n\n\n\na\n\nm\n\n\n=\n1.\n\n\n{\\displaystyle a_{m}=1.}\n\n If this condition is satisfied, then we take \n\n\n\n\na\n\nm\n\n\n=\n1\n\n\n{\\displaystyle a_{m}=1}\n\n; if not then \n\n\n\n\na\n\nm\n\n\n=\n0.\n\n\n{\\displaystyle a_{m}=0.}\n\n Also, the fact that multiplication by 2 is done by left bit-shifts helps in the computation.\nWrite the original number in decimal form. The numbers are written similar to the long division algorithm, and, as in long division, the root will be written on the line above. Now separate the digits into pairs, starting from the decimal point and going both left and right. The decimal point of the root will be above the decimal point of the square. One digit of the root will appear above each pair of digits of the square.\nBeginning with the left-most pair of digits, do the following procedure for each pair:\nFind the square root of 152.2756.\nFind the square root of 2.\nInherent to digit-by-digit algorithms is a search and test step: find a digit, \n\n\n\n\ne\n\n\n{\\displaystyle \\,e}\n\n, when added to the right of a current solution \n\n\n\n\nr\n\n\n{\\displaystyle \\,r}\n\n, such that \n\n\n\n\n(\nr\n+\ne\n)\n\u22c5\n(\nr\n+\ne\n)\n\u2264\nx\n\n\n{\\displaystyle \\,(r+e)\\cdot (r+e)\\leq x}\n\n, where \n\n\n\n\nx\n\n\n{\\displaystyle \\,x}\n\n is the value for which a root is desired. Expanding: \n\n\n\n\nr\n\u22c5\nr\n+\n2\nr\ne\n+\ne\n\u22c5\ne\n\u2264\nx\n\n\n{\\displaystyle \\,r\\cdot r+2re+e\\cdot e\\leq x}\n\n. The current value of \n\n\n\n\nr\n\u22c5\nr\n\n\n{\\displaystyle \\,r\\cdot r}\n\n\u2014or, usually, the remainder\u2014can be incrementally updated efficiently when working in binary, as the value of \n\n\n\n\ne\n\n\n{\\displaystyle \\,e}\n\n will have a single bit set (a power of 2), and the operations needed to compute \n\n\n\n\n2\n\u22c5\nr\n\u22c5\ne\n\n\n{\\displaystyle \\,2\\cdot r\\cdot e}\n\n and \n\n\n\n\ne\n\u22c5\ne\n\n\n{\\displaystyle \\,e\\cdot e}\n\n can be replaced with faster bit shift operations.\nHere we obtain the square root of 81, which when converted into binary gives 1010001. The numbers in the left column gives the option between that number or zero to be used for subtraction at that stage of computation. The final answer is 1001, which in decimal is 9.\nThis gives rise to simple computer implementations:[3]\nUsing the notation above, the variable \"bit\" corresponds to \n\n\n\n\ne\n\nm\n\n\n2\n\n\n\n\n{\\displaystyle e_{m}^{2}}\n\n which is \n\n\n\n(\n\n2\n\nm\n\n\n\n)\n\n2\n\n\n=\n\n4\n\nm\n\n\n\n\n{\\displaystyle (2^{m})^{2}=4^{m}}\n\n, the variable \"res\" is equal to \n\n\n\n2\nr\n\ne\n\nm\n\n\n\n\n{\\displaystyle 2re_{m}}\n\n, and the variable \"num\" is equal to the current \n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n which is the difference of the number we want the square root of and the square of our current approximation with all bits set up to \n\n\n\n\n2\n\nm\n+\n1\n\n\n\n\n{\\displaystyle 2^{m+1}}\n\n. Thus in the first loop, we want to find the highest power of 4 in \"bit\" to find the highest power of 2 in \n\n\n\ne\n\n\n{\\displaystyle e}\n\n. In the second loop, if num is greater than res + bit, then \n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n is greater than \n\n\n\n2\nr\n\ne\n\nm\n\n\n+\n\ne\n\nm\n\n\n2\n\n\n\n\n{\\displaystyle 2re_{m}+e_{m}^{2}}\n\n and we can subtract it. The next line, we want to add \n\n\n\n\ne\n\nm\n\n\n\n\n{\\displaystyle e_{m}}\n\n to \n\n\n\nr\n\n\n{\\displaystyle r}\n\n which means we want to add \n\n\n\n2\n\ne\n\nm\n\n\n2\n\n\n\n\n{\\displaystyle 2e_{m}^{2}}\n\n to \n\n\n\n2\nr\n\ne\n\nm\n\n\n\n\n{\\displaystyle 2re_{m}}\n\n so we want res = res + bit<<1. Then update \n\n\n\n\ne\n\nm\n\n\n\n\n{\\displaystyle e_{m}}\n\n to \n\n\n\n\ne\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle e_{m-1}}\n\n inside res which involves dividing by 2 or another shift to the right. Combining these 2 into one line leads to res = res>>1 + bit. If \n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n isn't greater than \n\n\n\n2\nr\n\ne\n\nm\n\n\n+\n\ne\n\nm\n\n\n2\n\n\n\n\n{\\displaystyle 2re_{m}+e_{m}^{2}}\n\n then we just update \n\n\n\n\ne\n\nm\n\n\n\n\n{\\displaystyle e_{m}}\n\n to \n\n\n\n\ne\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle e_{m-1}}\n\n inside res and divide it by 2. Then we update \n\n\n\n\ne\n\nm\n\n\n\n\n{\\displaystyle e_{m}}\n\n to \n\n\n\n\ne\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle e_{m-1}}\n\n in bit by dividing it by 4. The final iteration of the 2nd loop has bit equal to 1 and will cause update of \n\n\n\ne\n\n\n{\\displaystyle e}\n\n to run one extra time removing the factor of 2 from res making it our integer approximation of the root.\nFaster algorithms, in binary and decimal or any other base, can be realized by using lookup tables\u2014in effect trading more storage space for reduced run time.[4]\nPocket calculators typically implement good routines to compute the exponential function and the natural logarithm, and then compute the square root of S using the identity found using the properties of logarithms (\n\n\n\nln\n\u2061\n\nx\n\nn\n\n\n=\nn\nln\n\u2061\nx\n\n\n{\\displaystyle \\ln x^{n}=n\\ln x}\n\n) and exponentials (\n\n\n\n\ne\n\nln\n\u2061\nx\n\n\n=\nx\n\n\n{\\displaystyle e^{\\ln x}=x}\n\n):\nThe denominator in the fraction corresponds to the nth root. In the case above the denominator is 2, hence the equation specifies that the square root is to be found. The same identity is used when computing square roots with logarithm tables or slide rules.\nThis method for finding an approximation to a square root was described in an ancient Indian mathematical manuscript called the Bakhshali manuscript. It is equivalent to two iterations of the Babylonian method beginning with N. The original presentation goes as follows: To calculate \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n, let N2 be the nearest perfect square to S. Then, calculate:\nThis can be also written as:\nFind \n\n\n\n\n\n9.2345\n\n\n\n\n{\\displaystyle {\\sqrt {9.2345}}}\n\n\nThe Vedic duplex method from the book 'Vedic Mathematics' is a variant of the digit-by-digit method for calculating the square root.[5] The duplex is the square of the central digit plus double the cross-product of digits equidistant from the center. The duplex is computed from the quotient digits (square root digits) computed thus far, but after the initial digits. The duplex is subtracted from the dividend digit prior to the second subtraction for the product of the quotient digit times the divisor digit. For perfect squares the duplex and the dividend will get smaller and reach zero after a few steps. For non-perfect squares the decimal value of the square root can be calculated to any precision desired. However, as the decimal places proliferate, the duplex adjustment gets larger and longer to calculate. The duplex method follows the Vedic ideal for an algorithm, one-line, mental calculation. It is flexible in choosing the first digit group and the divisor. Small divisors are to be avoided by starting with a larger initial group.\nWe proceed as with the digit-by-digit calculation by assuming that we want to express a number N as a square of the sum of n positive numbers as\nDefine divisor as \n\n\n\nq\n=\n2\n\na\n\n0\n\n\n\n\n{\\displaystyle q=2a_{0}}\n\n and the duplex for a sequence of m numbers as\nThus, we can re-express the above identity in terms of the divisor and the duplexes as\nNow the computation can proceed by recursively guessing the values of \n\n\n\n\na\n\nm\n\n\n\n\n{\\displaystyle a_{m}}\n\n so that\nsuch that \n\n\n\n\nX\n\nm\n\n\n\u2265\n0\n\n\n{\\displaystyle X_{m}\\geq 0}\n\n for all \n\n\n\n1\n\u2264\nm\n\u2264\nn\n\u2212\n1\n\n\n{\\displaystyle 1\\leq m\\leq n-1}\n\n, with initialization \n\n\n\n\nX\n\n0\n\n\n=\nN\n\u2212\n\na\n\n0\n\n\n2\n\n\n.\n\n\n{\\displaystyle X_{0}=N-a_{0}^{2}.}\n\n When \n\n\n\n\nX\n\nm\n\n\n=\n0\n\n\n{\\displaystyle X_{m}=0}\n\n the algorithm terminates and the sum of \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\ns give the square root. The method is more similar to long division where \n\n\n\n\nX\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle X_{m-1}}\n\n is the dividend and \n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n is the remainder.\nFor the case of decimal numbers, if\nwhere \n\n\n\n\na\n\ni\n\n\n\u2208\n{\n0\n,\n1\n,\n2\n,\n\u2026\n,\n9\n}\n\n\n{\\displaystyle a_{i}\\in \\{0,1,2,\\ldots ,9\\}}\n\n, then the initiation \n\n\n\n\nX\n\n0\n\n\n=\nN\n\u2212\n\na\n\n0\n\n\n2\n\n\n\u22c5\n\n10\n\n2\n(\nn\n\u2212\n1\n)\n\n\n\n\n{\\displaystyle X_{0}=N-a_{0}^{2}\\cdot 10^{2(n-1)}}\n\n and the divisor will be \n\n\n\nq\n=\n2\n\na\n\n0\n\n\n\u22c5\n\n10\n\nn\n\u2212\n1\n\n\n\n\n{\\displaystyle q=2a_{0}\\cdot 10^{n-1}}\n\n. Also the product at any m-th stage will be \n\n\n\nq\n\na\n\nm\n\n\n\u22c5\n\n10\n\nn\n\u2212\nm\n\u2212\n1\n\n\n=\n2\n\na\n\n0\n\n\n\na\n\nm\n\n\n\u22c5\n\n10\n\n2\nn\n\u2212\nm\n\u2212\n2\n\n\n\n\n{\\displaystyle qa_{m}\\cdot 10^{n-m-1}=2a_{0}a_{m}\\cdot 10^{2n-m-2}}\n\n and the duplexes will be \n\n\n\n\nd\n\nm\n\n\n=\n\n\n\n\nd\n~\n\n\n\n\nm\n\n\n\u22c5\n\n10\n\n2\nn\n\u2212\nm\n\u2212\n3\n\n\n\n\n{\\displaystyle d_{m}={\\tilde {d}}_{m}\\cdot 10^{2n-m-3}}\n\n, where \n\n\n\n\n\n\n\nd\n~\n\n\n\n\nm\n\n\n\n\n{\\displaystyle {\\tilde {d}}_{m}}\n\n are the duplexes of the sequence \n\n\n\n\na\n\n1\n\n\n,\n\na\n\n2\n\n\n,\n\u2026\n,\n\na\n\nm\n\n\n\n\n{\\displaystyle a_{1},a_{2},\\ldots ,a_{m}}\n\n. At any m-th stage, we see that the place value of the duplex \n\n\n\n\n\n\n\nd\n~\n\n\n\n\nm\n\n\n\n\n{\\displaystyle {\\tilde {d}}_{m}}\n\n is one less than the product \n\n\n\n2\n\na\n\n0\n\n\n\na\n\nm\n\n\n\n\n{\\displaystyle 2a_{0}a_{m}}\n\n. Thus, in actual calculations it is customary to subtract the duplex value of the m-th stage at (m+1)-th stage. Also, unlike the previous digit-by-digit square root calculation, where at any given m-th stage, the calculation is done by taking the most significant pair of digits of the remaining term \n\n\n\n\nX\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle X_{m-1}}\n\n, the duplex method uses only a single most significant digit of \n\n\n\n\nX\n\nm\n\u2212\n1\n\n\n\n\n{\\displaystyle X_{m-1}}\n\n.\nIn other words, to calculate the duplex of a number, double the product of each pair of equidistant digits plus the square of the center digit (of the digits to the right of the colon).\nIn a square root calculation the quotient digit set increases incrementally for each step.\nConsider the perfect square 2809 = 532. Use the duplex method to find the square root of 2,809.\nThis method is applicable for finding the square root of \n\n\n\n0\n<\nS\n<\n3\n\n\n\n\n{\\displaystyle 0<S<3\\,\\!}\n\n and converges best for \n\n\n\nS\n\u2248\n1\n\n\n{\\displaystyle S\\approx 1}\n\n. This, however, is no real limitation for a computer based calculation, as in base 2 floating point and fixed point representations, it is trivial to multiply \n\n\n\nS\n\n\n\n\n{\\displaystyle S\\,\\!}\n\n by an integer power of 4, and therefore \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n by the corresponding power of 2, by changing the exponent or by shifting, respectively. Therefore, \n\n\n\nS\n\n\n\n\n{\\displaystyle S\\,\\!}\n\n can be moved to the range \n\n\n\n\n\n1\n2\n\n\n\u2264\nS\n<\n2\n\n\n{\\displaystyle {\\frac {1}{2}}\\leq S<2}\n\n. Moreover, the following method does not employ general divisions, but only additions, subtractions, multiplications, and divisions by powers of two, which are again trivial to implement. A disadvantage of the method is that numerical errors accumulate, in contrast to single variable iterative methods such as the Babylonian one.\nThe initialization step of this method is\nwhile the iterative steps read\nThen, \n\n\n\n\na\n\nn\n\n\n\u2192\n\n\nS\n\n\n\n\n{\\displaystyle a_{n}\\rightarrow {\\sqrt {S}}}\n\n (while \n\n\n\n\nc\n\nn\n\n\n\u2192\n0\n\n\n{\\displaystyle c_{n}\\rightarrow 0}\n\n).\nNote that the convergence of \n\n\n\n\nc\n\nn\n\n\n\n\n\n\n{\\displaystyle c_{n}\\,\\!}\n\n, and therefore also of \n\n\n\n\na\n\nn\n\n\n\n\n\n\n{\\displaystyle a_{n}\\,\\!}\n\n, is quadratic.\nThe proof of the method is rather easy. First, rewrite the iterative definition of \n\n\n\n\nc\n\nn\n\n\n\n\n\n\n{\\displaystyle c_{n}\\,\\!}\n\n as\nThen it is straightforward to prove by induction that\nand therefore the convergence of \n\n\n\n\na\n\nn\n\n\n\n\n\n\n{\\displaystyle a_{n}\\,\\!}\n\n to the desired result \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n is ensured by the convergence of \n\n\n\n\nc\n\nn\n\n\n\n\n\n\n{\\displaystyle c_{n}\\,\\!}\n\n to 0, which in turn follows from \n\n\n\n\u2212\n1\n<\n\nc\n\n0\n\n\n<\n2\n\n\n\n\n{\\displaystyle -1<c_{0}<2\\,\\!}\n\n.\nThis method was developed around 1950 by M. V. Wilkes, D. J. Wheeler and S. Gill[6] for use on EDSAC, one of the first electronic computers.[7] The method was later generalized, allowing the computation of non-square roots.[8]\nThe following are iterative methods for finding the reciprocal square root of S which is \n\n\n\n1\n\n/\n\n\n\nS\n\n\n\n\n{\\displaystyle 1/{\\sqrt {S}}}\n\n. Once it has been found, find \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n by simple multiplication: \n\n\n\n\n\nS\n\n\n=\nS\n\u22c5\n(\n1\n\n/\n\n\n\nS\n\n\n)\n\n\n{\\displaystyle {\\sqrt {S}}=S\\cdot (1/{\\sqrt {S}})}\n\n. These iterations involve only multiplication, and not division. They are therefore faster than the Babylonian method. However, they are not stable. If the initial value is not close to the reciprocal square root, the iterations will diverge away from it rather than converge to it. It can therefore be advantageous to perform an iteration of the Babylonian method on a rough estimate before starting to apply these methods.\nSome computers use Goldschmidt's algorithm to simultaneously calculate \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n and \n\n\n\n1\n\n/\n\n\n\nS\n\n\n\n\n{\\displaystyle 1/{\\sqrt {S}}}\n\n. Goldschmidt's algorithm finds \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n faster than Newton-Raphson iteration on a computer with a fused multiply\u2013add instruction and either a pipelined floating point unit or two independent floating-point units. Two ways of writing Goldschmidt's algorithm are:[9]\nEach iteration:\nuntil \n\n\n\n\nb\n\ni\n\n\n\n\n{\\displaystyle b_{i}}\n\n is sufficiently close to 1, or a fixed number of iterations.\nwhich causes\nGoldschmidt's equation can be rewritten as:\nEach iteration: (All 3 operations in this loop are in the form of a fused multiply\u2013add.)\nuntil \n\n\n\n\nr\n\ni\n\n\n\n\n{\\displaystyle r_{i}}\n\n is sufficiently close to 0, or a fixed number of iterations.\nwhich causes\nIf N is an approximation to \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n, a better approximation can be found by using the Taylor series of the square root function:\nAs an iterative method, the order of convergence is equal to the number of terms used. With two terms, it is identical to the Babylonian method. With three terms, each iteration takes almost as many operations as the Bakhshali approximation, but converges more slowly. Therefore, this is not a particularly efficient way of calculation. To maximize the rate of convergence, choose N so that \n\n\n\n\n\n\n\n|\n\nd\n\n|\n\n\n\nN\n\n2\n\n\n\n\n\n\n\n{\\displaystyle {\\frac {|d|}{N^{2}}}\\,}\n\n is as small as possible.\nA completely different method for computing the square root is based on the CORDIC algorithm, which uses only very simple operations (addition, subtraction, bitshift and table lookup, but no multiplication). The square root of S may be obtained as the output \n\n\n\n\nx\n\nn\n\n\n\n\n{\\displaystyle x_{n}}\n\n using the hyperbolic coordinate system in vectoring mode, with the following initialization:[10]\nQuadratic irrationals (numbers of the form \n\n\n\n\n\n\na\n+\n\n\nb\n\n\n\nc\n\n\n\n\n{\\displaystyle {\\frac {a+{\\sqrt {b}}}{c}}}\n\n, where a, b and c are integers), and in particular, square roots of integers, have periodic continued fractions. Sometimes what is desired is finding not the numerical value of a square root, but rather its continued fraction expansion, and hence its rational approximation. Let S be the positive number for which we are required to find the square root. Then assuming a to be a number that serves as an initial guess and r to be the remainder term, we can write \n\n\n\nS\n=\n\na\n\n2\n\n\n+\nr\n.\n\n\n{\\displaystyle S=a^{2}+r.}\n\n Since we have \n\n\n\nS\n\u2212\n\na\n\n2\n\n\n=\n(\n\n\nS\n\n\n+\na\n)\n(\n\n\nS\n\n\n\u2212\na\n)\n\n\n{\\displaystyle S-a^{2}=({\\sqrt {S}}+a)({\\sqrt {S}}-a)}\n\n, we can express the square root of S as\nBy applying this expression for \n\n\n\n\n\nS\n\n\n\n\n{\\displaystyle {\\sqrt {S}}}\n\n to the denominator term of the fraction, we have\nProceeding this way, we get a generalized continued fraction for the square root as\nFor any S a possible choice for a and r is a = 1 and r = S - 1, yielding\nFor example, for the square root of 2, we can take a = 1 and r = 1, giving us\nTaking the first three denominators give the rational approximation of \u221a2 as [1;2,2,2] = 17/12 = 1.41667, correct up to first three decimal places. Taking the first five denominators gives the rational approximation to \u221a2 as [1;2,2,2,2,2] = 99/70 = 1.4142857, correct up to first five decimal places. Taking more denominators give better approximations.\nAs another example, for the square root of 3, we can select a = 2 and r = -1, giving us\nThe first three denominators gives \u221a3 as 1.73214, correct up to the first four decimal places. Note that it is not necessary to choose an integer valued a. For instance, we can take a = \u221a2 and r = 1, such that\nWe can do the same for the whole numbers as well. For instance,\nThe following iterative algorithm [11] can be used to obtain the continued fraction expansion in canonical form (S is any natural number that is not a perfect square):\nNotice that mn, dn, and an are always integers. The algorithm terminates when this triplet is the same as one encountered before. The algorithm can also terminate on ai when ai = 2 a0,[12] which is easier to implement.\nThe expansion will repeat from then on. The sequence [a0; a1, a2, a3, \u2026] is the continued fraction expansion:\nBegin with m0\u00a0=\u00a00; d0\u00a0=\u00a01; and a0\u00a0=\u00a010 (102\u00a0=\u00a0100 and 112\u00a0=\u00a0121\u00a0>\u00a0114 so 10 chosen).\nSo, m1\u00a0=\u00a010; d1\u00a0=\u00a014; and a1\u00a0=\u00a01.\nNext, m2\u00a0=\u00a04; d2\u00a0=\u00a07; and a2\u00a0=\u00a02.\nNow, loop back to the second equation above.\nConsequently, the simple continued fraction for the square root of 114 is\nIts decimal value is approximately 10.67707 82520 31311 21....\nA more rapid method is to evaluate its generalized continued fraction. From the formula derived there:\nand the fact that 114 is 2/3 of the way between 102=100 and 112=121 results in\nwhich is simply the aforementioned [10;1,2, 10,2,1, 20,1,2, 10,2,1, 20,1,2, ...] evaluated at every third term. Combining pairs of fractions produces\nwhich is now [10;1,2, 10,2,1,20,1,2, 10,2,1,20,1,2, ...] evaluated at the third term and every six terms thereafter.\nPell's equation (also known as Brahmagupta equation since he was the first to give a solution to this particular equation) and its variants yield a method for efficiently finding continued fraction convergents of square roots of integers. However, it can be complicated to execute, and usually not every convergent is generated. The ideas behind the method are as follows:\nThe method is as follows:\nA number is represented in a floating point format as \n\n\n\nm\n\u00d7\n\nb\n\np\n\n\n\n\n{\\displaystyle m\\times b^{p}}\n\n which is also called scientific notation. Its square root is \n\n\n\n\n\nm\n\n\n\u00d7\n\nb\n\np\n\n/\n\n2\n\n\n\n\n{\\displaystyle {\\sqrt {m}}\\times b^{p/2}}\n\n and similar formulae would apply for cube roots and logarithms. On the face of it, this is no improvement in simplicity, but suppose that only an approximation is required: then just \n\n\n\n\nb\n\np\n\n/\n\n2\n\n\n\n\n{\\displaystyle b^{p/2}}\n\n is good to an order of magnitude. Next, recognise that some powers, p, will be odd, thus for 3141.59 = 3.14159x103 rather than deal with fractional powers of the base, multiply the mantissa by the base and subtract one from the power to make it even. The adjusted representation will become the equivalent of 31.4159x102 so that the square root will be \u221a31.4159 x 10.\nIf the integer part of the adjusted mantissa is taken, there can only be the values 1 to 99, and that could be used as an index into a table of 99 pre-computed square roots to complete the estimate. A computer using base sixteen would require a larger table, but one using base two would require only three entries: the possible bits of the integer part of the adjusted mantissa are 01 (the power being even so there was no shift, remembering that a normalised floating point number always has a non-zero high-order digit) or if the power was odd, 10 or 11, these being the first two bits of the original mantissa. Thus, 6.25 = 110.01 in binary, normalised to 1.1001 x 22 an even power so the paired bits of the mantissa are 01, while .625 = 0.101 in binary normalises to 1.01 x 2\u22121 an odd power so the adjustment is to 10.1 x 2\u22122 and the paired bits are 10. Notice that the low order bit of the power is echoed in the high order bit of the pairwise mantissa. An even power has its low-order bit zero and the adjusted mantissa will start with 0, whereas for an odd power that bit is one and the adjusted mantissa will start with 1. Thus, when the power is halved, it is as if its low order bit is shifted out to become the first bit of the pairwise mantissa.\nA table with only three entries could be enlarged by incorporating additional bits of the mantissa. However, with computers, rather than calculate an interpolation into a table, it is often better to find some simpler calculation giving equivalent results. Everything now depends on the exact details of the format of the representation, plus what operations are available to access and manipulate the parts of the number. For example, Fortran offers an EXPONENT(x) function to obtain the power. Effort expended in devising a good initial approximation is to be recouped by thereby avoiding the additional iterations of the refinement process that would have been needed for a poor approximation. Since these are few (one iteration requires a divide, an add, and a halving) the constraint is severe.\nMany computers follow the IEEE (or sufficiently similar) representation, and a very rapid approximation to the square root can be obtained for starting Newton's method. The technique that follows is based on the fact that the floating point format (in base two) approximates the base-2 logarithm. That is \n\n\n\n\nlog\n\n2\n\n\n\u2061\n(\nm\n\u00d7\n\n2\n\np\n\n\n)\n=\np\n+\n\nlog\n\n2\n\n\n\u2061\n(\nm\n)\n\n\n{\\displaystyle \\log _{2}(m\\times 2^{p})=p+\\log _{2}(m)}\n\n\nSo for a 32-bit single precision floating point number in IEEE format (where notably, the power has a bias of 127 added for the represented form) you can get the approximate logarithm by interpreting its binary representation as a 32-bit integer, scaling it by \n\n\n\n\n2\n\n\u2212\n23\n\n\n\n\n{\\displaystyle 2^{-23}}\n\n, and removing a bias of 127, i.e.\nFor example, 1.0 is represented by a hexadecimal number 0x3F800000, which would represent \n\n\n\n1065353216\n=\n127\n\u22c5\n\n2\n\n23\n\n\n\n\n{\\displaystyle 1065353216=127\\cdot 2^{23}}\n\n if taken as an integer. Using the formula above you get \n\n\n\n1065353216\n\u22c5\n\n2\n\n\u2212\n23\n\n\n\u2212\n127\n=\n0\n\n\n{\\displaystyle 1065353216\\cdot 2^{-23}-127=0}\n\n, as expected from \n\n\n\n\nlog\n\n2\n\n\n\u2061\n(\n1.0\n)\n\n\n{\\displaystyle \\log _{2}(1.0)}\n\n. In a similar fashion you get 0.5 from 1.5 (0x3FC00000).\n\nTo get the square root, divide the logarithm by 2 and convert the value back. The following program demonstrates the idea. Note that the exponent's lowest bit is intentionally allowed to propagate into the mantissa. One way to justify the steps in this program is to assume \n\n\n\nb\n\n\n{\\displaystyle b}\n\n is the exponent bias and \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the number of explicitly stored bits in the mantissa and then show that\nThe three mathematical operations forming the core of the above function can be expressed in a single line. An additional adjustment can be added to reduce the maximum relative error. So, the three operations, not including the cast, can be rewritten as\nwhere a is a bias for adjusting the approximation errors. For example, with a = 0 the results are accurate for even powers of 2 (e.g., 1.0), but for other numbers the results will be slightly too big (e.g.,1.5 for 2.0 instead of 1.414... with 6% error). With a = -0x4C000, the errors are between about -3.5% and 3.5%.\nIf the approximation is to be used for an initial guess for Newton's method to the equation \n\n\n\n(\n1\n\n/\n\n\nx\n\n2\n\n\n)\n\u2212\nS\n=\n0\n\n\n{\\displaystyle (1/x^{2})-S=0}\n\n, then the reciprocal form shown in the following section is preferred.\nA variant of the above routine is included below, which can be used to compute the reciprocal of the square root, i.e., \n\n\n\n\nx\n\n\u2212\n\n\n1\n2\n\n\n\n\n\n\n{\\displaystyle x^{-{1 \\over 2}}}\n\n instead, was written by Greg Walsh. The integer-shift approximation produced a relative error of less than 4%, and the error dropped further to 0.15% with one iteration of Newton's method on the following line.[13] In computer graphics it is a very efficient way to normalize a vector.\nSome VLSI hardware implements inverse square root using a second degree polynomial estimation followed by a Goldschmidt iteration.[14]\nIf S\u00a0<\u00a00, then its principal square root is\nIf S\u00a0=\u00a0a+bi where a and b are real and b\u00a0\u2260\u00a00, then its principal square root is\nThis can be verified by squaring the root.[15][16] Here\nis the modulus of S. The principal square root of a complex number is defined to be the root with the non-negative real part.", 
    "dbpedia_url": "http://dbpedia.org/resource/Methods_of_computing_square_roots", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Methods_of_computing_square_roots\n"
}