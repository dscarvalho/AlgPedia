{
    "about": "In computer science and graph theory, Karger's algorithm is a randomized algorithm to compute a minimum cut of a connected graph. It was invented by David Karger and first published in 1993.[1]", 
    "name": "Karger'S Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "In computer science and graph theory, Karger's algorithm is a randomized algorithm to compute a minimum cut of a connected graph. It was invented by David Karger and first published in 1993.[1]\nThe idea of the algorithm is based on the concept of contraction of an edge \n\n\n\n(\nu\n,\nv\n)\n\n\n{\\displaystyle (u,v)}\n\n in an undirected graph \n\n\n\nG\n=\n(\nV\n,\nE\n)\n\n\n{\\displaystyle G=(V,E)}\n\n. Informally speaking, the contraction of an edge merges the nodes \n\n\n\nu\n\n\n{\\displaystyle u}\n\n and \n\n\n\nv\n\n\n{\\displaystyle v}\n\n into one, reducing the total number of nodes of the graph by one. All other edges connecting either \n\n\n\nu\n\n\n{\\displaystyle u}\n\n or \n\n\n\nv\n\n\n{\\displaystyle v}\n\n are \"reattached\" to the merged node, effectively producing a multigraph. Karger's basic algorithm iteratively contracts randomly chosen edges until only two nodes remain; those nodes represent a cut in the original graph. By iterating this basic algorithm a sufficient number of times, a minimum cut can be found with high probability.\n\n\nA cut \n\n\n\n(\nS\n,\nT\n)\n\n\n{\\displaystyle (S,T)}\n\n in an undirected graph \n\n\n\nG\n=\n(\nV\n,\nE\n)\n\n\n{\\displaystyle G=(V,E)}\n\n is a partition of the vertices \n\n\n\nV\n\n\n{\\displaystyle V}\n\n into two non-empty, disjoint sets \n\n\n\nS\n\u222a\nT\n=\nV\n\n\n{\\displaystyle S\\cup T=V}\n\n. The cutset of a cut consists of the edges \n\n\n\n{\n\nu\nv\n\u2208\nE\n:\nu\n\u2208\nS\n,\nv\n\u2208\nT\n\n}\n\n\n{\\displaystyle \\{\\,uv\\in E\\colon u\\in S,v\\in T\\,\\}}\n\n between the two parts. The size (or weight) of a cut in an unweighted graph is the cardinality of the cutset, i.e., the number of edges between the two parts,\nThere are \n\n\n\n\n2\n\n\n|\n\nV\n\n|\n\n\n\n\n\n{\\displaystyle 2^{|V|}}\n\n ways of choosing for each vertex whether it belongs to \n\n\n\nS\n\n\n{\\displaystyle S}\n\n or to \n\n\n\nT\n\n\n{\\displaystyle T}\n\n, but two of these choices make \n\n\n\nS\n\n\n{\\displaystyle S}\n\n or \n\n\n\nT\n\n\n{\\displaystyle T}\n\n empty and do not give rise to cuts. Among the remaining choices, swapping the roles of \n\n\n\nS\n\n\n{\\displaystyle S}\n\n and \n\n\n\nT\n\n\n{\\displaystyle T}\n\n does not change the cut, so each cut is counted twice; therefore, there are \n\n\n\n\n2\n\n\n|\n\nV\n\n|\n\n\u2212\n1\n\n\n\u2212\n1\n\n\n{\\displaystyle 2^{|V|-1}-1}\n\n distinct cuts. The minimum cut problem is to find a cut of smallest size among these cuts.\nFor weighted graphs with positive edge weights \n\n\n\nw\n:\nE\n\u2192\n\n\nR\n\n\n+\n\n\n\n\n{\\displaystyle w\\colon E\\rightarrow \\mathbf {R} ^{+}}\n\n the weight of the cut is the sum of the weights of edges between vertices in each part\nwhich agrees with the unweighted definition for \n\n\n\nw\n=\n1\n\n\n{\\displaystyle w=1}\n\n.\nA cut is sometimes called a \u201cglobal cut\u201d to distinguish it from an \u201c\n\n\n\ns\n\n\n{\\displaystyle s}\n\n-\n\n\n\nt\n\n\n{\\displaystyle t}\n\n cut\u201d for a given pair of vertices, which has the additional requirement that \n\n\n\ns\n\u2208\nS\n\n\n{\\displaystyle s\\in S}\n\n and \n\n\n\nt\n\u2208\nT\n\n\n{\\displaystyle t\\in T}\n\n. Every global cut is an \n\n\n\ns\n\n\n{\\displaystyle s}\n\n-\n\n\n\nt\n\n\n{\\displaystyle t}\n\n cut for some \n\n\n\ns\n,\nt\n\u2208\nV\n\n\n{\\displaystyle s,t\\in V}\n\n. Thus, the minimum cut problem can be solved in polynomial time by iterating over all choices of \n\n\n\ns\n,\nt\n\u2208\nV\n\n\n{\\displaystyle s,t\\in V}\n\n and solving the resulting minimum \n\n\n\ns\n\n\n{\\displaystyle s}\n\n-\n\n\n\nt\n\n\n{\\displaystyle t}\n\n cut problem using the max-flow min-cut theorem and a polynomial time algorithm for maximum flow, such as the push-relabel algorithm, though this approach is not optimal. Better deterministic algorithms for the global minimum cut problem include the Stoer\u2013Wagner algorithm, which has a running time of \n\n\n\nO\n(\nm\nn\n+\n\nn\n\n2\n\n\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle O(mn+n^{2}\\log n)}\n\n.[2]\nThe fundamental operation of Karger\u2019s algorithm is a form of edge contraction. The result of contracting the edge \n\n\n\ne\n=\n{\nu\n,\nv\n}\n\n\n{\\displaystyle e=\\{u,v\\}}\n\n is new node \n\n\n\nu\nv\n\n\n{\\displaystyle uv}\n\n. Every edge \n\n\n\n{\nw\n,\nu\n}\n\n\n{\\displaystyle \\{w,u\\}}\n\n or \n\n\n\n{\nw\n,\nv\n}\n\n\n{\\displaystyle \\{w,v\\}}\n\n for \n\n\n\nw\n\u2209\n{\nu\n,\nv\n}\n\n\n{\\displaystyle w\\notin \\{u,v\\}}\n\n to the endpoints of the contracted edge is replaced by an edge \n\n\n\n{\nw\n,\nu\nv\n}\n\n\n{\\displaystyle \\{w,uv\\}}\n\n to the new node. Finally, the contracted nodes \n\n\n\nu\n\n\n{\\displaystyle u}\n\n and \n\n\n\nv\n\n\n{\\displaystyle v}\n\n with all their incident edges are removed. In particular, the resulting graph contains no self-loops. The result of contracting edge \n\n\n\ne\n\n\n{\\displaystyle e}\n\n is denoted \n\n\n\nG\n\n/\n\ne\n\n\n{\\displaystyle G/e}\n\n.\n\nThe contraction algorithm repeatedly contracts random edges in the graph, until only two nodes remain, at which point there is only a single cut.\nWhen the graph is represented using adjacency lists or an adjacency matrix, a single edge contraction operation can be implemented with a linear number of updates to the data structure, for a total running time of \n\n\n\nO\n(\n\n|\n\nV\n\n\n|\n\n\n2\n\n\n)\n\n\n{\\displaystyle O(|V|^{2})}\n\n. Alternatively, the procedure can be viewed as an execution of Kruskal\u2019s algorithm for constructing the minimum spanning tree in a graph where the edges have weights \n\n\n\nw\n(\n\ne\n\ni\n\n\n)\n=\n\u03c0\n(\ni\n)\n\n\n{\\displaystyle w(e_{i})=\\pi (i)}\n\n according to a random permutation \n\n\n\n\u03c0\n\n\n{\\displaystyle \\pi }\n\n. Removing the heaviest edge of this tree results in two components that describe a cut. In this way, the contraction procedure can be implemented like Kruskal\u2019s algorithm in time \n\n\n\nO\n(\n\n|\n\nE\n\n|\n\nlog\n\u2061\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|E|\\log |E|)}\n\n.\nThe best known implementations use \n\n\n\nO\n(\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|E|)}\n\n time and space, or \n\n\n\nO\n(\n\n|\n\nE\n\n|\n\nlog\n\u2061\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|E|\\log |E|)}\n\n time and \n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n)\n\n\n{\\displaystyle O(|V|)}\n\n space, respectively.[1]\nIn a graph \n\n\n\nG\n=\n(\nV\n,\nE\n)\n\n\n{\\displaystyle G=(V,E)}\n\n with \n\n\n\nn\n=\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle n=|V|}\n\n vertices, the contraction algorithm returns a minimum cut with polynomially small probability \n\n\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n\u2212\n1\n\n\n\n\n{\\displaystyle {\\binom {n}{2}}^{-1}}\n\n. Every graph has \n\n\n\n\n2\n\nn\n\u2212\n1\n\n\n\u2212\n1\n\n\n{\\displaystyle 2^{n-1}-1}\n\n cuts,[3] among which at most \n\n\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n\n\n{\\displaystyle {\\tbinom {n}{2}}}\n\n can be minimum cuts. Therefore, the success probability for this algorithm is much better than the probability for picking a cut at random, which is at most \n\n\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n\n/\n\n(\n\n2\n\nn\n\u2212\n1\n\n\n\u2212\n1\n)\n\n\n{\\displaystyle {\\tbinom {n}{2}}/(2^{n-1}-1)}\n\n\nFor instance, the cycle graph on \n\n\n\nn\n\n\n{\\displaystyle n}\n\n vertices has exactly \n\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n\n{\\displaystyle {\\binom {n}{2}}}\n\n minimum cuts, given by every choice of 2 edges. The contraction procedure finds each of these with equal probability.\nTo establish the bound on the success probability in general, let \n\n\n\nC\n\n\n{\\displaystyle C}\n\n denote the edges of a specific minimum cut of size \n\n\n\nk\n\n\n{\\displaystyle k}\n\n. The contraction algorithm returns \n\n\n\nC\n\n\n{\\displaystyle C}\n\n if none of the random edges belongs to the cutset of \n\n\n\nC\n\n\n{\\displaystyle C}\n\n. In particular, the first edge contraction avoids \n\n\n\nC\n\n\n{\\displaystyle C}\n\n, which happens with probability \n\n\n\n1\n\u2212\nk\n\n/\n\n\n|\n\nE\n\n|\n\n\n\n{\\displaystyle 1-k/|E|}\n\n. The minimum degree of \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is at least \n\n\n\nk\n\n\n{\\displaystyle k}\n\n (otherwise a minimum degree vertex would induce a smaller cut), so \n\n\n\n\n|\n\nE\n\n|\n\n\u2265\nn\nk\n\n/\n\n2\n\n\n{\\displaystyle |E|\\geq nk/2}\n\n. Thus, the probability that the contraction algorithm picks an edge from \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is\nThe probability \n\n\n\n\np\n\nn\n\n\n\n\n{\\displaystyle p_{n}}\n\n that the contraction algorithm on an \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-vertex graph avoids \n\n\n\nC\n\n\n{\\displaystyle C}\n\n satisfies the recurrence \n\n\n\n\np\n\nn\n\n\n\u2265\n\n\n(\n\n\n1\n\u2212\n\n\n2\nn\n\n\n\n\n)\n\n\n\np\n\nn\n\u2212\n1\n\n\n\n\n{\\displaystyle p_{n}\\geq {\\bigl (}1-{\\frac {2}{n}}{\\bigr )}p_{n-1}}\n\n, with \n\n\n\n\np\n\n2\n\n\n=\n1\n\n\n{\\displaystyle p_{2}=1}\n\n, which can be expanded as\nBy repeating the contraction algorithm \n\n\n\nT\n=\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\nln\n\u2061\nn\n\n\n{\\displaystyle T={\\binom {n}{2}}\\ln n}\n\n times with independent random choices and returning the smallest cut, the probability of not finding a minimum cut is\nThe total running time for \n\n\n\nT\n\n\n{\\displaystyle T}\n\n repetitions for a graph with \n\n\n\nn\n\n\n{\\displaystyle n}\n\n vertices and \n\n\n\nm\n\n\n{\\displaystyle m}\n\n edges is \n\n\n\nO\n(\nT\nm\n)\n=\nO\n(\n\nn\n\n2\n\n\nm\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle O(Tm)=O(n^{2}m\\log n)}\n\n.\nAn extension of Karger\u2019s algorithm due to David Karger and Clifford Stein achieves an order of magnitude improvement.[4]\nThe basic idea is to perform the contraction procedure until the graph reaches \n\n\n\nt\n\n\n{\\displaystyle t}\n\n vertices.\nThe probability \n\n\n\n\np\n\nn\n,\nt\n\n\n\n\n{\\displaystyle p_{n,t}}\n\n that this contraction procedure avoids a specific cut \n\n\n\nC\n\n\n{\\displaystyle C}\n\n in an \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-vertex graph is\n\n\n\n\n\np\n\nn\n,\nt\n\n\n\u2265\n\n\u220f\n\ni\n=\n0\n\n\nn\n\u2212\nt\n\u2212\n1\n\n\n\n\n(\n\n\n1\n\u2212\n\n\n2\n\nn\n\u2212\ni\n\n\n\n\n\n)\n\n\n=\n\n\n\n(\n\n\nt\n2\n\n\n)\n\n\n\n\n\n/\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n.\n\n\n{\\displaystyle p_{n,t}\\geq \\prod _{i=0}^{n-t-1}{\\Bigl (}1-{\\frac {2}{n-i}}{\\Bigr )}={\\binom {t}{2}}{\\Bigg /}{\\binom {n}{2}}\\,.}\n\n\nThis expression is approximately \n\n\n\n\nt\n\n2\n\n\n\n/\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle t^{2}/n^{2}}\n\n and becomes less than \n\n\n\n\n\n1\n2\n\n\n\n\n{\\displaystyle {\\frac {1}{2}}}\n\n around \n\n\n\nt\n=\nn\n\n/\n\n\n\n2\n\n\n\n\n{\\displaystyle t=n/{\\sqrt {2}}}\n\n. In particular, the probability that an edge from \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is contracted grows towards the end. This motivates the idea of switching to a slower algorithm after a certain number of contraction steps.\nThe probability \n\n\n\nP\n(\nn\n)\n\n\n{\\displaystyle P(n)}\n\n the algorithm finds a specific cutset \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is given by the recurrence relation\nwith solution \n\n\n\nP\n(\nn\n)\n=\nO\n\n(\n\n\n1\n\nlog\n\u2061\nn\n\n\n\n)\n\n\n\n{\\displaystyle P(n)=O\\left({\\frac {1}{\\log n}}\\right)}\n\n. The running time of fastmincut satisfies\nwith solution \n\n\n\nT\n(\nn\n)\n=\nO\n(\n\nn\n\n2\n\n\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle T(n)=O(n^{2}\\log n)}\n\n. To achieve error probability \n\n\n\nO\n(\n1\n\n/\n\nn\n)\n\n\n{\\displaystyle O(1/n)}\n\n, the algorithm can be repeated \n\n\n\nO\n(\nlog\n\u2061\nn\n\n/\n\nP\n(\nn\n)\n)\n\n\n{\\displaystyle O(\\log n/P(n))}\n\n times, for an overall running time of \n\n\n\nT\n(\nn\n)\n\u22c5\n\n\n\nlog\n\u2061\nn\n\n\nP\n(\nn\n)\n\n\n\n=\nO\n(\n\nn\n\n2\n\n\n\nlog\n\n3\n\n\n\u2061\nn\n)\n\n\n{\\displaystyle T(n)\\cdot {\\frac {\\log n}{P(n)}}=O(n^{2}\\log ^{3}n)}\n\n. This is an order of magnitude improvement over Karger\u2019s original algorithm.\nTheorem: With high probability we can find all min cuts in the running time of \n\n\n\nO\n(\n\nn\n\n2\n\n\n\nln\n\n3\n\n\n\u2061\nn\n)\n\n\n{\\displaystyle O(n^{2}\\ln ^{3}n)}\n\n.\nProof: We know that \n\n\n\nP\n(\nn\n)\n=\nO\n\n(\n\n\n1\n\nln\n\u2061\nn\n\n\n\n)\n\n\n\n{\\displaystyle P(n)=O\\left({\\frac {1}{\\ln n}}\\right)}\n\n, therefore after running this algorithm \n\n\n\nO\n(\n\nln\n\n2\n\n\n\u2061\nn\n)\n\n\n{\\displaystyle O(\\ln ^{2}n)}\n\n times the probability of missing a specific min-cut is\nAnd there are at most \n\n\n\n\n\n\n(\n\n\nn\n2\n\n\n)\n\n\n\n\n\n{\\displaystyle {\\binom {n}{2}}}\n\n min-cuts, hence the probability of missing any min-cut is\nThe probability of failures is considerably small when n is large enough.\u220e\nTo determine a min-cut, one has to touch every edge in the graph at least once, which is \n\n\n\nO\n(\n\nn\n\n2\n\n\n)\n\n\n{\\displaystyle O(n^{2})}\n\n time in a dense graph. The Karger\u2013Stein's min-cut algorithm takes the running time of \n\n\n\nO\n(\n\nn\n\n2\n\n\n\nln\n\nO\n(\n1\n)\n\n\n\u2061\nn\n)\n\n\n{\\displaystyle O(n^{2}\\ln ^{O(1)}n)}\n\n, which is very close to that.", 
    "dbpedia_url": "http://dbpedia.org/resource/Karger's_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Karger's_algorithm\n"
}