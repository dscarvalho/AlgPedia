{
    "about": "In evolutionary computation, differential evolution (DE) is a method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. Such methods are commonly known as metaheuristics as they make few or no assumptions about the problem being optimized and can search very large spaces of candidate solutions. However, metaheuristics such as DE do not guarantee an optimal solution is ever found.", 
    "name": "Differential Evolution", 
    "classification": "Evolutionary Algorithms", 
    "full_text": "In evolutionary computation, differential evolution (DE) is a method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. Such methods are commonly known as metaheuristics as they make few or no assumptions about the problem being optimized and can search very large spaces of candidate solutions. However, metaheuristics such as DE do not guarantee an optimal solution is ever found.\nDE is used for multidimensional real-valued functions but does not use the gradient of the problem being optimized, which means DE does not require for the optimization problem to be differentiable as is required by classic optimization methods such as gradient descent and quasi-newton methods. DE can therefore also be used on optimization problems that are not even continuous, are noisy, change over time, etc.[1]\nDE optimizes a problem by maintaining a population of candidate solutions and creating new candidate solutions by combining existing ones according to its simple formulae, and then keeping whichever candidate solution has the best score or fitness on the optimization problem at hand. In this way the optimization problem is treated as a black box that merely provides a measure of quality given a candidate solution and the gradient is therefore not needed.\nDE is originally due to Storn and Price.[2][3] Books have been published on theoretical and practical aspects of using DE in parallel computing, multiobjective optimization, constrained optimization, and the books also contain surveys of application areas.[4][5][6][7] Excellent surveys on the multi-faceted research aspects of DE can be found in journal articles like.[8][9]\n\n\nA basic variant of the DE algorithm works by having a population of candidate solutions (called agents). These agents are moved around in the search-space by using simple mathematical formulae to combine the positions of existing agents from the population. If the new position of an agent is an improvement it is accepted and forms part of the population, otherwise the new position is simply discarded. The process is repeated and by doing so it is hoped, but not guaranteed, that a satisfactory solution will eventually be discovered.\nFormally, let \n\n\n\nf\n:\n\n\n\nR\n\n\n\nn\n\n\n\u2192\n\n\nR\n\n\n\n\n{\\displaystyle f:{\\mathbb {R}}^{n}\\to {\\mathbb {R}}}\n\n be the cost function which must be minimized or fitness function which must be maximized. The function takes a candidate solution as argument in the form of a vector of real numbers and produces a real number as output which indicates the fitness of the given candidate solution. The gradient of \n\n\n\nf\n\n\n{\\displaystyle f}\n\n is not known. The goal is to find a solution \n\n\n\nm\n\n\n{\\displaystyle m}\n\n for which \n\n\n\nf\n(\nm\n)\n\u2264\nf\n(\np\n)\n\n\n{\\displaystyle f(m)\\leq f(p)}\n\n for all \n\n\n\np\n\n\n{\\displaystyle p}\n\n in the search-space, which would mean \n\n\n\nm\n\n\n{\\displaystyle m}\n\n is the global minimum. Maximization can be performed by considering the function \n\n\n\nh\n:=\n\u2212\nf\n\n\n{\\displaystyle h:=-f}\n\n instead.\nLet \n\n\n\n\nx\n\n\u2208\n\n\n\nR\n\n\n\nn\n\n\n\n\n{\\displaystyle \\mathbf {x} \\in {\\mathbb {R}}^{n}}\n\n designate a candidate solution (agent) in the population. \n\n\n\nC\nR\n\n\n{\\displaystyle CR}\n\n denotes the cross over rate. The basic DE algorithm can then be described as follows:\nNote that \n\n\n\nF\n\u2208\n[\n0\n,\n2\n]\n\n\n{\\displaystyle F\\in [0,2]}\n\n is called the differential weight and \n\n\n\n\nCR\n\n\u2208\n[\n0\n,\n1\n]\n\n\n{\\displaystyle {\\text{CR}}\\in [0,1]}\n\n is called the crossover probability, both these parameters are selectable by the practitioner along with the population size \n\n\n\n\nNP\n\n\u2265\n4\n\n\n{\\displaystyle {\\text{NP}}\\geq 4}\n\n see below.\nThe choice of DE parameters \n\n\n\nF\n,\n\nCR\n\n\n\n{\\displaystyle F,{\\text{CR}}}\n\n and \n\n\n\n\nNP\n\n\n\n{\\displaystyle {\\text{NP}}}\n\n can have a large impact on optimization performance. Selecting the DE parameters that yield good performance has therefore been the subject of much research. Rules of thumb for parameter selection were devised by Storn et al.[3][4] and Liu and Lampinen.[10] Mathematical convergence analysis regarding parameter selection was done by Zaharie.[11] Meta-optimization of the DE parameters was done by Pedersen[12][13] and Zhang et al.[14]\nVariants of the DE algorithm are continually being developed in an effort to improve optimization performance. Many different schemes for performing crossover and mutation of agents are possible in the basic algorithm given above, see e.g.[3] More advanced DE variants are also being developed with a popular research trend being to perturb or adapt the DE parameters during optimization, see e.g. Price et al.,[4] Liu and Lampinen,[15] Qin and Suganthan,[16] Civicioglu[17] and Brest et al.[18] There are also some work in making a hybrid optimization method using DE combined with other optimizers.[19]\nThe following is a specific pseudocode implementation of differential evolution, written similar to the Java language. For more generalized pseudocode, please see the listing in the Algorithm section above.", 
    "dbpedia_url": "http://dbpedia.org/resource/Differential_evolution", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Differential_evolution\n"
}