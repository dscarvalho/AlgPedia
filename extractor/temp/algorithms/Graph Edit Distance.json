{
    "about": "In mathematics and computer science, graph edit distance (GED) is a measure of similarity (or dissimilarity) between two graphs. The concept of graph edit distance was first formalized mathematically by Alberto Sanfliu and King-Sun Fu in 1983.[1] A major application of graph edit distance is in inexact graph matching, such as error-tolerant pattern recognition in machine learning.[2]", 
    "name": "Graph Edit Distance", 
    "classification": "Graph Algorithms", 
    "full_text": "In mathematics and computer science, graph edit distance (GED) is a measure of similarity (or dissimilarity) between two graphs. The concept of graph edit distance was first formalized mathematically by Alberto Sanfliu and King-Sun Fu in 1983.[1] A major application of graph edit distance is in inexact graph matching, such as error-tolerant pattern recognition in machine learning.[2]\nThe graph edit distance between two graphs is related to the string edit distance between strings. With the interpretation of strings as connected Directed acyclic graphs of maximum degree one, classical definitions of edit distance such as Levenshtein distance, [3] [4] Hamming distance[5] and Jaro\u2013Winkler distance may be interepeted as graph edit distances between suitably constrained graphs. Likewise, graph edit distance is also a generalization of tree edit distance between rooted trees.[6][7][8][9]\n\n\nThe mathematical definition of graph edit distance is dependent upon the definitions of the graphs over which it is defined, i.e. whether and how the vertices and edges of the graph are labeled and whether the edges are directed. Generally, given a set of graph edit operations (also known as elementary graph operations), the graph edit distance between two graphs \n\n\n\n\ng\n\n1\n\n\n\n\n{\\displaystyle g_{1}}\n\n and \n\n\n\n\ng\n\n2\n\n\n\n\n{\\displaystyle g_{2}}\n\n, written as \n\n\n\nG\nE\nD\n(\n\ng\n\n1\n\n\n,\n\ng\n\n2\n\n\n)\n\n\n{\\displaystyle GED(g_{1},g_{2})}\n\n can defined as\nwhere \n\n\n\n\n\nP\n\n\n(\n\ng\n\n1\n\n\n,\n\ng\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {P}}(g_{1},g_{2})}\n\n denotes the set of edit paths transforming \n\n\n\n\ng\n\n1\n\n\n\n\n{\\displaystyle g_{1}}\n\n into (a graph isomorphic to) \n\n\n\n\ng\n\n2\n\n\n\n\n{\\displaystyle g_{2}}\n\n and \n\n\n\nc\n(\ne\n)\n\u2265\n0\n\n\n{\\displaystyle c(e)\\geq 0}\n\n is the cost of each graph edit operation \n\n\n\ne\n\n\n{\\displaystyle e}\n\n.\nThe set of elementary graph edit operators typically includes:\nAdditional, but less common operators, include operations such as edge splitting that introduces a new vertex into an edge (also creating a new edge), and edge contraction that eliminates vertices of degree two between edges (of the same color). Although such complex edit operators can be defined in terms of more elementary transformations, their use allows finer parameterization of the cost function \n\n\n\nc\n\n\n{\\displaystyle c}\n\n when the operator is cheaper than the sum of its constituents.\nGraph edit distance finds applications in handwriting recognition,[10] fingerprint recognition[11] and cheminformatics.[12]\nExact algorithms for computing the graph edit distance between a pair of graphs typically transform the problem into one of finding the minimum cost edit path between the two graphs. The computation of the optimal edit path is cast as a pathfinding search or shortest path problem, often implemented as an A* search algorithm.\nIn addition to exact algorithms, a number of efficient approximation algorithms are also known.[13][14]\nDespite the above algorithms sometimes working well in practice, in general the problem of computing graph edit distance is NP-complete[15] (for a proof that's available online, see Section 2 of Zeng et al.), and is even hard to approximate (formally, it is APX-hard[16]).", 
    "dbpedia_url": "http://dbpedia.org/resource/Graph_edit_distance", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Graph_edit_distance\n"
}