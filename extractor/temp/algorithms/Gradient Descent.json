{
    "about": "Gradient descent is a first-order iterative optimization algorithm. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or of the approximate gradient) of the function at the current point. If instead one takes steps proportional to the positive of the gradient, one approaches a local maximum of that function; the procedure is then known as gradient ascent.", 
    "name": "Gradient Descent", 
    "classification": "Optimization Algorithms And Methods", 
    "full_text": "Gradient descent is a first-order iterative optimization algorithm. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or of the approximate gradient) of the function at the current point. If instead one takes steps proportional to the positive of the gradient, one approaches a local maximum of that function; the procedure is then known as gradient ascent.\nGradient descent is also known as steepest descent, or the method of steepest descent. Gradient descent should not be confused with the method of steepest descent for approximating integrals.\n\n\nGradient descent is based on the observation that if the multi-variable function \n\n\n\nF\n(\n\nx\n\n)\n\n\n{\\displaystyle F(\\mathbf {x} )}\n\n is defined and differentiable in a neighborhood of a point \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n, then \n\n\n\nF\n(\n\nx\n\n)\n\n\n{\\displaystyle F(\\mathbf {x} )}\n\n decreases fastest if one goes from \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n in the direction of the negative gradient of \n\n\n\nF\n\n\n{\\displaystyle F}\n\n at \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n, \n\n\n\n\u2212\n\u2207\nF\n(\n\na\n\n)\n\n\n{\\displaystyle -\\nabla F(\\mathbf {a} )}\n\n. It follows that, if\nfor \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n small enough, then \n\n\n\nF\n(\n\na\n\n)\n\u2265\nF\n(\n\nb\n\n)\n\n\n{\\displaystyle F(\\mathbf {a} )\\geq F(\\mathbf {b} )}\n\n. In other words, the term \n\n\n\n\u03b3\n\u2207\nF\n(\n\na\n\n)\n\n\n{\\displaystyle \\gamma \\nabla F(\\mathbf {a} )}\n\n is subtracted from \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n because we want to move against the gradient, namely down toward the minimum. With this observation in mind, one starts with a guess \n\n\n\n\n\nx\n\n\n0\n\n\n\n\n{\\displaystyle \\mathbf {x} _{0}}\n\n for a local minimum of \n\n\n\nF\n\n\n{\\displaystyle F}\n\n, and considers the sequence \n\n\n\n\n\nx\n\n\n0\n\n\n,\n\n\nx\n\n\n1\n\n\n,\n\n\nx\n\n\n2\n\n\n,\n\u2026\n\n\n{\\displaystyle \\mathbf {x} _{0},\\mathbf {x} _{1},\\mathbf {x} _{2},\\dots }\n\n such that\nWe have\nso hopefully the sequence \n\n\n\n(\n\n\nx\n\n\nn\n\n\n)\n\n\n{\\displaystyle (\\mathbf {x} _{n})}\n\n converges to the desired local minimum. Note that the value of the step size \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n is allowed to change at every iteration. With certain assumptions on the function \n\n\n\nF\n\n\n{\\displaystyle F}\n\n (for example, \n\n\n\nF\n\n\n{\\displaystyle F}\n\n convex and \n\n\n\n\u2207\nF\n\n\n{\\displaystyle \\nabla F}\n\n Lipschitz) and particular choices of \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n (e.g., chosen either via a line search that satisfies the Wolfe conditions or the Barzilai-Borwein method shown as following),\nconvergence to a local minimum can be guaranteed. When the function \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is convex, all local minima are also global minima, so in this case gradient descent can converge to the global solution.\nThis process is illustrated in the adjacent picture. Here \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is assumed to be defined on the plane, and that its graph has a bowl shape. The blue curves are the contour lines, that is, the regions on which the value of \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is constant. A red arrow originating at a point shows the direction of the negative gradient at that point. Note that the (negative) gradient at a point is orthogonal to the contour line going through that point. We see that gradient descent leads us to the bottom of the bowl, that is, to the point where the value of the function \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is minimal.\nGradient descent has problems with pathological functions such as the Rosenbrock function shown here.\nThe Rosenbrock function has a narrow curved valley which contains the minimum. The bottom of the valley is very flat. Because of the curved flat valley the optimization is zig-zagging slowly with small stepsizes towards the minimum.\n\nThe \"Zig-Zagging\" nature of the method is also evident below, where the gradient descent method is applied to \n\n\n\nF\n(\nx\n,\ny\n)\n=\nsin\n\u2061\n\n(\n\n\n1\n2\n\n\n\nx\n\n2\n\n\n\u2212\n\n\n1\n4\n\n\n\ny\n\n2\n\n\n+\n3\n)\n\ncos\n\u2061\n(\n2\nx\n+\n1\n\u2212\n\ne\n\ny\n\n\n)\n\n\n{\\displaystyle F(x,y)=\\sin \\left({\\frac {1}{2}}x^{2}-{\\frac {1}{4}}y^{2}+3\\right)\\cos(2x+1-e^{y})}\n\n.\n\nFor some of the above examples, gradient descent is relatively slow close to the minimum: technically, its asymptotic rate of convergence is inferior to many other methods. For poorly conditioned convex problems, gradient descent increasingly 'zigzags' as the gradients point nearly orthogonally to the shortest direction to a minimum point. For more details, see the comments below.\nFor non-differentiable functions, gradient methods are ill-defined. For locally Lipschitz problems and especially for convex minimization problems, bundle methods of descent are well-defined. Non-descent methods, like subgradient projection methods, may also be used.[1] These methods are typically slower than gradient descent. Another alternative for non-differentiable functions is to \"smooth\" the function, or bound the function by a smooth function. In this approach, the smooth problem is solved in the hope that the answer is close to the answer for the non-smooth problem (occasionally, this can be made rigorous).\nGradient descent can be used to solve a system of linear equations, reformulated as a quadratic minimization problem, e.g., using linear least squares. The solution of\nin the sense of linear least squares is defined as minimizing the function\nIn traditional linear least squares for real \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\n\nb\n\n\n\n{\\displaystyle \\mathbf {b} }\n\n the Euclidean norm is used, in which case\nIn this case, the line search minimization, finding the locally optimal step size \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n on every iteration, can be performed analytically, and explicit formulas for the locally optimal \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n are known.[2]\nFor solving linear equations, gradient descent is rarely used, with the conjugate gradient method being one of the most popular alternatives. The speed of convergence of gradient descent depends on the ratio of the maximum to minimum eigenvalues of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n, while the speed of convergence of conjugate gradients has a more complex dependence on the eigenvalues, and can benefit from preconditioning. Gradient descent also benefits from preconditioning, but this is not done as commonly.\nGradient descent can also be used to solve a system of nonlinear equations. Below is an example that shows how to use the gradient descent to solve for three unknown variables, x1, x2, and x3. This example shows one iteration of the gradient descent.\nConsider a nonlinear system of equations:\nsuppose we have the function\nwhere\nand the objective function\nWith initial guess\nWe know that\nwhere\nThe Jacobian matrix \n\n\n\n\nJ\n\nG\n\n\n(\n\n\nx\n\n\n(\n0\n)\n\n\n)\n\n\n{\\displaystyle J_{G}(\\mathbf {x} ^{(0)})}\n\n\nThen evaluating these terms at \n\n\n\n\n\nx\n\n\n(\n0\n)\n\n\n\n\n{\\displaystyle \\mathbf {x} ^{(0)}}\n\n\nSo that\nand\nNow a suitable \n\n\n\n\n\u03b3\n\n0\n\n\n\n\n{\\displaystyle \\gamma _{0}}\n\n must be found such that \n\n\n\nF\n(\n\n\nx\n\n\n(\n1\n)\n\n\n)\n\u2264\nF\n(\n\n\nx\n\n\n(\n0\n)\n\n\n)\n\n\n{\\displaystyle F(\\mathbf {x} ^{(1)})\\leq F(\\mathbf {x} ^{(0)})}\n\n. This can be done with any of a variety of line search algorithms. One might also simply guess \n\n\n\n\n\u03b3\n\n0\n\n\n=\n0.001\n\n\n{\\displaystyle \\gamma _{0}=0.001}\n\n which gives\nEvaluating at this value,\nThe decrease from \n\n\n\nF\n(\n\n\nx\n\n\n(\n0\n)\n\n\n)\n=\n58.456\n\n\n{\\displaystyle F(\\mathbf {x} ^{(0)})=58.456}\n\n to the next step's value of \n\n\n\nF\n(\n\n\nx\n\n\n(\n1\n)\n\n\n)\n=\n23.306\n\n\n{\\displaystyle F(\\mathbf {x} ^{(1)})=23.306}\n\n is a sizable decrease in the objective function. Further steps would reduce its value until a solution to the system was found.\nGradient descent works in spaces of any number of dimensions, even in infinite-dimensional ones. In the latter case the search space is typically a function space, and one calculates the G\u00e2teaux derivative of the functional to be minimized to determine the descent direction.[3]\nThe gradient descent can take many iterations to compute a local minimum with a required accuracy, if the curvature in different directions is very different for the given function. For such functions, preconditioning, which changes the geometry of the space to shape the function level sets like concentric circles, cures the slow convergence. Constructing and applying preconditioning can be computationally expensive, however.\nThe gradient descent can be combined with a line search, finding the locally optimal step size \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n on every iteration. Performing the line search can be time-consuming. Conversely, using a fixed small \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n can yield poor convergence.\nMethods based on Newton's method and inversion of the Hessian using conjugate gradient techniques can be better alternatives.[4][5] Generally, such methods converge in fewer iterations, but the cost of each iteration is higher. An example is the BFGS method which consists in calculating on every step a matrix by which the gradient vector is multiplied to go into a \"better\" direction, combined with a more sophisticated line search algorithm, to find the \"best\" value of \n\n\n\n\u03b3\n.\n\n\n{\\displaystyle \\gamma .}\n\n For extremely large problems, where the computer memory issues dominate, a limited-memory method such as L-BFGS should be used instead of BFGS or the steepest descent.\nGradient descent can be viewed as Euler's method for solving ordinary differential equations \n\n\n\n\nx\n\u2032\n\n(\nt\n)\n=\n\u2212\n\u2207\nf\n(\nx\n(\nt\n)\n)\n\n\n{\\displaystyle x'(t)=-\\nabla f(x(t))}\n\n of a gradient flow.\nThe gradient descent algorithm is applied to find a local minimum of the function f(x)=x4\u22123x3+2, with derivative f'(x)=4x3\u22129x2. Here is an implementation in the Python programming language.\nThe above piece of code has to be modified with regard to step size according to the system at hand and convergence can be made faster by using an adaptive step size. In the above case the step size is not adaptive. It stays at 0.01 in all the directions which can sometimes cause the method to fail by diverging from the minimum.\nThe following MATLAB code demonstrates a concrete solution for solving the non-linear system of equations presented in the previous section:\nThe following R code is an example of implementing gradient descent algorithm to find the minimum of the function f(x)=x4\u22123x3+2 in previous section. Note that we are looking for f(x)'s minimum by solving its derivative being equal to zero.\nAnd the x can be updated with gradient descent method every iteration in the form of\nwhere k = 1, 2, ..., maximum iteration, and \u03b1 is the step size.\nGradient descent can be extended to handle constraints by including a projection onto the set of constraints. This method is only feasible when the projection is efficiently computable on a computer. Under suitable assumptions, this method converges. This method is a specific case of the forward-backward algorithm for monotone inclusions (which includes convex programming and variational inequalities).[6]\nAnother extension of gradient descent is due to Yurii Nesterov from 1983,[7] and has been subsequently generalized. He provides a simple modification of the algorithm that enables faster convergence for convex problems. For unconstrained smooth problems the method is called the Fast Gradient Method (FGM) or the Accelerated Gradient Method (AGM). Specifically, if the differentiable function \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is convex and \n\n\n\n\u2207\nF\n\n\n{\\displaystyle \\nabla F}\n\n is Lipschitz, and it is not assumed that \n\n\n\nF\n\n\n{\\displaystyle F}\n\n is strongly convex, then the error in the objective value generated at each step \n\n\n\nk\n\n\n{\\displaystyle k}\n\n by the gradient descent method will be bounded by \n\n\n\n\n\nO\n\n\n(\n1\n\n/\n\nk\n)\n\n\n{\\displaystyle {\\mathcal {O}}(1/k)}\n\n. Using the Nesterov acceleration technique, the error decreases at \n\n\n\n\n\nO\n\n\n(\n1\n\n/\n\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {O}}(1/k^{2})}\n\n.[8] It is known that the rate \n\n\n\n\n\nO\n\n\n(\n1\n\n/\n\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {O}}(1/k^{2})}\n\n for the decrease of the cost function is optimal for first-order optimization methods. Nevertheless there is the opportunity to improve the algorithm by reducing the constant factor. The optimized gradient method (OGM) [9] reduces that constant by a factor of two and is an optimal first-order method for large-scale problems. [10]\nFor constrained or non-smooth problems Nesterov's FGM is called the fast proximal gradient method (FPGM), an acceleration of the Proximal gradient method.\nYet another extension, that reduces the risk of getting stuck in a local minimum, as well as speeds up the convergence considerably in cases where the process would otherwise zig-zag heavily, is the momentum method, which uses a momentum term in analogy to \"the mass of Newtonian particles that move through a viscous medium in a conservative force field\".[11] This method is often used as an extension to the backpropagation algorithms used to train artificial neural networks.[12][13]", 
    "dbpedia_url": "http://dbpedia.org/resource/Gradient_descent", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Gradient_descent\n"
}