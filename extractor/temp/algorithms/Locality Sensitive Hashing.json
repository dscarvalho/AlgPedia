{
    "about": "Locality-sensitive hashing (LSH) reduces the dimensionality of high-dimensional data. LSH hashes input items so that similar items map to the same \u201cbuckets\u201d with high probability (the number of buckets being much smaller than the universe of possible input items). LSH differs from conventional and cryptographic hash functions because it aims to maximize the probability of a \u201ccollision\u201d for similar items.[1] Locality-sensitive hashing has much in common with data clustering and nearest neighbor search.", 
    "classification": "Search Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Locality-sensitive_hashing\n", 
    "full_text": "Locality-sensitive hashing (LSH) reduces the dimensionality of high-dimensional data. LSH hashes input items so that similar items map to the same \u201cbuckets\u201d with high probability (the number of buckets being much smaller than the universe of possible input items). LSH differs from conventional and cryptographic hash functions because it aims to maximize the probability of a \u201ccollision\u201d for similar items.[1] Locality-sensitive hashing has much in common with data clustering and nearest neighbor search.\nHashing-based approximate nearest neighbor search algorithms generally use one of two main categories of hashing methods: either data-independent methods, such as locality-sensitive hashing (LSH); or data-dependent methods, such as Locality-preserving hashing (LPH).[2][3]\n\n\nAn LSH family[1][4][5] \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n is defined for a metric space \n\n\n\n\n\nM\n\n\n=\n(\nM\n,\nd\n)\n\n\n{\\displaystyle {\\mathcal {M}}=(M,d)}\n\n, a threshold \n\n\n\nR\n>\n0\n\n\n{\\displaystyle R>0}\n\n and an approximation factor \n\n\n\nc\n>\n1\n\n\n{\\displaystyle c>1}\n\n. This family \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n is a family of functions \n\n\n\nh\n:\n\n\nM\n\n\n\u2192\nS\n\n\n{\\displaystyle h:{\\mathcal {M}}\\to S}\n\n which map elements from the metric space to a bucket \n\n\n\ns\n\u2208\nS\n\n\n{\\displaystyle s\\in S}\n\n. The LSH family satisfies the following conditions for any two points \n\n\n\np\n,\nq\n\u2208\n\n\nM\n\n\n\n\n{\\displaystyle p,q\\in {\\mathcal {M}}}\n\n, using a function \n\n\n\nh\n\u2208\n\n\nF\n\n\n\n\n{\\displaystyle h\\in {\\mathcal {F}}}\n\n which is chosen uniformly at random:\nA family is interesting when \n\n\n\n\nP\n\n1\n\n\n>\n\nP\n\n2\n\n\n\n\n{\\displaystyle P_{1}>P_{2}}\n\n. Such a family \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n is called \n\n\n\n(\nR\n,\nc\nR\n,\n\nP\n\n1\n\n\n,\n\nP\n\n2\n\n\n)\n\n\n{\\displaystyle (R,cR,P_{1},P_{2})}\n\n-sensitive.\nAlternatively[6] it is defined with respect to a universe of items U that have a similarity function \n\n\n\n\u03d5\n:\nU\n\u00d7\nU\n\u2192\n[\n0\n,\n1\n]\n\n\n{\\displaystyle \\phi :U\\times U\\to [0,1]}\n\n. An LSH scheme is a family of hash functions H coupled with a probability distribution D over the functions such that a function \n\n\n\nh\n\u2208\nH\n\n\n{\\displaystyle h\\in H}\n\n chosen according to D satisfies the property that \n\n\n\nP\n\nr\n\nh\n\u2208\nH\n\n\n[\nh\n(\na\n)\n=\nh\n(\nb\n)\n]\n=\n\u03d5\n(\na\n,\nb\n)\n\n\n{\\displaystyle Pr_{h\\in H}[h(a)=h(b)]=\\phi (a,b)}\n\n for any \n\n\n\na\n,\nb\n\u2208\nU\n\n\n{\\displaystyle a,b\\in U}\n\n.\nGiven a \n\n\n\n(\n\nd\n\n1\n\n\n,\n\nd\n\n2\n\n\n,\n\np\n\n1\n\n\n,\n\np\n\n2\n\n\n)\n\n\n{\\displaystyle (d_{1},d_{2},p_{1},p_{2})}\n\n-sensitive family \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n, we can construct new families \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n by either the AND-construction or OR-construction of \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n.[1]\nTo create an AND-construction, we define a new family \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n of hash functions g, where each function g is constructed from k random functions \n\n\n\n\nh\n\n1\n\n\n,\n.\n.\n.\n,\n\nh\n\nk\n\n\n\n\n{\\displaystyle h_{1},...,h_{k}}\n\n from \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n. We then say that for a hash function \n\n\n\ng\n\u2208\n\n\nG\n\n\n\n\n{\\displaystyle g\\in {\\mathcal {G}}}\n\n, \n\n\n\ng\n(\nx\n)\n=\ng\n(\ny\n)\n\n\n{\\displaystyle g(x)=g(y)}\n\n if and only if all \n\n\n\n\nh\n\ni\n\n\n(\nx\n)\n=\n\nh\n\ni\n\n\n(\ny\n)\n\n\n{\\displaystyle h_{i}(x)=h_{i}(y)}\n\n for \n\n\n\ni\n=\n1\n,\n2\n,\n.\n.\n.\n,\nk\n\n\n{\\displaystyle i=1,2,...,k}\n\n. Since the members of \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n are independently chosen for any \n\n\n\ng\n\u2208\n\n\nG\n\n\n\n\n{\\displaystyle g\\in {\\mathcal {G}}}\n\n, \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n is a \n\n\n\n(\n\nd\n\n1\n\n\n,\n\nd\n\n2\n\n\n,\n\np\n\n1\n\n\nk\n\n\n,\n\np\n\n2\n\n\nk\n\n\n)\n\n\n{\\displaystyle (d_{1},d_{2},p_{1}^{k},p_{2}^{k})}\n\n-sensitive family.\nTo create an OR-construction, we define a new family \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n of hash functions g, where each function g is constructed from k random functions \n\n\n\n\nh\n\n1\n\n\n,\n.\n.\n.\n,\n\nh\n\nk\n\n\n\n\n{\\displaystyle h_{1},...,h_{k}}\n\n from \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n. We then say that for a hash function \n\n\n\ng\n\u2208\n\n\nG\n\n\n\n\n{\\displaystyle g\\in {\\mathcal {G}}}\n\n, \n\n\n\ng\n(\nx\n)\n=\ng\n(\ny\n)\n\n\n{\\displaystyle g(x)=g(y)}\n\n if and only if \n\n\n\n\nh\n\ni\n\n\n(\nx\n)\n=\n\nh\n\ni\n\n\n(\ny\n)\n\n\n{\\displaystyle h_{i}(x)=h_{i}(y)}\n\n for one or more values of i. Since the members of \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n are independently chosen for any \n\n\n\ng\n\u2208\n\n\nG\n\n\n\n\n{\\displaystyle g\\in {\\mathcal {G}}}\n\n, \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n is a \n\n\n\n(\n\nd\n\n1\n\n\n,\n\nd\n\n2\n\n\n,\n1\n\u2212\n(\n1\n\u2212\n\np\n\n1\n\n\n\n)\n\nk\n\n\n,\n1\n\u2212\n(\n1\n\u2212\n\np\n\n2\n\n\n\n)\n\nk\n\n\n)\n\n\n{\\displaystyle (d_{1},d_{2},1-(1-p_{1})^{k},1-(1-p_{2})^{k})}\n\n-sensitive family.\nLSH has been applied to several problem domains including[citation needed]\nOne of the easiest ways to construct an LSH family is by bit sampling.[5] This approach works for the Hamming distance over d-dimensional vectors \n\n\n\n{\n0\n,\n1\n\n}\n\nd\n\n\n\n\n{\\displaystyle \\{0,1\\}^{d}}\n\n. Here, the family \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n of hash functions is simply the family of all the projections of points on one of the \n\n\n\nd\n\n\n{\\displaystyle d}\n\n coordinates, i.e., \n\n\n\n\n\nF\n\n\n=\n{\nh\n:\n{\n0\n,\n1\n\n}\n\nd\n\n\n\u2192\n{\n0\n,\n1\n}\n\u2223\nh\n(\nx\n)\n=\n\nx\n\ni\n\n\n\n\u00a0for some\u00a0\n\ni\n\u2208\n{\n1\n,\n.\n.\n.\n,\nd\n}\n}\n\n\n{\\displaystyle {\\mathcal {F}}=\\{h:\\{0,1\\}^{d}\\to \\{0,1\\}\\mid h(x)=x_{i}{\\text{ for some }}i\\in \\{1,...,d\\}\\}}\n\n, where \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n is the \n\n\n\ni\n\n\n{\\displaystyle i}\n\nth coordinate of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. A random function \n\n\n\nh\n\n\n{\\displaystyle h}\n\n from \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n simply selects a random bit from the input point. This family has the following parameters: \n\n\n\n\nP\n\n1\n\n\n=\n1\n\u2212\nR\n\n/\n\nd\n\n\n{\\displaystyle P_{1}=1-R/d}\n\n, \n\n\n\n\nP\n\n2\n\n\n=\n1\n\u2212\nc\nR\n\n/\n\nd\n\n\n{\\displaystyle P_{2}=1-cR/d}\n\n.\nSuppose U is composed of subsets of some ground set of enumerable items S and the similarity function of interest is the Jaccard index J. If \u03c0 is a permutation on the indices of S, for \n\n\n\nA\n\u2286\nS\n\n\n{\\displaystyle A\\subseteq S}\n\n let \n\n\n\nh\n(\nA\n)\n=\n\nmin\n\na\n\u2208\nA\n\n\n{\n\u03c0\n(\na\n)\n}\n\n\n{\\displaystyle h(A)=\\min _{a\\in A}\\{\\pi (a)\\}}\n\n. Each possible choice of \u03c0 defines a single hash function h mapping input sets to elements of S.\nDefine the function family H to be the set of all such functions and let D be the uniform distribution. Given two sets \n\n\n\nA\n,\nB\n\u2286\nS\n\n\n{\\displaystyle A,B\\subseteq S}\n\n the event that \n\n\n\nh\n(\nA\n)\n=\nh\n(\nB\n)\n\n\n{\\displaystyle h(A)=h(B)}\n\n corresponds exactly to the event that the minimizer of \u03c0 over \n\n\n\nA\n\u222a\nB\n\n\n{\\displaystyle A\\cup B}\n\n lies inside \n\n\n\nA\n\u2229\nB\n\n\n{\\displaystyle A\\cap B}\n\n. As h was chosen uniformly at random, \n\n\n\nP\nr\n[\nh\n(\nA\n)\n=\nh\n(\nB\n)\n]\n=\nJ\n(\nA\n,\nB\n)\n\n\n\n{\\displaystyle Pr[h(A)=h(B)]=J(A,B)\\,}\n\n and \n\n\n\n(\nH\n,\nD\n)\n\n\n\n{\\displaystyle (H,D)\\,}\n\n define an LSH scheme for the Jaccard index.\nBecause the symmetric group on n elements has size n!, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized n. Because of this fact, there has been significant work on finding a family of permutations that is \"min-wise independent\" - a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen \u03c0. It has been established that a min-wise independent family of permutations is at least of size \n\n\n\nlcm\n\u2061\n(\n1\n,\n2\n,\n\u22ef\n,\nn\n)\n\u2265\n\ne\n\nn\n\u2212\no\n(\nn\n)\n\n\n\n\n{\\displaystyle \\operatorname {lcm} (1,2,\\cdots ,n)\\geq e^{n-o(n)}}\n\n.[12] and that this bound is tight.[13]\nBecause min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families. Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most k.[14] Approximate min-wise independence differs from the property by at most a fixed \u03b5.[15]\nNilsimsa is an anti-spam focused locality-sensitive hashing algorithm.[16] The goal of Nilsimsa is to generate a hash digest of an email message such that the digests of two similar messages are similar to each other. The paper suggests that the Nilsimsa satisfies three requirements:\nTLSH is locality-sensitive hashing algorithm designed for a range of security and digital forensic applications.[17] The goal of TLSH is to generate a hash digest of document such that if two digests have a low distance between them, then it is likely that the messages are similar to each other.\nTesting performed in the paper demonstrates that on a range of file types identified the Nilsimsa hash as having a significantly higher false positive rate when compared to other similarity digest schemes such as TLSH, Ssdeep and Sdhash.\nAn implementation of TLSH is available as open-source software.[18]\nThe random projection method of LSH due to Moses Charikar[6] called SimHash (also sometimes called arccos[19]) is designed to approximate the cosine distance between vectors. The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector r) at the outset and use the hyperplane to hash input vectors.\nGiven an input vector v and a hyperplane defined by r, we let \n\n\n\nh\n(\nv\n)\n=\ns\ng\nn\n(\nv\n\u22c5\nr\n)\n\n\n{\\displaystyle h(v)=sgn(v\\cdot r)}\n\n. That is, \n\n\n\nh\n(\nv\n)\n=\n\u00b1\n1\n\n\n{\\displaystyle h(v)=\\pm 1}\n\n depending on which side of the hyperplane v lies.\nEach possible choice of r defines a single function. Let H be the set of all such functions and let D be the uniform distribution once again. It is not difficult to prove that, for two vectors \n\n\n\nu\n,\nv\n\n\n{\\displaystyle u,v}\n\n, \n\n\n\nP\nr\n[\nh\n(\nu\n)\n=\nh\n(\nv\n)\n]\n=\n1\n\u2212\n\n\n\n\u03b8\n(\nu\n,\nv\n)\n\n\u03c0\n\n\n\n\n{\\displaystyle Pr[h(u)=h(v)]=1-{\\frac {\\theta (u,v)}{\\pi }}}\n\n, where \n\n\n\n\u03b8\n(\nu\n,\nv\n)\n\n\n{\\displaystyle \\theta (u,v)}\n\n is the angle between u and v. \n\n\n\n1\n\u2212\n\n\n\n\u03b8\n(\nu\n,\nv\n)\n\n\u03c0\n\n\n\n\n{\\displaystyle 1-{\\frac {\\theta (u,v)}{\\pi }}}\n\n is closely related to \n\n\n\ncos\n\u2061\n(\n\u03b8\n(\nu\n,\nv\n)\n)\n\n\n{\\displaystyle \\cos(\\theta (u,v))}\n\n.\nIn this instance hashing produces only a single bit. Two vectors' bits match with probability proportional to the cosine of the angle between them.\nThe hash function [20] \n\n\n\n\nh\n\n\na\n\n,\nb\n\n\n(\n\n\u03c5\n\n)\n:\n\n\n\nR\n\n\n\nd\n\n\n\u2192\n\n\nN\n\n\n\n\n{\\displaystyle h_{\\mathbf {a} ,b}({\\boldsymbol {\\upsilon }}):{\\mathcal {R}}^{d}\\to {\\mathcal {N}}}\n\n maps a d dimensional vector \n\n\n\n\n\u03c5\n\n\n\n{\\displaystyle {\\boldsymbol {\\upsilon }}}\n\n onto a set of integers. Each hash function in the family is indexed by a choice of random \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n and \n\n\n\nb\n\n\n{\\displaystyle b}\n\n where \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n is a d dimensional vector with entries chosen independently from a stable distribution and \n\n\n\nb\n\n\n{\\displaystyle b}\n\n is a real number chosen uniformly from the range [0,r]. For a fixed \n\n\n\n\na\n\n,\nb\n\n\n{\\displaystyle \\mathbf {a} ,b}\n\n the hash function \n\n\n\n\nh\n\n\na\n\n,\nb\n\n\n\n\n{\\displaystyle h_{\\mathbf {a} ,b}}\n\n is given by \n\n\n\n\nh\n\n\na\n\n,\nb\n\n\n(\n\n\u03c5\n\n)\n=\n\n\u230a\n\n\n\n\na\n\n\u22c5\n\n\u03c5\n\n+\nb\n\nr\n\n\n\u230b\n\n\n\n{\\displaystyle h_{\\mathbf {a} ,b}({\\boldsymbol {\\upsilon }})=\\left\\lfloor {\\frac {\\mathbf {a} \\cdot {\\boldsymbol {\\upsilon }}+b}{r}}\\right\\rfloor }\n\n.\nOther construction methods for hash functions have been proposed to better fit the data. [21] In particular k-means hash functions are better in practice than projection-based hash functions, but without any theoretical guarantee.\nOne of the main applications of LSH is to provide a method for efficient approximate nearest neighbor search algorithms. Consider an LSH family \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n. The algorithm has two main parameters: the width parameter k and the number of hash tables L.\nIn the first step, we define a new family \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n of hash functions g, where each function g is obtained by concatenating k functions \n\n\n\n\nh\n\n1\n\n\n,\n.\n.\n.\n,\n\nh\n\nk\n\n\n\n\n{\\displaystyle h_{1},...,h_{k}}\n\n from \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n, i.e., \n\n\n\ng\n(\np\n)\n=\n[\n\nh\n\n1\n\n\n(\np\n)\n,\n.\n.\n.\n,\n\nh\n\nk\n\n\n(\np\n)\n]\n\n\n{\\displaystyle g(p)=[h_{1}(p),...,h_{k}(p)]}\n\n. In other words, a random hash function g is obtained by concatenating k randomly chosen hash functions from \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n. The algorithm then constructs L hash tables, each corresponding to a different randomly chosen hash function g.\nIn the preprocessing step we hash all n points from the data set S into each of the L hash tables. Given that the resulting hash tables have only n non-zero entries, one can reduce the amount of memory used per each hash table to \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n using standard hash functions.\nGiven a query point q, the algorithm iterates over the L hash functions g. For each g considered, it retrieves the data points that are hashed into the same bucket as q. The process is stopped as soon as a point within distance \n\n\n\nc\nR\n\n\n{\\displaystyle cR}\n\n from q is found.\nGiven the parameters k and L, the algorithm has the following performance guarantees:\nFor a fixed approximation ratio \n\n\n\nc\n=\n1\n+\n\u03f5\n\n\n{\\displaystyle c=1+\\epsilon }\n\n and probabilities \n\n\n\n\nP\n\n1\n\n\n\n\n{\\displaystyle P_{1}}\n\n and \n\n\n\n\nP\n\n2\n\n\n\n\n{\\displaystyle P_{2}}\n\n, one can set \n\n\n\nk\n=\n\n\n\nlog\n\u2061\nn\n\n\nlog\n\u2061\n1\n\n/\n\n\nP\n\n2\n\n\n\n\n\n\n\n{\\displaystyle k={\\log n \\over \\log 1/P_{2}}}\n\n and \n\n\n\nL\n=\n\nn\n\n\u03c1\n\n\n\n\n{\\displaystyle L=n^{\\rho }}\n\n, where \n\n\n\n\u03c1\n=\n\n\n\nlog\n\u2061\n\nP\n\n1\n\n\n\n\nlog\n\u2061\n\nP\n\n2\n\n\n\n\n\n\n\n{\\displaystyle \\rho ={\\log P_{1} \\over \\log P_{2}}}\n\n. Then one obtains the following performance guarantees:", 
    "name": "Locality Sensitive Hashing"
}