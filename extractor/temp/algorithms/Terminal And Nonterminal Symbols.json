{
    "about": "In computer science, terminal and nonterminal symbols are the lexical elements used in specifying the production rules constituting a formal grammar. Terminal symbols are the elementary symbols of the language defined by a formal grammar. Nonterminal symbols (or syntactic variables) are replaced by groups of terminal symbols according to the production rules.", 
    "name": "Terminal And Nonterminal Symbols", 
    "classification": "Pattern Matching", 
    "full_text": "In computer science, terminal and nonterminal symbols are the lexical elements used in specifying the production rules constituting a formal grammar. Terminal symbols are the elementary symbols of the language defined by a formal grammar. Nonterminal symbols (or syntactic variables) are replaced by groups of terminal symbols according to the production rules.\nThe terminals and nonterminals of a particular grammar are two disjoint sets.\n\n\nTerminal symbols are literal symbols which may appear in the outputs of the production rules of a formal grammar and which cannot be changed using the rules of the grammar. Applying the rules recursively to a source string of symbols will usually terminate in a final output string consisting only of terminal symbols.\nConsider a grammar defined by two rules. Using pictoric marks interacting each other:\nHere \u0434 is a terminal symbol because no rule exists which would change it into something else. On the other hand, \u05e8 has two rules that can change it, thus it is nonterminal. A formal language defined or generated by a particular grammar is the set of strings that can be produced by the grammar and that consist only of terminal symbols.\nNonterminal symbols are those symbols which can be replaced. They may also be called simply syntactic variables. A formal grammar includes a start symbol, a designated member of the set of nonterminals from which all the strings in the language may be derived by successive applications of the production rules. In fact, the language defined by a grammar is precisely the set of terminal strings that can be so derived.\nContext-free grammars are those grammars in which the left-hand side of each production rule consists of only a single nonterminal symbol. This restriction is non-trivial; not all languages can be generated by context-free grammars. Those that can are called context-free languages. These are exactly the languages that can be recognized by a non-deterministic push down automaton. Context-free languages are the theoretical basis for the syntax of most programming languages.\nA grammar is defined by production rules (or just 'productions') that specify which symbols may replace which other symbols; these rules may be used to generate strings, or to parse them. Each such rule has a head, or left-hand side, which consists of the string that may be replaced, and a body, or right-hand side, which consists of a string that may replace it. Rules are often written in the form head \u2192 body; e.g., the rule a \u2192 b specifies that a can be replaced by b.\nIn the classic formalization of generative grammars first proposed by Noam Chomsky in the 1950s,[1][2] a grammar G consists of the following components:\nA grammar is formally defined as the ordered quadruple \n\n\n\n<\nN\n,\n\u03a3\n,\nP\n,\nS\n>\n\n\n{\\displaystyle <N,\\Sigma ,P,S>}\n\n. Such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature.[3][4]\nFor instance, the following represents an integer (which may be signed) expressed in a variant of Backus\u2013Naur form:\nIn this example, the symbols (-,0,1,2,3,4,5,6,7,8,9) are terminal symbols and <digit> and <integer> are nonterminal symbols.\nNote: This example supports strings with leading zeroes like \"0056\" or \"0000\", as well as negative zero strings like \"-0\" and \"-00000\".", 
    "dbpedia_url": "http://dbpedia.org/resource/Terminal_and_nonterminal_symbols", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols\n"
}