{
    "about": "In computer science and graph theory, the method of color-coding[1][2] efficiently finds k-vertex simple paths, k-vertex cycles, and other small subgraphs within a given graph using probabilistic algorithms, which can then be derandomized and turned into deterministic algorithms. This method shows that many subcases of the subgraph isomorphism problem (an NP-complete problem) can in fact be solved in polynomial time.", 
    "classification": "Graph Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Color-coding\n", 
    "full_text": "In computer science and graph theory, the method of color-coding[1][2] efficiently finds k-vertex simple paths, k-vertex cycles, and other small subgraphs within a given graph using probabilistic algorithms, which can then be derandomized and turned into deterministic algorithms. This method shows that many subcases of the subgraph isomorphism problem (an NP-complete problem) can in fact be solved in polynomial time.\nThe theory and analysis of the color-coding method was proposed in 1994 by Noga Alon, Raphael Yuster, and Uri Zwick.\n\n\nThe following results can be obtained through the method of color-coding:\nTo solve the problem of finding a subgraph \n\n\n\nH\n=\n(\n\nV\n\nH\n\n\n,\n\nE\n\nH\n\n\n)\n\n\n{\\displaystyle H=(V_{H},E_{H})}\n\n in a given graph G = (V, E), where H can be a path, a cycle, or any bounded treewidth graph where \n\n\n\n\n|\n\n\nV\n\nH\n\n\n\n|\n\n=\nO\n(\nlog\n\u2061\nV\n)\n\n\n{\\displaystyle |V_{H}|=O(\\log V)}\n\n, the method of color-coding begins by randomly coloring each vertex of G with \n\n\n\nk\n=\n\n|\n\n\nV\n\nH\n\n\n\n|\n\n\n\n{\\displaystyle k=|V_{H}|}\n\n colors, and then tries to find a colorful copy of H in colored G. Here, a graph is colorful if every vertex in it is colored with a distinct color. This method works by repeating (1) random coloring a graph and (2) finding colorful copy of the target subgraph, and eventually the target subgraph can be found if the process is repeated a sufficient number of times.\nSuppose H becomes colorful with some non-zero probability p. It immediately follows that if the random coloring is repeated 1/p times, then H is expected to become colorful once. Note that though p is small, it is shown that if \n\n\n\n\n|\n\n\nV\n\nH\n\n\n\n|\n\n=\nO\n(\nlog\n\u2061\nV\n)\n\n\n{\\displaystyle |V_{H}|=O(\\log V)}\n\n, p is only polynomially small. Suppose again there exists an algorithm such that, given a graph G and a coloring which maps each vertex of G to one of the k colors, it finds a copy of colorful H, if one exists, within some runtime O(r). Then the expected time to find a copy of H in G, if one exists, is \n\n\n\nO\n(\n\n\n\nr\np\n\n\n\n)\n\n\n{\\displaystyle O({\\tfrac {r}{p}})}\n\n.\nSometimes it is also desirable to use a more restricted version of colorfulness. For example, in the context of finding cycles in planar graphs, it is possible to develop an algorithm that finds well-colored cycles. Here, a cycle is well-colored if its vertices are colored by consecutive colors.\nAn example would be finding a simple cycle of length k in graph G = (V, E).\nBy applying random coloring method, each simple cycle has a probability of \n\n\n\nk\n!\n\n/\n\n\nk\n\nk\n\n\n>\n\ne\n\n\u2212\nk\n\n\n\n\n{\\displaystyle k!/k^{k}>e^{-k}}\n\n to become colorful, since there are \n\n\n\n\nk\n\nk\n\n\n\n\n{\\displaystyle k^{k}}\n\n ways of coloring the k vertices on the path, among which there are \n\n\n\nk\n!\n\n\n{\\displaystyle k!}\n\n colorful occurrences. Then an algorithm (described below) of runtime \n\n\n\nO\n(\n\nV\n\n\u03c9\n\n\n)\n\n\n{\\displaystyle O(V^{\\omega })}\n\n can be adopted to find colorful cycles in the randomly colored graph G. Therefore, it takes \n\n\n\n\ne\n\nk\n\n\n\u22c5\nO\n(\n\nV\n\n\u03c9\n\n\n)\n\n\n{\\displaystyle e^{k}\\cdot O(V^{\\omega })}\n\n overall time to find a simple cycle of length k in G.\nThe colorful cycle-finding algorithm works by first finding all pairs of vertices in V that are connected by a simple path of length k \u2212 1, and then checking whether the two vertices in each pair are connected. Given a coloring function c\u00a0: V \u2192 {1, ..., k} to color graph G, enumerate all partitions of the color set {1, ..., k} into two subsets C1, C2 of size \n\n\n\nk\n\n/\n\n2\n\n\n{\\displaystyle k/2}\n\n each. Note that V can be divided into V1 and V2 accordingly, and let G1 and G2 denote the subgraphs induced by V1 and V2 respectively. Then, recursively find colorful paths of length \n\n\n\nk\n\n/\n\n2\n\u2212\n1\n\n\n{\\displaystyle k/2-1}\n\n in each of G1 and G2. Suppose the boolean matrix A1 and A2 represent the connectivity of each pair of vertices in G1 and G2 by a colorful path, respectively, and let B be the matrix describing the adjacency relations between vertices of V1 and those of V2, the boolean product \n\n\n\n\nA\n\n1\n\n\nB\n\nA\n\n2\n\n\n\n\n{\\displaystyle A_{1}BA_{2}}\n\n gives all pairs of vertices in V that are connected by a colorful path of length k \u2212 1. Thus, the recursive relation of matrix multiplications is \n\n\n\nt\n(\nk\n)\n\u2264\n\n2\n\nk\n\n\n\u22c5\nt\n(\nk\n\n/\n\n2\n)\n\n\n{\\displaystyle t(k)\\leq 2^{k}\\cdot t(k/2)}\n\n, which yields a runtime of \n\n\n\n\n2\n\nO\n(\nk\n)\n\n\n\u22c5\n\nV\n\n\u03c9\n\n\n\u2208\nO\n(\n\nV\n\n\u03c9\n\n\n)\n\n\n{\\displaystyle 2^{O(k)}\\cdot V^{\\omega }\\in O(V^{\\omega })}\n\n. Although this algorithm finds only the end points of the colorful path, another algorithm by Alon and Naor[4] that finds colorful paths themselves can be incorporated into it.\nThe derandomization of color-coding involves enumerating possible colorings of a graph G, such that the randomness of coloring G is no longer required. For the target subgraph H in G to be discoverable, the enumeration has to include at least one instance where the H is colorful. To achieve this, enumerating a k-perfect family F of hash functions from {1, ..., |V|} to {1, ..., k} is sufficient. By definition, F is k-perfect if for every subset S of {1, ..., |V|} where \n\n\n\n\n|\n\nS\n\n|\n\n=\nk\n\n\n{\\displaystyle |S|=k}\n\n, there exists a hash function h in F such that h\u00a0: S \u2192 {1, ..., k} is perfect. In other words, there must exist a hash function in F that colors any given k vertices with k distinct colors.\nThere are several approaches to construct such a k-perfect hash family:\nIn the case of derandomizing well-coloring, where each vertex on the subgraph is colored consecutively, a k-perfect family of hash functions from {1, ..., |V|} to {1, ..., k!} is needed. A sufficient k-perfect family which maps from {1, ..., |V|} to {1, ..., kk} can be constructed in a way similar to the approach 3 above (the first step). In particular, it is done by using nklog k random bits that are almost klog k independent, and the size of the resulting k-perfect family will be \n\n\n\n\nk\n\nO\n(\nk\n)\n\n\nlog\n\u2061\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle k^{O(k)}\\log |V|}\n\n.\nThe derandomization of color-coding method can be easily parallelized, yielding efficient NC algorithms.\nRecently, color-coding has attracted much attention in the field of bioinformatics. One example is the detection of signaling pathways in protein-protein interaction (PPI) networks. Another example is to discover and to count the number of motifs in PPI networks. Studying both signaling pathways and motifs allows a deeper understanding of the similarities and differences of many biological functions, processes, and structures among organisms.\nDue to the huge amount of gene data that can be collected, searching for pathways or motifs can be highly time consuming. However, by exploiting the color-coding method, the motifs or signaling pathways with \n\n\n\nk\n=\nO\n(\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle k=O(\\log n)}\n\n vertices in a network G with n vertices can be found very efficiently in polynomial time. Thus, this enables us to explore more complex or larger structures in PPI networks.", 
    "name": "Color Coding"
}