{
    "about": "Iterative deepening A* (IDA*) is a graph traversal and path search algorithm that can find the shortest path between a designated start node and any member of a set of goal nodes in a weighted graph. It is a variant of iterative deepening depth-first search that borrows the idea to use a heuristic function to evaluate the remaining cost to get to the goal from the A* search algorithm. Since it is a depth-first search algorithm, its memory usage is lower than in A*, but unlike ordinary iterative deepening search, it concentrates on exploring the most promising nodes and thus does not go to the same depth everywhere in the search tree. Unlike A*, IDA* does not utilize dynamic programming and therefore often ends up exploring the same nodes many times.", 
    "name": "Iterative Deepening A*", 
    "classification": "Graph Algorithms", 
    "full_text": "Iterative deepening A* (IDA*) is a graph traversal and path search algorithm that can find the shortest path between a designated start node and any member of a set of goal nodes in a weighted graph. It is a variant of iterative deepening depth-first search that borrows the idea to use a heuristic function to evaluate the remaining cost to get to the goal from the A* search algorithm. Since it is a depth-first search algorithm, its memory usage is lower than in A*, but unlike ordinary iterative deepening search, it concentrates on exploring the most promising nodes and thus does not go to the same depth everywhere in the search tree. Unlike A*, IDA* does not utilize dynamic programming and therefore often ends up exploring the same nodes many times.\nWhile the standard iterative deepening depth-first search uses search depth as the cutoff for each iteration, the IDA* uses the more informative \n\n\n\nf\n(\nn\n)\n=\ng\n(\nn\n)\n+\nh\n(\nn\n)\n\n\n{\\displaystyle f(n)=g(n)+h(n)}\n\n, where \n\n\n\ng\n(\nn\n)\n\n\n{\\displaystyle g(n)}\n\n is the cost to travel from the root to node \n\n\n\nn\n\n\n{\\displaystyle n}\n\n and \n\n\n\nh\n(\nn\n)\n\n\n{\\displaystyle h(n)}\n\n is a problem-specific heuristic estimate of the cost to travel from \n\n\n\nn\n\n\n{\\displaystyle n}\n\n to the solution.\nThe algorithm was first described by Richard Korf in 1985.[1]\n\n\nIterative-deepening-A* works as follows: at each iteration, perform a depth-first search, cutting off a branch when its total cost \n\n\n\nf\n(\nn\n)\n=\ng\n(\nn\n)\n+\nh\n(\nn\n)\n\n\n{\\displaystyle f(n)=g(n)+h(n)}\n\n exceeds a given threshold. This threshold starts at the estimate of the cost at the initial state, and increases for each iteration of the algorithm. At each iteration, the threshold used for the next iteration is the minimum cost of all values that exceeded the current threshold.[2]\nAs in A*, the heuristic has to have particular properties to guarantee optimality (shortest paths). See Properties below.\nLike A*, IDA* is guaranteed to find the shortest path leading from the given start node to any goal node in the problem graph, if the heuristic function h is admissible,[3] that is\nfor all nodes n, where h* is the true cost of the shortest path from n to the nearest goal (the \"perfect heuristic\").[4]\nIDA* is beneficial when the problem is memory constrained. A* search keeps a large queue of unexplored nodes that can quickly fill up memory. By contrast, because IDA* does not remember any node except the ones on the current path, it requires an amount of memory that is only linear in the length of the solution that it constructs. Its time complexity is analyzed by Korf et al. under the assumption that the heuristic cost estimate h is consistent, meaning that\nfor all nodes n and all neighbors n' of n; they conclude that compared to a brute-force tree search over an exponential-sized problem, IDA* achieves a smaller search depth (by a constant factor), but not a smaller branching factor.[5]\nRecursive best-first search is another memory-constrained version of A* search that can be faster in practice than IDA*, since it requires less regenerating of nodes.[4]:282\u2013289\nApplications of IDA* are found in such problems as planning.[6]", 
    "dbpedia_url": "http://dbpedia.org/resource/Iterative_deepening_A*", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Iterative_deepening_A*\n"
}