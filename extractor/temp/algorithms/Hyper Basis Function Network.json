{
    "about": "In machine learning, a Hyper basis function network, or HyperBF network, is a generalization of radial basis function (RBF) networks concept, where the Mahalanobis-like distance is used instead of Euclidean distance measure. Hyper basis function networks were first introduced by Poggio and Girosi in the 1990 paper \u201cNetworks for Approximation and Learning\u201d.[1][2]", 
    "name": "Hyper Basis Function Network", 
    "classification": "Machine Learning Algorithms", 
    "full_text": "In machine learning, a Hyper basis function network, or HyperBF network, is a generalization of radial basis function (RBF) networks concept, where the Mahalanobis-like distance is used instead of Euclidean distance measure. Hyper basis function networks were first introduced by Poggio and Girosi in the 1990 paper \u201cNetworks for Approximation and Learning\u201d.[1][2]\nThe typical HyperBF network structure consists of a real input vector \n\n\n\nx\n\u2208\n\n\nR\n\n\nn\n\n\n\n\n{\\displaystyle x\\in \\mathbb {R} ^{n}}\n\n, a hidden layer of activation functions and a linear output layer. The output of the network is a scalar function of the input vector, \n\n\n\n\u03d5\n:\n\n\nR\n\n\nn\n\n\n\u2192\n\nR\n\n\n\n{\\displaystyle \\phi :\\mathbb {R} ^{n}\\to \\mathbb {R} }\n\n, is given by\nwhere \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is a number of neurons in the hidden layer, \n\n\n\n\n\u03bc\n\nj\n\n\n\n\n{\\displaystyle \\mu _{j}}\n\n and \n\n\n\n\na\n\nj\n\n\n\n\n{\\displaystyle a_{j}}\n\n are the center and weight of neuron \n\n\n\nj\n\n\n{\\displaystyle j}\n\n. The activation function \n\n\n\n\n\u03c1\n\nj\n\n\n(\n\n|\n\n\n|\n\nx\n\u2212\n\n\u03bc\n\nj\n\n\n\n|\n\n\n|\n\n)\n\n\n{\\displaystyle \\rho _{j}(||x-\\mu _{j}||)}\n\n at the HyperBF network takes the following form\nwhere \n\n\n\n\nR\n\nj\n\n\n\n\n{\\displaystyle R_{j}}\n\n is a positive definite \n\n\n\nd\n\u00d7\nd\n\n\n{\\displaystyle d\\times d}\n\n matrix. Depending on the application, the following types of matrices \n\n\n\n\nR\n\nj\n\n\n\n\n{\\displaystyle R_{j}}\n\n are usually considered[3]\nTraining HyperBF networks involves estimation of weights \n\n\n\n\na\n\nj\n\n\n\n\n{\\displaystyle a_{j}}\n\n, shape and centers of neurons \n\n\n\n\nR\n\nj\n\n\n\n\n{\\displaystyle R_{j}}\n\n and \n\n\n\n\n\u03bc\n\nj\n\n\n\n\n{\\displaystyle \\mu _{j}}\n\n. Poggio and Girosi (1990) describe the training method with moving centers and adaptable neuron shapes. The outline of the method is provided below.\nConsider the quadratic loss of the network \n\n\n\nH\n[\n\n\u03d5\n\n\u2217\n\n\n]\n=\n\n\u2211\n\ni\n=\n1\n\n\nN\n\n\n(\n\ny\n\ni\n\n\n\u2212\n\n\u03d5\n\n\u2217\n\n\n(\n\nx\n\ni\n\n\n)\n\n)\n\n2\n\n\n\n\n{\\displaystyle H[\\phi ^{*}]=\\sum _{i=1}^{N}(y_{i}-\\phi ^{*}(x_{i}))^{2}}\n\n. The following conditions must be satisfied at the optimum:\nwhere \n\n\n\n\nR\n\nj\n\n\n=\n\nW\n\nT\n\n\nW\n\n\n{\\displaystyle R_{j}=W^{T}W}\n\n. Then in the gradient descent method the values of \n\n\n\n\na\n\nj\n\n\n,\n\n\u03bc\n\nj\n\n\n,\nW\n\n\n{\\displaystyle a_{j},\\mu _{j},W}\n\n that minimize \n\n\n\nH\n[\n\n\u03d5\n\n\u2217\n\n\n]\n\n\n{\\displaystyle H[\\phi ^{*}]}\n\n can be found as a stable fixed point of the following dynamic system:\nwhere \n\n\n\n\u03c9\n\n\n{\\displaystyle \\omega }\n\n determines the rate of convergence.\nOverall, training HyperBF networks can be computationally challenging. Moreover, the high degree of freedom of HyperBF leads to overfitting and poor generalization. However, HyperBF networks have an important advantage that a small number of neurons is enough for learning complex functions.[2]", 
    "dbpedia_url": "http://dbpedia.org/resource/Hyper_basis_function_network", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Hyper_basis_function_network\n"
}