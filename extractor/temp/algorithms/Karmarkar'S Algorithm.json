{
    "about": "Karmarkar's algorithm is an algorithm introduced by Narendra Karmarkar in 1984 for solving linear programming problems. It was the first reasonably efficient algorithm that solves these problems in polynomial time. The ellipsoid method is also polynomial time but proved to be inefficient in practice.", 
    "name": "Karmarkar'S Algorithm", 
    "classification": "Optimization Algorithms And Methods", 
    "full_text": "Karmarkar's algorithm is an algorithm introduced by Narendra Karmarkar in 1984 for solving linear programming problems. It was the first reasonably efficient algorithm that solves these problems in polynomial time. The ellipsoid method is also polynomial time but proved to be inefficient in practice.\nDenoting \n\n\n\nn\n\n\n{\\displaystyle n}\n\n as the number of variables and \n\n\n\nL\n\n\n{\\displaystyle L}\n\n as the number of bits of input to the algorithm, Karmarkar's algorithm requires \n\n\n\nO\n(\n\nn\n\n3.5\n\n\nL\n)\n\n\n{\\displaystyle O(n^{3.5}L)}\n\n operations on \n\n\n\nO\n(\nL\n)\n\n\n{\\displaystyle O(L)}\n\n digit numbers, as compared to \n\n\n\nO\n(\n\nn\n\n6\n\n\nL\n)\n\n\n{\\displaystyle O(n^{6}L)}\n\n such operations for the ellipsoid algorithm. The runtime of Karmarkar's algorithm is thus\nusing FFT-based multiplication (see Big O notation).\nKarmarkar's algorithm falls within the class of interior point methods: the current guess for the solution does not follow the boundary of the feasible set as in the simplex method, but it moves through the interior of the feasible region, improving the approximation of the optimal solution by a definite fraction with every iteration, and converging to an optimal solution with rational data.[1]\n\n\nConsider a linear programming problem in matrix form:\nKarmarkar's algorithm determines the next feasible direction toward optimality and scales back by a factor 0 < \u03b3 \u2264 1. It is described in a number of sources.[2][3][4][5][6][7]\nSince the actual algorithm is rather complicated, researchers looked for a more intuitive version of it, and in 1985 developed affine scaling, a version of Karmarkar's algorithm that uses affine transformations where Karmarkar used projective ones, only to realize four years later that they had rediscovered an algorithm published by Soviet mathematician I. I. Dikin in 1967.[8] The affine-scaling method can be described succinctly as follows.[9] Note that the affine-scaling algorithm, while applicable to small scale problems, is not a polynomial time algorithm.[citation needed] Karmarkar also has extended the method[which?][10][11][12][13] to solve problems with integer constraints and non-convex problems.[14]\nConsider the linear program\nThat is, there are 2 variables \n\n\n\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n\n\n{\\displaystyle x_{1},x_{2}}\n\n and 11 constraints associated with varying values of \n\n\n\np\n\n\n{\\displaystyle p}\n\n. This figure shows each iteration of the algorithm as red circle points. The constraints are shown as blue lines.\nAt the time he invented the algorithm, Karmarkar was employed by IBM as a postdoctoral fellow in the IBM San Jose Research Laboratory in California. On August 11, 1983 he gave a seminar at Stanford University explaining the algorithm, with his affiliation still listed as IBM. By the fall of 1983 Karmarkar started to work at AT&T and submitted his paper to the 1984 ACM Symposium on Theory of Computing (STOC, held April 30 - May 2, 1984) stating AT&T Bell Laboratories as his affiliation.[15] After applying the algorithm to optimizing AT&T's telephone network,[16] they realized that his invention could be of practical importance. In April 1985, AT&T promptly applied for a patent on Karmarkar's algorithm.\nThe patent became more fuel for the ongoing controversy over the issue of software patents.[17] This left many mathematicians uneasy, such as Ronald Rivest (himself one of the holders of the patent on the RSA algorithm), who expressed the opinion that research proceeded on the basis that algorithms should be free. Even before the patent was actually granted, it was argued that there might have been prior art that was applicable.[18] Mathematicians who specialized in numerical analysis, including Philip Gill and others, claimed that Karmarkar's algorithm is equivalent to a projected Newton barrier method with a logarithmic barrier function, if the parameters are chosen suitably.[19] Legal scholar Andrew Chin opines that Gill's argument was flawed, insofar as the method they describe does not constitute an \"algorithm\", since it requires choices of parameters that don't follow from the internal logic of the method, but rely on external guidance, essentially from Karmarkar's algorithm.[20] Furthermore, Karmarkar's contributions are considered far from obvious in light of all prior work, including Fiacco-McCormick, Gill and others cited by Saltzman.[20][21][22] The patent was debated in the U.S. Senate and granted in recognition of the essential originality of Karmarkar's work, as U.S. Patent 4,744,028: \"Methods and apparatus for efficient resource allocation\" in May 1988.\nAT&T designed a vector multi-processor computer system specifically to run Karmarkar's algorithm, calling the resulting combination of hardware and software KORBX,[23] and marketed this system at a price of USD8.9 million.[24][25] Its first customer was the Pentagon.[26][27]\nOpponents of software patents have further argued that the patents ruined the positive interaction cycles that previously characterized the relationship between researchers in linear programming and industry, and specifically it isolated Karmarkar himself from the network of mathematical researchers in his field.[28]\nThe patent itself expired in April 2006, and the algorithm is presently in the public domain.\nThe United States Supreme Court has held that mathematics cannot be patented in Gottschalk v. Benson,[29] In that case, the Court first addressed whether computer algorithms could be patented and it held that they could not because the patent system does not protect ideas and similar abstractions. In Diamond v. Diehr,[30] the Supreme Court stated, \"A mathematical formula as such is not accorded the protection of our patent laws, and this principle cannot be circumvented by attempting to limit the use of the formula to a particular technological environment.[31] In Mayo Collaborative Services v. Prometheus Labs., Inc.,[32] the Supreme Court explained further that \"simply implementing a mathematical principle on a physical machine, namely a computer, [i]s not a patentable application of that principle.\"[33]", 
    "dbpedia_url": "http://dbpedia.org/resource/Karmarkar's_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Karmarkar's_algorithm\n"
}