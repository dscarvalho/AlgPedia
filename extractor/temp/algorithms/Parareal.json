{
    "about": "Parareal is a parallel algorithm from numerical analysis and used for the solution of initial value problems.[1] It has been introduced in 2001 by Lions, Maday and Turinici. Since then, it has become one of the most widely studied parallel-in-time integration methods.", 
    "name": "Parareal", 
    "classification": "Numerical Analysis", 
    "full_text": "Parareal is a parallel algorithm from numerical analysis and used for the solution of initial value problems.[1] It has been introduced in 2001 by Lions, Maday and Turinici. Since then, it has become one of the most widely studied parallel-in-time integration methods.\n\n\nIn contrast to e.g. Runge-Kutta or multi-step methods, some of the computations in Parareal can be performed in parallel and Parareal is therefore one example of a parallel-in-time integration method. While historically most efforts to parallelize the numerical solution of partial differential equations focussed on the spatial discretization, in view of the challenges from exascale computing, parallel methods for temporal discretization have been identified as a possible way to increase concurrency in numerical software.[2] Because Parareal computes the numerical solution for multiple time steps in parallel, it is categorized as a parallel across the steps method.[3] This is in contrast to approaches using parallelism across the method like parallel Runge-Kutta[4] or extrapolation methods,[5] where independent stages can be computed in parallel or parallel across the system methods like waveform relaxation.\nParareal can be derived as both a multigrid method in time method or as multiple shooting along the time axis.[6] Both ideas, multigrid in time as well as adopting multiple shooting for time integration, go back to the 1980s and 1990s.[7][8] Parareal is a widely studied method and has been used and modified for a range of different applications.[9] Ideas to parallelize the solution of initial value problems go back even further: the first paper proposing a parallel-in-time integration method appeared in 1964.[10]\nParareal solves an initial value problem of the form\n\n\n\n\n\n\n\ny\n\u02d9\n\n\n\n(\nt\n)\n=\nf\n(\ny\n(\nt\n)\n,\nt\n)\n,\n\ny\n(\n\nt\n\n0\n\n\n)\n=\n\ny\n\n0\n\n\n\n\nwith\n\n\n\nt\n\n0\n\n\n\u2264\nt\n\u2264\nT\n.\n\n\n{\\displaystyle {\\dot {y}}(t)=f(y(t),t),\\quad y(t_{0})=y_{0}\\quad {\\text{with}}\\quad t_{0}\\leq t\\leq T.}\n\n\nHere, the right hand side \n\n\n\nf\n\n\n{\\displaystyle f}\n\n can correspond to the spatial discretization of a partial differential equation in a method of lines approach.\nParareal now requires a decomposition of the time interval \n\n\n\n[\n\nt\n\n0\n\n\n,\nT\n]\n\n\n{\\displaystyle [t_{0},T]}\n\n into \n\n\n\nP\n\n\n{\\displaystyle P}\n\n so-called time slices \n\n\n\n[\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n]\n\n\n{\\displaystyle [t_{j},t_{j+1}]}\n\n such that\n\n\n\n\n[\n\nt\n\n0\n\n\n,\nT\n]\n=\n[\n\nt\n\n0\n\n\n,\n\nt\n\n1\n\n\n]\n\u222a\n[\n\nt\n\n1\n\n\n,\n\nt\n\n2\n\n\n]\n\u222a\n\u2026\n\u222a\n[\n\nt\n\nP\n\u2212\n1\n\n\n,\n\nt\n\nP\n\n\n]\n.\n\n\n{\\displaystyle [t_{0},T]=[t_{0},t_{1}]\\cup [t_{1},t_{2}]\\cup \\ldots \\cup [t_{P-1},t_{P}].}\n\n\nEach time slice is assigned to one processing unit when parallelizing the algorithm, so that \n\n\n\nP\n\n\n{\\displaystyle P}\n\n is equal to the number of processing units used for Parareal: in an MPI based code for example, this would be the number of processes, while in an OpenMP based code, \n\n\n\nP\n\n\n{\\displaystyle P}\n\n would be equal to the number of threads.\nParareal is based on the iterative application of two methods for integration of ordinary differential equations. One, commonly labelled \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n, should be of high accuracy and computational cost while the other, typically labelled \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n, must be computationally cheap but can be much less accurate. Typically, some form of Runge-Kutta method is chosen for both coarse and fine integrator, where \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n might be of lower order and use a larger time step than \n\n\n\n\n\nF\n\n\n\n\n{\\displaystyle {\\mathcal {F}}}\n\n. If the initial value problem stems from the discretization of a PDE, \n\n\n\n\n\nG\n\n\n\n\n{\\displaystyle {\\mathcal {G}}}\n\n can also use a coarser spatial discretization, but this can negatively impact convergence unless high order interpolation is used.[11] The result of numerical integration with one of these methods over a time slice \n\n\n\n[\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n]\n\n\n{\\displaystyle [t_{j},t_{j+1}]}\n\n for some starting value \n\n\n\n\ny\n\nj\n\n\n\n\n{\\displaystyle y_{j}}\n\n given at \n\n\n\n\nt\n\nj\n\n\n\n\n{\\displaystyle t_{j}}\n\n is then written as\n\n\n\n\ny\n=\n\n\nF\n\n\n(\n\ny\n\nj\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n\n\n{\\displaystyle y={\\mathcal {F}}(y_{j},t_{j},t_{j+1})}\n\n or \n\n\n\ny\n=\n\n\nG\n\n\n(\n\ny\n\nj\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n\n\n{\\displaystyle y={\\mathcal {G}}(y_{j},t_{j},t_{j+1})}\n\n.\nSerial time integration with the fine method would then correspond to a step-by-step computation of\n\n\n\n\n\ny\n\nj\n+\n1\n\n\n=\n\n\nF\n\n\n(\n\ny\n\nj\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n,\n\nj\n=\n0\n,\n\u2026\n,\nP\n\u2212\n1.\n\n\n{\\displaystyle y_{j+1}={\\mathcal {F}}(y_{j},t_{j},t_{j+1}),\\quad j=0,\\ldots ,P-1.}\n\n\nParareal instead uses the following iteration\n\n\n\n\n\ny\n\nj\n+\n1\n\n\nk\n+\n1\n\n\n=\n\n\nG\n\n\n(\n\ny\n\nj\n\n\nk\n+\n1\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n+\n\n\nF\n\n\n(\n\ny\n\nj\n\n\nk\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n\u2212\n\n\nG\n\n\n(\n\ny\n\nj\n\n\nk\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n,\n\nj\n=\n0\n,\n\u2026\n,\nP\n\u2212\n1\n,\n\nk\n=\n0\n,\n\u2026\n,\nK\n\u2212\n1\n,\n\n\n{\\displaystyle y_{j+1}^{k+1}={\\mathcal {G}}(y_{j}^{k+1},t_{j},t_{j+1})+{\\mathcal {F}}(y_{j}^{k},t_{j},t_{j+1})-{\\mathcal {G}}(y_{j}^{k},t_{j},t_{j+1}),\\quad j=0,\\ldots ,P-1,\\quad k=0,\\ldots ,K-1,}\n\n\nwhere \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is the iteration counter. As the iteration converges and \n\n\n\n\ny\n\nj\n\n\nk\n+\n1\n\n\n\u2212\n\ny\n\nj\n\n\nk\n\n\n\u2192\n0\n\n\n{\\displaystyle y_{j}^{k+1}-y_{j}^{k}\\to 0}\n\n, the terms from the coarse method cancel out and Parareal reproduces the solution that is obtained by the serial execution of the fine method only. It can be shown that Parareal converges after a maximum of \n\n\n\nP\n\n\n{\\displaystyle P}\n\n iterations.[6] For Parareal to provide speedup, however, it has to converge in a number of iterations significantly smaller than the number of time slices, that is \n\n\n\nK\n\u226a\nP\n\n\n{\\displaystyle K\\ll P}\n\n.\nIn the Parareal iteration, the computationally expensive evaluation of \n\n\n\n\n\nF\n\n\n(\n\ny\n\nj\n\n\nk\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n\n\n{\\displaystyle {\\mathcal {F}}(y_{j}^{k},t_{j},t_{j+1})}\n\n can be performed in parallel on \n\n\n\nP\n\n\n{\\displaystyle P}\n\n processing units. By contrast, the dependency of \n\n\n\n\ny\n\nj\n+\n1\n\n\nk\n+\n1\n\n\n\n\n{\\displaystyle y_{j+1}^{k+1}}\n\n on \n\n\n\n\n\nG\n\n\n(\n\ny\n\nj\n\n\nk\n+\n1\n\n\n,\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n)\n\n\n{\\displaystyle {\\mathcal {G}}(y_{j}^{k+1},t_{j},t_{j+1})}\n\n means that the coarse correction has to be computed in serial order.\nUnder some assumptions, a simple theoretical model for the speedup of Parareal can be derived.[12] Although in applications these assumptions can be too restrictive, the model still is useful to illustrate the trade offs that are involved in obtaining speedup with Parareal.\nFirst, assume that every time slice \n\n\n\n[\n\nt\n\nj\n\n\n,\n\nt\n\nj\n+\n1\n\n\n]\n\n\n{\\displaystyle [t_{j},t_{j+1}]}\n\n consists of exactly \n\n\n\n\nN\n\nf\n\n\n\n\n{\\displaystyle N_{f}}\n\n steps of the fine integrator and of \n\n\n\n\nN\n\nc\n\n\n\n\n{\\displaystyle N_{c}}\n\n steps of the coarse integrator. This includes in particular the assumption that all time slices are of identical length and that both coarse and fine integrator use a constant step size over the full simulation. Second, denote by \n\n\n\n\n\u03c4\n\nf\n\n\n\n\n{\\displaystyle \\tau _{f}}\n\n and \n\n\n\n\n\u03c4\n\nc\n\n\n\n\n{\\displaystyle \\tau _{c}}\n\n the computing time required for a single step of the fine and coarse methods, respectively, and assume that both are constant. This is typically not exactly true when an implicit method is used, because then runtimes vary depending on the number of iterations required by the iterative solver.\nUnder these two assumptions, the runtime for the fine method integrating over \n\n\n\nP\n\n\n{\\displaystyle P}\n\n time slices can be modelled as\n\n\n\n\n\nc\n\nfine\n\n\n=\nP\n\nN\n\nf\n\n\n\n\u03c4\n\nf\n\n\n.\n\n\n{\\displaystyle c_{\\text{fine}}=PN_{f}\\tau _{f}.}\n\n\nThe runtime of Parareal using \n\n\n\nP\n\n\n{\\displaystyle P}\n\n processing units and performing \n\n\n\nK\n\n\n{\\displaystyle K}\n\n iterations is\n\n\n\n\n\nc\n\nparareal\n\n\n=\n(\nK\n+\n1\n)\nP\n\nN\n\nc\n\n\n\n\u03c4\n\nc\n\n\n+\nK\n\nN\n\nf\n\n\n\n\u03c4\n\nf\n\n\n.\n\n\n{\\displaystyle c_{\\text{parareal}}=(K+1)PN_{c}\\tau _{c}+KN_{f}\\tau _{f}.}\n\n\nSpeedup of Parareal then is\n\n\n\n\n\nS\n\np\n\n\n=\n\n\n\nc\n\nfine\n\n\n\nc\n\nparareal\n\n\n\n\n=\n\n\n1\n\n(\nK\n+\n1\n)\n\n\n\nN\n\nc\n\n\n\nN\n\nf\n\n\n\n\n\n\n\n\u03c4\n\nc\n\n\n\n\u03c4\n\nf\n\n\n\n\n+\n\n\nK\nP\n\n\n\n\n\n\u2264\nmin\n\n{\n\n\n\n\nN\n\nf\n\n\n\n\u03c4\n\nf\n\n\n\n\n\nN\n\nc\n\n\n\n\u03c4\n\nc\n\n\n\n\n\n,\n\n\nP\nK\n\n\n}\n\n.\n\n\n{\\displaystyle S_{p}={\\frac {c_{\\text{fine}}}{c_{\\text{parareal}}}}={\\frac {1}{(K+1){\\frac {N_{c}}{N_{f}}}{\\frac {\\tau _{c}}{\\tau _{f}}}+{\\frac {K}{P}}}}\\leq \\min \\left\\{{\\frac {N_{f}\\tau _{f}}{N_{c}\\tau _{c}}},{\\frac {P}{K}}\\right\\}.}\n\n\nThese two bounds illustrate the trade off that has to be made in choosing the coarse method: on the one hand, it has to be cheap and/or use a much larger time step to make the first bound as large as possible, on the other hand the number of iterations \n\n\n\nK\n\n\n{\\displaystyle K}\n\n has to be kept low to keep the second bound large. In particular, Parareal's parallel efficiency is bounded by\n\n\n\n\n\nE\n\np\n\n\n=\n\n\n\nS\n\np\n\n\nP\n\n\n\u2264\n\n\n1\nK\n\n\n,\n\n\n{\\displaystyle E_{p}={\\frac {S_{p}}{P}}\\leq {\\frac {1}{K}},}\n\n\nthat is by the inverse of the number of required iterations.\nThe vanilla version of Parareal has issues for problems with imaginary eigenvalues.[6] It typically only converges toward the very last iterations, that is as \n\n\n\nk\n\n\n{\\displaystyle k}\n\n approaches \n\n\n\nP\n\n\n{\\displaystyle P}\n\n, and the speedup \n\n\n\n\nS\n\np\n\n\n\n\n{\\displaystyle S_{p}}\n\n is always going to be smaller than one. So either the number of iterations is small and Parareal is unstable or, if \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is large enough to make Parareal stable, no speedup is possible. This also means that Parareal is typically unstable for hyperbolic equations.[13] Even though the formal analysis by Gander and Vandewalle covers only linear problems with constant coefficients, the problem also arises when Parareal is applied to the nonlinear Navier-Stokes equations when the viscosity coefficient becomes too small and the Reynolds number too large.[14] Different approaches exist to stabilise Parareal,[15][16][17] one being Krylov-subspace enhanced Parareal.\nThere are multiple algorithms that are directly based or at least inspired by the original Parareal algorithm.\nEarly on it was recognised that for linear problems information generated by the fine method \n\n\n\n\n\n\nF\n\n\n\n\u03b4\nt\n\n\n\n\n{\\displaystyle {\\mathcal {F}}_{\\delta t}}\n\n can be used to improve the accuracy of the coarse method \n\n\n\n\n\n\nG\n\n\n\n\u0394\nt\n\n\n\n\n{\\displaystyle {\\mathcal {G}}_{\\Delta t}}\n\n.[16] Originally, the idea was formulated for the parallel implicit time-integrator PITA,[18] a method closely related to Parareal but with small differences in how the correction is done. In every iteration \n\n\n\nk\n\n\n{\\displaystyle k}\n\n the result \n\n\n\n\n\n\nF\n\n\n\n\u03b4\nt\n\n\n(\n\ny\n\nj\n\n\nk\n\n\n)\n\n\n{\\displaystyle {\\mathcal {F}}_{\\delta t}(y_{j}^{k})}\n\n is computed for values \n\n\n\n\nu\n\nj\n\n\nk\n\n\n\u2208\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle u_{j}^{k}\\in \\mathbb {R} ^{d}}\n\n for \n\n\n\nj\n=\n0\n,\n\u2026\n,\nP\n\u2212\n1\n\n\n{\\displaystyle j=0,\\ldots ,P-1}\n\n. Based on this information, the subspace\n\n\n\n\n\nS\n\nk\n\n\n:=\n\n{\n\ny\n\nj\n\n\n\nk\n\u2032\n\n\n\n:\n0\n\u2264\n\nk\n\u2032\n\n\u2264\nk\n,\nj\n=\n0\n,\n\u2026\n,\nP\n\u2212\n1\n}\n\n\n\n{\\displaystyle S_{k}:=\\left\\{y_{j}^{k'}:0\\leq k'\\leq k,j=0,\\ldots ,P-1\\right\\}}\n\n\nis defined and updated after every Parareal iteration.[19] Denote as \n\n\n\n\nP\n\nk\n\n\n\n\n{\\displaystyle P_{k}}\n\n the orthogonal projection from \n\n\n\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle \\mathbb {R} ^{d}}\n\n to \n\n\n\n\nS\n\nk\n\n\n\n\n{\\displaystyle S_{k}}\n\n. Then, replace the coarse method with the improved integrator \n\n\n\n\n\n\nK\n\n\n\n\u0394\nt\n\n\n(\ny\n)\n=\n\n\n\nF\n\n\n\n\u03b4\nt\n\n\n(\n\nP\n\nk\n\n\ny\n)\n+\n\n\n\nG\n\n\n\n\u0394\nt\n\n\n(\n(\nI\n\u2212\n\nP\n\nk\n\n\n)\ny\n)\n\n\n{\\displaystyle {\\mathcal {K}}_{\\Delta t}(y)={\\mathcal {F}}_{\\delta t}(P_{k}y)+{\\mathcal {G}}_{\\Delta t}((I-P_{k})y)}\n\n.\nAs the number of iterations increases, the space \n\n\n\n\nS\n\nk\n\n\n\n\n{\\displaystyle S_{k}}\n\n will grow and the modified propagator \n\n\n\n\n\n\nK\n\n\n\n\u0394\nt\n\n\n\n\n{\\displaystyle {\\mathcal {K}}_{\\Delta t}}\n\n will become more accurate. This will lead to faster convergence. This version of Parareal can also stably integrate linear hyperbolic partial differential equations.[20] An extension to nonlinear problems based on the reduced basis method exists as well.[17]\nA method with improved parallel efficiency based on a combination of Parareal with spectral deferred corrections (SDC) [21] has been proposed by M. Minion.[22] It limits the choice for coarse and fine integrator to SDC, sacrificing flexibility for improved parallel efficiency. Instead of the limit of \n\n\n\n1\n\n/\n\nK\n\n\n{\\displaystyle 1/K}\n\n, the bound on parallel efficiency in the hybrid method becomes\n\n\n\n\n\nE\n\np\n\n\n\u2264\n\n\n\nK\n\ns\n\n\n\nK\n\np\n\n\n\n\n\n\n{\\displaystyle E_{p}\\leq {\\frac {K_{s}}{K_{p}}}}\n\n\nwith \n\n\n\n\nK\n\ns\n\n\n\n\n{\\displaystyle K_{s}}\n\n being the number of iterations of the serial SDC base method and \n\n\n\n\nK\n\np\n\n\n\n\n{\\displaystyle K_{p}}\n\n the typically greater number of iterations of the parallel hybrid method. The Parareal-SDC hybrid has been further improved by addition of a full approximation scheme as used in nonlinear multigrid. This led to the development of the parallel full approximation scheme in space and time (PFASST).[23] Performance of PFASST has been studied for PEPC, a Barnes-Hut tree code based particle solver developed at Juelich Supercomputing Centre. Simulations using all 262,144 cores on the IBM BlueGene/P system JUGENE showed that PFASST could produce additional speedup beyond saturation of the spatial tree parallelisation.[24]\nThe multigrid reduction in time method (MGRIT) generalises the interpretation of Parareal as a multigrid-in-time algorithms to multiple levels using different smoothers.[25] It is a more general approach but for a specific choice of parameters it is equivalent to Parareal. The XBraid library implementing MGRIT is being developed by Lawrence Livermore National Laboratory.\nParaExp uses exponential integrators within Parareal.[26] While limited to linear problems, it can produce almost optimal parallel speedup.", 
    "dbpedia_url": "http://dbpedia.org/resource/Parareal", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Parareal\n"
}