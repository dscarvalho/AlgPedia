{
    "about": "Least slack time (LST) scheduling is a scheduling algorithm. It assigns priority based on the slack time of a process. Slack time is the amount of time left after a job if the job was started now. This algorithm is also known as least laxity first. Its most common use is in embedded systems, especially those with multiple processors. It imposes the simple constraint that each process on each available processor possesses the same run time, and that individual processes do not have an affinity to a certain processor. This is what lends it a suitability to embedded systems.", 
    "name": "Least Slack Time Scheduling", 
    "classification": "Scheduling Algorithms", 
    "full_text": "Least slack time (LST) scheduling is a scheduling algorithm. It assigns priority based on the slack time of a process. Slack time is the amount of time left after a job if the job was started now. This algorithm is also known as least laxity first. Its most common use is in embedded systems, especially those with multiple processors. It imposes the simple constraint that each process on each available processor possesses the same run time, and that individual processes do not have an affinity to a certain processor. This is what lends it a suitability to embedded systems.\nThis scheduling algorithm first selects those processes that have the smallest \"slack time\". Slack time is defined as the temporal difference between the deadline, the ready time and the run time.\nMore formally, the slack time for a process is defined as:\n\n\n\n\n(\nd\n\u2212\nt\n)\n\u2212\n\nc\n\u2032\n\n\n\n{\\displaystyle (d-t)-c'}\n\n\nwhere \n\n\n\nd\n\n\n{\\displaystyle d}\n\n is the process deadline, \n\n\n\nt\n\n\n{\\displaystyle t}\n\n is the real time since the cycle start, and \n\n\n\n\nc\n\u2032\n\n\n\n{\\displaystyle c'}\n\n is the remaining computation time.\nIn realtime scheduling algorithms for periodic jobs, an acceptance test is needed before accepting a sporadic job with a hard deadline. One of the simplest acceptance tests for a sporadic job is calculating the amount of slack time between the release time and deadline of the job.\nLST scheduling is most useful in systems comprising mainly aperiodic tasks, because no prior assumptions are made on the events' rate of occurrence. The main weakness of LST is that it does not look ahead, and works only on the current system state. Thus, during a brief overload of system resources, LST can be suboptimal. It will also be suboptimal when used with uninterruptible processes. However, like earliest deadline first, and unlike rate monotonic scheduling, this algorithm can be used for processor utilization up to 100%.", 
    "dbpedia_url": "http://dbpedia.org/resource/Least_slack_time_scheduling", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Least_slack_time_scheduling\n"
}