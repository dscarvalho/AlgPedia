{
    "about": "The Berkeley algorithm is a method of clock synchronisation in distributed computing which assumes no machine has an accurate time source. It was developed by Gusella and Zatti at the University of California, Berkeley in 1989.[1] Like Cristian's algorithm, it is intended for use within intranets.", 
    "name": "Berkeley Algorithm", 
    "classification": "Distributed Algorithms", 
    "full_text": "The Berkeley algorithm is a method of clock synchronisation in distributed computing which assumes no machine has an accurate time source. It was developed by Gusella and Zatti at the University of California, Berkeley in 1989.[1] Like Cristian's algorithm, it is intended for use within intranets.\nUnlike Cristian's algorithm, the server process in the Berkeley algorithm, called the master, periodically polls other slave processes. Generally speaking, the algorithm is:\nWith this method the average cancels out individual clock's tendencies to drift. Gusella and Zatti released results involving 15 computers whose clocks were synchronised to within about 20-25 milliseconds using their protocol.\nComputer systems normally avoid rewinding their clock when they receive a negative clock alteration from the master. Doing so would break the property of monotonic time, which is a fundamental assumption in certain algorithms in the system itself or in programs such as make. A simple solution to this problem is to halt the clock for the duration specified by the master, but this simplistic solution can also cause problems, although they are less severe. For minor corrections, most systems slow the clock (known as \"clock slew\"), applying the correction over a longer period of time.", 
    "dbpedia_url": "http://dbpedia.org/resource/Berkeley_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Berkeley_algorithm\n"
}