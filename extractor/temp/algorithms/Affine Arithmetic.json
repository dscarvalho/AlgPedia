{
    "about": "Affine arithmetic (AA) is a model for self-validated numerical analysis. In AA, the quantities of interest are represented as affine combinations (affine forms) of certain primitive variables, which stand for sources of uncertainty in the data or approximations made during the computation.", 
    "name": "Affine Arithmetic", 
    "classification": "Numerical Analysis", 
    "full_text": "Affine arithmetic (AA) is a model for self-validated numerical analysis. In AA, the quantities of interest are represented as affine combinations (affine forms) of certain primitive variables, which stand for sources of uncertainty in the data or approximations made during the computation.\nAffine arithmetic is meant to be an improvement on interval arithmetic (IA), and is similar to generalized interval arithmetic, first-order Taylor arithmetic, the center-slope model, and ellipsoid calculus \u2014 in the sense that it is an automatic method to derive first-order guaranteed approximations to general formulas.\nAffine arithmetic is potentially useful in every numeric problem where one needs guaranteed enclosures to smooth functions, such as solving systems of non-linear equations, analyzing dynamical systems, integrating functions differential equations, etc. Applications include ray tracing, plotting curves, intersecting implicit and parametric surfaces, error analysis (mathematics), process control, worst-case analysis of electric circuits, and more.\n\n\nIn affine arithmetic, each input or computed quantity x is represented by a formula \n\n\n\nx\n=\n\nx\n\n0\n\n\n+\n\nx\n\n1\n\n\n\n\u03f5\n\n1\n\n\n+\n\nx\n\n2\n\n\n\n\u03f5\n\n2\n\n\n+\n\n\n\n\n{\\displaystyle x=x_{0}+x_{1}\\epsilon _{1}+x_{2}\\epsilon _{2}+{}}\n\n\n\n\n\n\u22ef\n\n\n{\\displaystyle \\cdots }\n\n\n\n\n\n\n\n+\n\nx\n\nn\n\n\n\n\u03f5\n\nn\n\n\n\n\n{\\displaystyle {}+x_{n}\\epsilon _{n}}\n\n where \n\n\n\n\nx\n\n0\n\n\n,\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\n\n{\\displaystyle x_{0},x_{1},x_{2},}\n\n\n\n\n\n\u2026\n,\n\n\n{\\displaystyle \\dots ,}\n\n\n\n\n\n\nx\n\nn\n\n\n\n\n{\\displaystyle x_{n}}\n\n are known floating-point numbers, and \n\n\n\n\n\u03f5\n\n1\n\n\n,\n\n\u03f5\n\n2\n\n\n,\n\n\u03f5\n\nn\n\n\n\n\n{\\displaystyle \\epsilon _{1},\\epsilon _{2},\\epsilon _{n}}\n\n are symbolic variables whose values are only known to lie in the range [-1,+1].\nThus, for example, a quantity X which is known to lie in the range [3,7] can be represented by the affine form \n\n\n\nx\n=\n5\n+\n2\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle x=5+2\\epsilon _{k}}\n\n, for some k. Conversely, the form \n\n\n\nx\n=\n10\n+\n2\n\n\u03f5\n\n3\n\n\n\u2212\n5\n\n\u03f5\n\n8\n\n\n\n\n{\\displaystyle x=10+2\\epsilon _{3}-5\\epsilon _{8}}\n\n implies that the corresponding quantity X lies in the range [3,17].\nThe sharing of a symbol \n\n\n\n\n\u03f5\n\nj\n\n\n\n\n{\\displaystyle \\epsilon _{j}}\n\n among two affine forms \n\n\n\nx\n\n\n{\\displaystyle x}\n\n, \n\n\n\ny\n\n\n{\\displaystyle y}\n\n implies that the corresponding quantities X, Y are partially dependent, in the sense that their joint range is smaller than the Cartesian product of their separate ranges. For example, if \n\n\n\nx\n=\n10\n+\n2\n\n\u03f5\n\n3\n\n\n\u2212\n6\n\n\u03f5\n\n8\n\n\n\n\n{\\displaystyle x=10+2\\epsilon _{3}-6\\epsilon _{8}}\n\n and \n\n\n\ny\n=\n20\n+\n3\n\n\u03f5\n\n4\n\n\n+\n4\n\n\u03f5\n\n8\n\n\n\n\n{\\displaystyle y=20+3\\epsilon _{4}+4\\epsilon _{8}}\n\n, then the individual ranges of X and Y are [2,18] and [13,27], but the joint range of the pair (X,Y) is the hexagon with corners (2,27), (6,27), (18,19), (18,13), (14,13), (2,21) \u2014 which is a proper subset of the rectangle [2,18]\u00d7[13,27].\nAffine forms can be combined with the standard arithmetic operations or elementary functions, to obtain guaranteed approximations to formulas.\nFor example, given affine forms \n\n\n\nx\n,\ny\n\n\n{\\displaystyle x,y}\n\n for X and Y, one can obtain an affine form \n\n\n\nz\n\n\n{\\displaystyle z}\n\n for Z = X + Y simply by adding the forms \u2014 that is, setting \n\n\n\n\nz\n\nj\n\n\n\n\n{\\displaystyle z_{j}}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\n\nx\n\nj\n\n\n+\n\ny\n\nj\n\n\n\n\n{\\displaystyle x_{j}+y_{j}}\n\n for every j. Similarly, one can compute an affine form \n\n\n\nz\n\n\n{\\displaystyle z}\n\n for Z = \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\nX, where \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\n is a known constant, by setting \n\n\n\n\nz\n\nj\n\n\n\n\n{\\displaystyle z_{j}}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\n\u03b1\n\nx\n\nj\n\n\n\n\n{\\displaystyle \\alpha x_{j}}\n\n for every j. This generalizes to arbitrary affine operations like Z = \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\nX + \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\nY + \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n.\nA non-affine operation \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\nF\n(\nX\n,\nY\n,\n\n\n{\\displaystyle F(X,Y,}\n\n\n\n\n\n\u2026\n\n\n{\\displaystyle \\dots }\n\n\n\n\n\n)\n\n\n{\\displaystyle )}\n\n, like multiplication \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\nX\nY\n\n\n{\\displaystyle XY}\n\n or \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\nsin\n\u2061\n(\nX\n)\n\n\n{\\displaystyle \\sin(X)}\n\n, cannot be performed exactly, since the result would not be an affine form of the \n\n\n\n\n\u03f5\n\ni\n\n\n\n\n{\\displaystyle \\epsilon _{i}}\n\n. In that case, one should take a suitable affine function G that approximates F to first order, in the ranges implied by \n\n\n\nx\n\n\n{\\displaystyle x}\n\n and \n\n\n\ny\n\n\n{\\displaystyle y}\n\n; and compute \n\n\n\nz\n\n\n{\\displaystyle z}\n\n \n\n\n\n\u2190\n\n\n{\\displaystyle \\gets }\n\n \n\n\n\nG\n(\nx\n,\ny\n,\n\n\n{\\displaystyle G(x,y,}\n\n\n\n\n\n\u2026\n\n\n{\\displaystyle \\dots }\n\n\n\n\n\n)\n+\n\nz\n\nk\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle )+z_{k}\\epsilon _{k}}\n\n, where \n\n\n\n\nz\n\nk\n\n\n\n\n{\\displaystyle z_{k}}\n\n is an upper bound for the absolute error \n\n\n\n\n|\n\nF\n\u2212\nG\n\n|\n\n\n\n{\\displaystyle |F-G|}\n\n in that range, and \n\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle \\epsilon _{k}}\n\n is a new symbolic variable not occurring in any previous form.\nThe form \n\n\n\nz\n\n\n{\\displaystyle z}\n\n then gives a guaranteed enclosure for the quantity Z; moreover, the affine forms \n\n\n\nx\n,\ny\n,\n\n\n{\\displaystyle x,y,}\n\n\n\n\n\n\u2026\n\n\n{\\displaystyle \\dots }\n\n\n\n\n\n,\nz\n\n\n{\\displaystyle ,z}\n\n jointly provide a guaranteed enclosure for the point (X,Y,...,Z), which is often much smaller than the Cartesian product of the ranges of the individual forms.\nSystematic use of this method allows arbitrary computations on given quantities to be replaced by equivalent computations on their affine forms, while preserving first-order correlations between the input and output and guaranteeing the complete enclosure of the joint range. One simply replaces each arithmetic operation or elementary function call in the formula by a call to the corresponding AA library routine.\nFor smooth functions, the approximation errors made at each step are proportional to the square h2 of the width h of the input intervals. For this reason, affine arithmetic will often yield much tighter bounds than standard interval arithmetic (whose errors are proportional to h).\nIn order to provide guaranteed enclosure, affine arithmetic operations must account for the roundoff errors in the computation of the resulting coefficients \n\n\n\n\nz\n\nj\n\n\n\n\n{\\displaystyle z_{j}}\n\n. This cannot be done by rounding each \n\n\n\n\nz\n\nj\n\n\n\n\n{\\displaystyle z_{j}}\n\n in a specific direction, because any such rounding would falsify the dependencies between affine forms that share the symbol \n\n\n\n\n\u03f5\n\nj\n\n\n\n\n{\\displaystyle \\epsilon _{j}}\n\n. Instead, one must compute an upper bound \n\n\n\n\n\u03b4\n\nj\n\n\n\n\n{\\displaystyle \\delta _{j}}\n\n to the roundoff error of each \n\n\n\n\nz\n\nj\n\n\n\n\n{\\displaystyle z_{j}}\n\n, and add all those \n\n\n\n\n\u03b4\n\nj\n\n\n\n\n{\\displaystyle \\delta _{j}}\n\n to the coefficient \n\n\n\n\nz\n\nk\n\n\n\n\n{\\displaystyle z_{k}}\n\n of the new symbol \n\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle \\epsilon _{k}}\n\n (rounding up). Thus, because of roundoff errors, even affine operations like Z = \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\nX and Z = X + Y will add the extra term \n\n\n\n\nz\n\nk\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle z_{k}\\epsilon _{k}}\n\n.\nThe handling of roundoff errors increases the code complexity and execution time of AA operations. In applications where those errors are known to be unimportant (because they are dominated by uncertainties in the input data and/or by the linearization errors), one may use a simplified AA library that does not implement roundoff error control.\nAffine arithmetic can be viewed in matrix form as follows. Let \n\n\n\n\nX\n\n1\n\n\n,\n\nX\n\n2\n\n\n,\n\n\n{\\displaystyle X_{1},X_{2},}\n\n\n\n\n\n\u2026\n,\n\n\n{\\displaystyle \\dots ,}\n\n\n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n be all input and computed quantities in use at some point during a computation. The affine forms for those quantities can be represented by a single coefficient matrix A and a vector b, where element \n\n\n\n\nA\n\ni\n,\nj\n\n\n\n\n{\\displaystyle A_{i,j}}\n\n is the coefficient of symbol \n\n\n\n\n\u03f5\n\nj\n\n\n\n\n{\\displaystyle \\epsilon _{j}}\n\n in the affine form of \n\n\n\n\nX\n\ni\n\n\n\n\n{\\displaystyle X_{i}}\n\n; and \n\n\n\n\nb\n\ni\n\n\n\n\n{\\displaystyle b_{i}}\n\n is the independent term of that form. Then the joint range of the quantities \u2014 that is, the range of the point \n\n\n\n(\n\nX\n\n1\n\n\n,\n\nX\n\n2\n\n\n,\n\n\n{\\displaystyle (X_{1},X_{2},}\n\n\n\n\n\n\u2026\n,\n\n\n{\\displaystyle \\dots ,}\n\n\n\n\n\n\nX\n\nm\n\n\n)\n\n\n{\\displaystyle X_{m})}\n\n \u2014 is the image of the hypercube \n\n\n\n\nU\n\nn\n\n\n=\n[\n\u2212\n1\n,\n+\n1\n\n]\n\nn\n\n\n\n\n{\\displaystyle U^{n}=[-1,+1]^{n}}\n\n by the affine map from \n\n\n\n\nU\n\nn\n\n\n\n\n{\\displaystyle U^{n}}\n\n to \n\n\n\n\nR\n\nm\n\n\n\n\n{\\displaystyle R^{m}}\n\n defined by \n\n\n\n\u03f5\n\n\n{\\displaystyle \\epsilon }\n\n \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n \n\n\n\nA\n\u03f5\n+\nb\n\n\n{\\displaystyle A\\epsilon +b}\n\n.\nThe range of this affine map is a zonotope bounding the joint range of the quantities \n\n\n\n\nX\n\n1\n\n\n,\n\nX\n\n2\n\n\n,\n\n\n{\\displaystyle X_{1},X_{2},}\n\n\n\n\n\n\u2026\n,\n\n\n{\\displaystyle \\dots ,}\n\n\n\n\n\n\nX\n\nm\n\n\n\n\n{\\displaystyle X_{m}}\n\n. Thus one could say that AA is a \"zonotope arithmetic\". Each step of AA usually entails adding one more row and one more column to the matrix A.\nSince each AA operation generally creates a new symbol \n\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle \\epsilon _{k}}\n\n, the number of terms in an affine form may be proportional to the number of operations used to compute it. Thus, it is often necessary to apply \"symbol condensation\" steps, where two or more symbols \n\n\n\n\n\u03f5\n\nk\n\n\n\n\n{\\displaystyle \\epsilon _{k}}\n\n are replaced by a smaller set of new symbols. Geometrically, this means replacing a complicated zonotope P by a simpler zonotope Q that encloses it. This operation can be done without destroying the first-order approximation property of the final zonotope.\nAffine arithmetic can be implemented by a global array A and a global vector b, as described above. This approach is reasonably adequate when the set of quantities to be computed is small and known in advance. In this approach, the programmer must maintain externally the correspondence between the row indices and the quantities of interest. Global variables hold the number m of affine forms (rows) computed so far, and the number n of symbols (columns) used so far; these are automatically updated at each AA operation.\nAlternatively, each affine form can be implemented as a separate vector of coefficients. This approach is more convenient for programming, especially when there are calls to library procedures that may use AA internally. Each affine form can be given a mnemonic name; it can be allocated when needed, be passed to procedures, and reclaimed when no longer needed. The AA code then looks much closer to the original formula. A global variable holds the number n of symbols used so far.\nOn fairly long computations, the set of \"live\" quantities (that will be used in future computations) is much smaller than the set of all computed quantities; and ditto for the set of \"live\" symbols \n\n\n\n\n\u03f5\n\nj\n\n\n\n\n{\\displaystyle \\epsilon _{j}}\n\n. In this situation, the matrix and vector implementations are too wasteful of time and space.\nIn such situations, one should use a sparse implementation. Namely, each affine form is stored as a list of pairs (j,\n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n), containing only the terms with non-zero coefficient \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n. For efficiency, the terms should be sorted in order of j. This representation makes the AA operations somewhat more complicated; however, the cost of each operation becomes proportional to the number of nonzero terms appearing in the operands, instead of the number of total symbols used so far.\nThis is the representation used by LibAffa.", 
    "dbpedia_url": "http://dbpedia.org/resource/Affine_arithmetic", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Affine_arithmetic\n"
}