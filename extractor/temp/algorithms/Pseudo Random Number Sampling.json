{
    "about": "Pseudo-random number sampling or non-uniform pseudo-random variate generation is the numerical practice of generating pseudo-random numbers that are distributed according to a given probability distribution.", 
    "classification": "Pseudorandom Number Generators", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Pseudo-random_number_sampling\n", 
    "full_text": "Pseudo-random number sampling or non-uniform pseudo-random variate generation is the numerical practice of generating pseudo-random numbers that are distributed according to a given probability distribution.\nMethods of sampling a non-uniform distribution are typically based on the availability of a pseudo-random number generator producing numbers X that are uniformly distributed. Computational algorithms are then used to manipulate a single random variate, X, or often several such variates, into a new random variate Y such that these values have the required distribution.\nHistorically, basic methods of pseudo-random number sampling were developed for Monte-Carlo simulations in the Manhattan project;[citation needed] they were first published by John von Neumann in the early 1950s.[citation needed]\n\n\nFor a discrete probability distribution with a finite number n of indices at which the probability mass function f takes non-zero values, the basic sampling algorithm is straightforward. The interval [0,\u00a01) is divided in n intervals [0,\u00a0f(1)), [f(1),\u00a0f(1)\u00a0+\u00a0f(2)),\u00a0... The width of interval i equals the probability\u00a0f(i). One draws a uniformly distributed pseudo-random number X, and searches for the index i of the corresponding interval. The so determined i will have the distribution\u00a0f(i).\nFormalizing this idea becomes easier by using the cumulative distribution function\nIt is convenient to set F(0)\u00a0=\u00a00. The n intervals are then simply [F(0),\u00a0F(1)), [F(1),\u00a0F(2)), ..., [F(n\u00a0\u2212\u00a01),\u00a0F(n)). The main computational task is then to determine i for which F(i\u00a0\u2212\u00a01)\u00a0\u2264\u00a0X\u00a0<\u00a0F(i).\nThis can be done by different algorithms:\nGeneric methods for generating independent samples:\nGeneric methods for generating correlated samples (often necessary for unusually-shaped or high-dimensional distributions):\nFor generating a normal distribution:\nFor generating a Poisson distribution:\nGNU Scientific Library has a section entitled \"Random Number Distributions\" with routines for sampling under more than twenty different distributions.", 
    "name": "Pseudo Random Number Sampling"
}