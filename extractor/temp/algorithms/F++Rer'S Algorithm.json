{
    "about": "F\u00fcrer's algorithm is an integer multiplication algorithm for quite large integers possessing a very low asymptotic complexity, which can be optimized by using the inverse Ackermann function instead of the iterated logarithm. It was designed in 2007 by the Swiss mathematician Martin F\u00fcrer of Pennsylvania State University [1] as an asymptotically faster algorithm (when analysed on a multitape Turing machine) than its predecessor, the Sch\u00f6nhage-Strassen algorithm published in 1971.[2]", 
    "name": "F\u00fcRer'S Algorithm", 
    "classification": "Computer Arithmetic Algorithms", 
    "full_text": "F\u00fcrer's algorithm is an integer multiplication algorithm for quite large integers possessing a very low asymptotic complexity, which can be optimized by using the inverse Ackermann function instead of the iterated logarithm. It was designed in 2007 by the Swiss mathematician Martin F\u00fcrer of Pennsylvania State University [1] as an asymptotically faster algorithm (when analysed on a multitape Turing machine) than its predecessor, the Sch\u00f6nhage-Strassen algorithm published in 1971.[2]\nThe predecessor to F\u00fcrer's algorithm, the Sch\u00f6nhage-Strassen algorithm, used Fast Fourier Transform (FFT) to compute integer products in time \n\n\n\nO\n(\nn\nlog\n\u2061\nn\nlog\n\u2061\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle O(n\\log n\\log \\log n)}\n\n (in big O notation) and its authors, Arnold Sch\u00f6nhage and Volker Strassen, also conjectured a lower bound for the problem of \n\n\n\n\u03a9\n(\nn\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle \\Omega (n\\log n)}\n\n. Here \n\n\n\nn\n\n\n{\\displaystyle n}\n\n denotes the total number of bits in the two input numbers. F\u00fcrer's algorithm reduces the gap between these two bounds: it can be used to multiply binary integers of length \n\n\n\nn\n\n\n{\\displaystyle n}\n\n in time \n\n\n\nn\nlog\n\u2061\nn\n\n\n2\n\nO\n(\n\nlog\n\n\u2217\n\n\n\u2061\nn\n)\n\n\n\n\n{\\displaystyle n\\log n\\,2^{O(\\log ^{*}n)}}\n\n (or by a circuit with that many logic gates), where log*n stands for the iterated logarithm. The difference between the terms \n\n\n\nlog\n\u2061\nlog\n\u2061\nn\n\n\n{\\displaystyle \\log \\log n}\n\n and \n\n\n\n\n2\n\n\nlog\n\n\u2217\n\n\n\u2061\nn\n\n\n\n\n{\\displaystyle 2^{\\log ^{*}n}}\n\n from a complexity point of view is asymptotically in the advantage of F\u00fcrer's algorithm but its asymptotic approximation is only efficient for great numbers.[3] However the difference between the \n\n\n\nlog\n\u2061\nlog\n\u2061\nn\n\n\n{\\displaystyle \\log \\log n}\n\n and \n\n\n\n\n2\n\n\nlog\n\n\u2217\n\n\n\u2061\nn\n\n\n\n\n{\\displaystyle 2^{\\log ^{*}n}}\n\n factors in the time bounds of Sch\u00f6nhage-Strassen's algorithm and F\u00fcrer's algorithm for realistic values of \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is very small.[1]\nMeanwhile, in 1976, Luigi Dadda already proposed an original parallel implementation of the multiplication operator.[4][5]\nIn 1983, the pilgrim fathers Aho, Hopcroft and Ullmann focused on this research field from an algorithmic point of view.[6]\nDuring the same year, Jean Vuillemin designed a quick algorithm for the multiplication operator and its related application to VLSI architectures.[7]\nIn the 90's, Barry Fagin published different algorithms for long integer multiplication in the sequential and parallel frameworks, the first algorithm being based on Fermat Number Transform (FNT).[8][9][10][11]\nIn 1993 and 1994, Dan Zuras published two complementary papers related to quick multiplication of long integers.[12][13]\nIn 1996, Benjamin Singer and George Saon proposed a parallel algorithm for integer multiplication.[14]\nIn 2003, Viktor Bunimov and Manfred Schimmler published two algorithms, one sequential and one parallel, to compute respectively the modular product and the parallel product of very long integers.[15][16]\nIn 2008, De, Saha, Kurur and Saptharishi gave a similar algorithm that relies on modular arithmetic instead of complex arithmetic to achieve the same running time.[17]\nIn 2013, Bantikyan proposed a fast integer multiplication algorithm based on FFT and dedicated to CUDA architectures.[18]\nIn 2015, Harvey, van der Hoeven and Lecerf [19] proved that their optimized version of F\u00fcrer's algorithm achieves a running time of \n\n\n\nO\n(\nn\nlog\n\u2061\nn\n\n2\n\n3\n\nlog\n\n\u2217\n\n\n\u2061\nn\n\n\n)\n\n\n{\\displaystyle O(n\\log n2^{3\\log ^{*}n})}\n\n, making explicit the implied constant in the \n\n\n\nO\n(\n\nlog\n\n\u2217\n\n\n\u2061\nn\n)\n\n\n{\\displaystyle O(\\log ^{*}n)}\n\n exponent. They also proposed a modification to F\u00fcrer's algorithm that achieves \n\n\n\nO\n(\nn\nlog\n\u2061\nn\n\n2\n\n2\n\nlog\n\n\u2217\n\n\n\u2061\nn\n\n\n)\n\n\n{\\displaystyle O(n\\log n2^{2\\log ^{*}n})}\n\n whose validity relies on several standard conjectures about the distribution of Mersenne primes.\nIn 2015 too, Covanov and Thom\u00e9 provided another modification of F\u00fcrer's algorithm that achieves the same running time.[20] Nevertheless, it remains just as impractical as all the other existing implementations of this algorithm.[21][22]\nRecently, in 2016, Covanov and Thom\u00e9 proposed a new multiplication algorithm of long integers based on the generalization of Fermat primes.[23]", 
    "dbpedia_url": "http://dbpedia.org/resource/F\u00fcrer's_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/F\u00fcrer's_algorithm\n"
}