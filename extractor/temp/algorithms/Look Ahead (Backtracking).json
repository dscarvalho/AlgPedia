{
    "about": "In backtracking algorithms, look ahead is the generic term for a subprocedure that attempts to foresee the effects of choosing a branching variable to evaluate or one of its values. The two main aims of look-ahead are to choose a variable to evaluate next and the order of values to assign to it.", 
    "classification": "Search Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Look-ahead_(backtracking)\n", 
    "full_text": "In backtracking algorithms, look ahead is the generic term for a subprocedure that attempts to foresee the effects of choosing a branching variable to evaluate or one of its values. The two main aims of look-ahead are to choose a variable to evaluate next and the order of values to assign to it.\n\n\nIn a general constraint satisfaction problem, every variable can take a value in a domain. A backtracking algorithm therefore iteratively chooses a variable and tests each of its possible values; for each value the algorithm is recursively run. Look ahead is used to check the effects of choosing a given variable to evaluate or to decide the order of values to give to it.\nThe simpler technique for evaluating the effect of a specific assignment to a variable is called forward checking. Given the current partial solution and a candidate assignment to evaluate, it checks whether another variable can take a consistent value. In other words, it first extends the current partial solution with the tentative value for the considered variable; it then considers every other variable \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n that is still unassigned, and checks whether there exists an evaluation of \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n that is consistent with the extended partial solution. More generally, forward checking determines the values for \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n that are consistent with the extended assignment.\nA look-ahead technique that may be more time-consuming but may produce better results is based on arc consistency. Namely, given a partial solution extended with a value for a new variable, it enforces arc consistency for all unassigned variables. In other words, for any unassigned variables, the values that cannot consistently be extended to another variable are removed. The difference between forward checking and arc consistency is that the former only checks a single unassigned variable at time for consistency, while the second also checks pairs of unassigned variables for mutual consistency.\nTwo other methods involving arc consistency are full and partial look ahead. They enforce arc consistency, but not for every pair of variables. In particular, full look considers every pair of unassigned variables \n\n\n\n\nx\n\ni\n\n\n,\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{i},x_{j}}\n\n, and enforces arc consistency between them. This is different than enforcing global arc consistency, which may possibly require a pair of variables to be reconsidered more than once. Instead, once full look ahead has enforced arc consistency between a pair of variables, the pair is not considered any more. Partial look ahead is similar, but a given order of variables is considered, and arc consistency is only enforced once for every pair \n\n\n\n\nx\n\ni\n\n\n,\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{i},x_{j}}\n\n with \n\n\n\ni\n<\nj\n\n\n{\\displaystyle i<j}\n\n.\nLook ahead based on arc consistency can also be extended to work with path consistency and general i-consistency or relational arc consistency.\nThe results of look ahead is used to decide the next variable to evaluate and the order of values to give to this variable. In particular, for any unassigned variable and value, look-ahead estimates the effects of setting that variable to that value.\nThe choice of the next variable and the choice of the next value to give it are complementary, in that the value is typically chosen in such a way a solution (if any) is found as quickly as possible, while the next variable is typically chosen in such a way unsatisfiability (if the current partial solution is unsatisfiable) is proven as quickly as possible.\nThe choice of the next variable to evaluate is particularly important, as it may produce exponential differences in running time. In order to prove unsatisfiability as quickly as possible, variables leaving few alternatives after assigned are the preferred ones. This idea can be implemented by checking only satisfiability or unsatisfiability of variable/value pairs. In particular, the next variable that is chosen is the one having a minimal number of values that are consistent with the current partial solution. In turn, consistency can be evaluated by simply checking partial consistency, or by using any of the considered look ahead techniques discussed above.\nThe following are three methods for ordering the values to tentatively assign to a variable:\nExperiments proved that these techniques are useful for large problems, especially the min-conflicts one.[citation needed]\nRandomization is also sometimes used for choosing a variable or value. For example, if two variables are equally preferred according to some measure, the choice can be done randomly.", 
    "name": "Look Ahead (Backtracking)"
}