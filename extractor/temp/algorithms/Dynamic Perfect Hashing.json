{
    "about": "In computer science, dynamic perfect hashing is a programming technique for resolving collisions in a hash table data structure.[1][2][3] While more memory-intensive than its hash table counterparts,[citation needed] this technique is useful for situations where fast queries, insertions, and deletions must be made on a large set of elements.", 
    "name": "Dynamic Perfect Hashing", 
    "classification": "Search Algorithms", 
    "full_text": "In computer science, dynamic perfect hashing is a programming technique for resolving collisions in a hash table data structure.[1][2][3] While more memory-intensive than its hash table counterparts,[citation needed] this technique is useful for situations where fast queries, insertions, and deletions must be made on a large set of elements.\n\n\nThe problem of optimal static hashing was first solved in general by Fredman, Koml\u00f3s and Sz\u00e9meredi.[4] In their 1984 paper,[1] they detail a two-tiered hash table scheme in which each bucket of the (first-level) hash table corresponds to a separate second-level hash table. Keys are hashed twice\u2014the first hash value maps to a certain bucket in the first-level hash table; the second hash value gives the position of that entry in that bucket's second-level hash table. The second-level table is guaranteed to be collision-free (i.e. perfect hashing) upon construction. Consequently, the look-up cost is guaranteed to be O(1) in the worst-case.[2]\nIn the static case, we are given a set with a total of x entries, each one with a unique key, ahead of time. Fredman, Koml\u00f3s and Sz\u00e9meredi pick a first-level hash table with size s = 2(x-1) buckets.[2]\nTo construct, x entries are separated into s buckets by the top-level hashing function, where s = 2(x-1). Then for each bucket with k entries, a second-level table is allocated with k2 slots, and its hash function is selected at random from a universal hash function set so that it is collision-free (i.e. a perfect hash function) and stored alongside the hash table. If the hash function randomly selected creates a table with collisions, a new hash function is randomly selected until a collision-free table can be guaranteed. Finally, with the collision-free hash, the k entries are hashed into the second-level table.\nThe quadratic size of the k2 space ensures that randomly creating a table with collisions is infrequent and independent of the size of k, providing linear amortized construction time. Although each second-level table requires quadratic space, if the keys inserted into the first-level hash table are uniformly distributed, the structure as a whole occupies expected O(n) space, since bucket sizes are small with high probability.[1]\nThe first-level hash function is specifically chosen so that, for the specific set of x unique key values, the total space T used by all the second-level hash tables has expected O(n) space, and more specifically T < s + 4*x. Fredman, Koml\u00f3s and Sz\u00e9meredi showed that given a universal hashing family of hash functions, at least half of those functions have that property.[2]\nDietzfelbinger et al. present a dynamic dictionary algorithm that, when a set of n items is incrementally added to the dictionary, membership queries always run in constant time and therefore O(1) worst-case time, the total storage required is O(n) (linear), and O(1) expected amortized insertion and deletion time (amortized constant time).\nIn the dynamic case, when a key is inserted into the hash table, if its entry in its respective subtable is occupied, then a collision is said to occur and the subtable is rebuilt based on its new total entry count and randomly selected hash function. Because the load factor of the second-level table is kept low (1/k), rebuilding is infrequent, and the amortized expected cost of insertions is O(1).[2] Similarly, the amortized expected cost of deletions is O(1).[2]\nAdditionally, the ultimate sizes of the top-level table or any of the subtables is unknowable in the dynamic case. One method for maintaining expected O(n) space of the table is to prompt a full reconstruction when a sufficient number of insertions and deletions have occurred. By results due to Dietzfelbinger et al.,[2] as long as the total number of insertions or deletions exceeds the number of elements at the time of last construction, the amortized expected cost of insertion and deletion remain O(1) with full rehashing taken into consideration.\nThe implementation of dynamic perfect hashing by Dietzfelbinger et al. uses these concepts, as well as lazy deletion, and is shown in pseudocode below.\nDuring the insertion of a new entry x at j, the global operations counter, count, is incremented.\nIf x exists at j, but is marked as deleted, then the mark is removed.\nIf x exists at j or at the subtable Tj, and is not marked as deleted, then a collision is said to occur and the jth bucket's second-level table Tj is rebuilt with a different randomly selected hash function hj.\nDeletion of x simply flags x as deleted without removal and increments count. In the case of both insertions and deletions, if count reaches a threshold M the entire table is rebuilt, where M is some constant multiple of the size of S at the start of a new phase. Here phase refers to the time between full rebuilds. Note that here the -1 in \"Delete(x)\" is a representation of an element which is not in the set of all possible elements U.\nA full rebuild of the table of S first starts by removing all elements marked as deleted and then setting the next threshold value M to some constant multiple of the size of S. A hash function, which partitions S into s(M) subsets, where the size of subset j is sj, is repeatedly randomly chosen until:\n\n\n\n\n\n\u2211\n\n0\n\u2264\nj\n\u2264\ns\n(\nM\n)\n\n\n\ns\n\nj\n\n\n\u2264\n\n\n\n32\n\nM\n\n2\n\n\n\n\ns\n(\nM\n)\n\n\n\n+\n4\nM\n.\n\n\n{\\displaystyle \\sum _{0\\leq j\\leq s(M)}s_{j}\\leq {\\frac {32M^{2}}{s(M)}}+4M.}\n\n\nFinally, for each subtable Tj a hash function hj is repeatedly randomly chosen from Hsj until hj is injective on the elements of Tj. The expected time for a full rebuild of the table of S with size n is O(n).[2]", 
    "dbpedia_url": "http://dbpedia.org/resource/Dynamic_perfect_hashing", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Dynamic_perfect_hashing\n"
}