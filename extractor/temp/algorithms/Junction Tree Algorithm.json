{
    "about": "The junction tree algorithm (also known as 'Clique Tree') is a method used in machine learning to extract marginalization in general graphs. In essence, it entails performing belief propagation on a modified graph called a junction tree. The basic premise is to eliminate cycles by clustering them into single nodes.", 
    "name": "Junction Tree Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "The junction tree algorithm (also known as 'Clique Tree') is a method used in machine learning to extract marginalization in general graphs. In essence, it entails performing belief propagation on a modified graph called a junction tree. The basic premise is to eliminate cycles by clustering them into single nodes.\n\n\nNote that this last step is inefficient for graphs of large treewidth. Computing the messages to pass between supernodes involves doing exact marginalization over the variables in both supernodes. Performing this algorithm for a graph with treewidth k will thus have at least one computation which takes time exponential in k.\nThe first step concerns only Bayesian networks, and is a procedure to turn a directed graph into an undirected one. We do this because it allows for the universal applicability of the algorithm, regardless direction.\nThe second step is about setting variables to their observed value. This is usually needed when we want to calculate conditional probabilities, so we fix the value of the random variables we condition on. Those variables are also said to be clamped to their particular value.\nThe third step is about graphs that are not already chordal, and is the first essential step of the algorithm. It makes use of the following theorem:[1]\nTheorem: For an undirected graph, G, the following properties are equivalent:\nThus, by triangulating a graph, we make sure that the corresponding junction tree exists. A usual way to do this, is to decide an elimination order for its nodes, and then run the Variable elimination algorithm. This will result to adding more edges to the initial graph, in such a way that the output will be a chordal graph. The next step is to construct the junction tree. To do so, we use the graph from the previous step, and form its corresponding clique graph.[2] Now the next theorem gives us a way to find a junction tree:[1]\nTheorem: Given a triangulated graph, weight the edges of the clique graph by the cardinality, |A\u2229B|, of the intersection of the adjacent cliques A and B. Then any maximum-weight spanning tree of the clique graph is a junction tree.\nSo, to construct a junction tree we just have to extract a maximum weight spanning tree out of the clique graph. This can be efficiently done by, for example, modifying Kruskal's algorithm. The last step is to apply belief propagation to the obtained junction tree.[3]\n", 
    "dbpedia_url": "http://dbpedia.org/resource/Junction_tree_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Junction_tree_algorithm\n"
}