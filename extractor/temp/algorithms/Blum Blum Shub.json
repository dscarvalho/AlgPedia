{
    "about": "Blum Blum Shub (B.B.S.) is a pseudorandom number generator proposed in 1986 by Lenore Blum, Manuel Blum and Michael Shub[1] that is derived from Michael O. Rabin's oblivious transfer mapping.", 
    "name": "Blum Blum Shub", 
    "classification": "Pseudorandom Number Generators", 
    "full_text": "Blum Blum Shub (B.B.S.) is a pseudorandom number generator proposed in 1986 by Lenore Blum, Manuel Blum and Michael Shub[1] that is derived from Michael O. Rabin's oblivious transfer mapping.\nBlum Blum Shub takes the form\nwhere M = pq is the product of two large primes p and q. At each step of the algorithm, some output is derived from xn+1; the output is commonly either the bit parity of xn+1 or one or more of the least significant bits of xn+1.\nThe seed x0 should be an integer that is co-prime to M (i.e. p and q are not factors of x0) and not 1 or 0.\nThe two primes, p and q, should both be congruent to 3 (mod 4) (this guarantees that each quadratic residue has one square root which is also a quadratic residue) and gcd(\u03c6(p \u2212 1), \u03c6(q \u2212 1)) should be small (this makes the cycle length large).\nAn interesting characteristic of the Blum Blum Shub generator is the possibility to calculate any xi value directly (via Euler's theorem):\nwhere \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n is the Carmichael function. (Here we have \n\n\n\n\u03bb\n(\nM\n)\n=\n\u03bb\n(\np\n\u22c5\nq\n)\n=\nlcm\n\u2061\n(\np\n\u2212\n1\n,\nq\n\u2212\n1\n)\n\n\n{\\displaystyle \\lambda (M)=\\lambda (p\\cdot q)=\\operatorname {lcm} (p-1,q-1)}\n\n).\n\n\nThere is a proof reducing its security to the computational difficulty of solving the quadratic residuosity problem.[1] When the primes are chosen appropriately, and O(log log M) lower-order bits of each xn are output, then in the limit as M grows large, distinguishing the output bits from random should be at least as difficult as solving the Quadratic residuosity problem modulo M.\nLet \n\n\n\np\n=\n11\n\n\n{\\displaystyle p=11}\n\n, \n\n\n\nq\n=\n19\n\n\n{\\displaystyle q=19}\n\n and \n\n\n\ns\n=\n3\n\n\n{\\displaystyle s=3}\n\n (where \n\n\n\ns\n\n\n{\\displaystyle s}\n\n is the seed). We can expect to get a large cycle length for those small numbers, because \n\n\n\n\n\ng\nc\nd\n\n\n(\n\u03c6\n(\np\n\u2212\n1\n)\n,\n\u03c6\n(\nq\n\u2212\n1\n)\n)\n=\n2\n\n\n{\\displaystyle {\\rm {gcd}}(\\varphi (p-1),\\varphi (q-1))=2}\n\n. The generator starts to evaluate \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n by using \n\n\n\n\nx\n\n\u2212\n1\n\n\n=\ns\n\n\n{\\displaystyle x_{-1}=s}\n\n and creates the sequence \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n, \n\n\n\n\nx\n\n1\n\n\n\n\n{\\displaystyle x_{1}}\n\n, \n\n\n\n\nx\n\n2\n\n\n\n\n{\\displaystyle x_{2}}\n\n, \n\n\n\n\u2026\n\n\n{\\displaystyle \\ldots }\n\n \n\n\n\n\nx\n\n5\n\n\n\n\n{\\displaystyle x_{5}}\n\n = 9, 81, 82, 36, 42, 92. The following table shows the output (in bits) for the different bit selection methods used to determine the output.", 
    "dbpedia_url": "http://dbpedia.org/resource/Blum_Blum_Shub", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Blum_Blum_Shub\n"
}