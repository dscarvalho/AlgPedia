{
    "about": "In quantum computing, the quantum Fourier transform is a linear transformation on quantum bits, and is the quantum analogue of the discrete Fourier transform. The quantum Fourier transform is a part of many quantum algorithms, notably Shor's algorithm for factoring and computing the discrete logarithm, the quantum phase estimation algorithm for estimating the eigenvalues of a unitary operator, and algorithms for the hidden subgroup problem.", 
    "name": "Quantum Fourier Transform", 
    "classification": "Quantum Algorithms", 
    "full_text": "In quantum computing, the quantum Fourier transform is a linear transformation on quantum bits, and is the quantum analogue of the discrete Fourier transform. The quantum Fourier transform is a part of many quantum algorithms, notably Shor's algorithm for factoring and computing the discrete logarithm, the quantum phase estimation algorithm for estimating the eigenvalues of a unitary operator, and algorithms for the hidden subgroup problem.\nThe quantum Fourier transform can be performed efficiently on a quantum computer, with a particular decomposition into a product of simpler unitary matrices. Using a simple decomposition, the discrete Fourier transform on \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n amplitudes can be implemented as a quantum circuit consisting of only \n\n\n\nO\n(\n\nn\n\n2\n\n\n)\n\n\n{\\displaystyle O(n^{2})}\n\n Hadamard gates and controlled phase shift gates, where \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the number of qubits.[1] This can be compared with the classical discrete Fourier transform, which takes \n\n\n\nO\n(\nn\n\n2\n\nn\n\n\n)\n\n\n{\\displaystyle O(n2^{n})}\n\n gates (where \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the number of bits), which is exponentially more than \n\n\n\nO\n(\n\nn\n\n2\n\n\n)\n\n\n{\\displaystyle O(n^{2})}\n\n. However, the quantum Fourier transform acts on a quantum state, whereas the classical Fourier transform acts on a vector, so not every task that uses the classical Fourier transform can take advantage of this exponential speedup.\nThe best quantum Fourier transform algorithms known today require only \n\n\n\nO\n(\nn\nlog\n\u2061\nn\n)\n\n\n{\\displaystyle O(n\\log n)}\n\n gates to achieve an efficient approximation.[2]\n\n\nThe quantum Fourier transform is the classical discrete Fourier transform applied to the vector of amplitudes of a quantum state. The classical (unitary) Fourier transform acts on a vector (x0, ..., xN\u22121) in \n\n\n\n\n\nC\n\n\nN\n\n\n\n\n{\\displaystyle \\mathbb {C} ^{N}}\n\n and maps it to the vector (y0, ..., yN\u22121) according to the formula\nwhere \n\n\n\n\n\u03c9\n\nj\nk\n\n\n=\n\ne\n\n2\n\u03c0\ni\n\n\n\nj\n\nk\n\nN\n\n\n\n\n\n\n{\\displaystyle \\omega ^{jk}=e^{2\\pi i{\\frac {j\\,k}{N}}}}\n\n is a Nth root of unity.\nSimilarly, the quantum Fourier transform acts on a quantum state \n\n\n\n\n\u2211\n\ni\n=\n0\n\n\nN\n\u2212\n1\n\n\n\nx\n\ni\n\n\n\n|\n\ni\n\u27e9\n\n\n{\\displaystyle \\sum _{i=0}^{N-1}x_{i}|i\\rangle }\n\n and maps it to a quantum state \n\n\n\n\n\u2211\n\ni\n=\n0\n\n\nN\n\u2212\n1\n\n\n\ny\n\ni\n\n\n\n|\n\ni\n\u27e9\n\n\n{\\displaystyle \\sum _{i=0}^{N-1}y_{i}|i\\rangle }\n\n according to the formula:\nwith \n\n\n\n\n\u03c9\n\nj\nk\n\n\n\n\n{\\displaystyle \\omega ^{jk}}\n\n defined as above.\nThis can also be expressed as the map\nEquivalently, the quantum Fourier transform can be viewed as a unitary matrix (quantum gate, similar to a logic gate for classical computers) acting on quantum state vectors, where the unitary matrix \n\n\n\n\nF\n\nN\n\n\n\n\n{\\displaystyle F_{N}}\n\n is given by\nHere \n\n\n\n\u03c9\n=\n\ne\n\n\n\n2\n\u03c0\ni\n\nN\n\n\n\n\n\n{\\displaystyle \\omega =e^{\\frac {2\\pi i}{N}}}\n\n is a primitive Nth root of unity. For example, in the case of \n\n\n\nN\n=\n4\n\n\n{\\displaystyle N=4}\n\n we would find that \n\n\n\n\u03c9\n=\ni\n\n\n{\\displaystyle \\omega =i}\n\n, so\n\nMost of the properties of the quantum Fourier transform follow from the fact that it is a unitary transformation. This can be checked by performing matrix multiplication and ensuring that the relation \n\n\n\nF\n\nF\n\n\u2020\n\n\n=\n\nF\n\n\u2020\n\n\nF\n=\nI\n\n\n{\\displaystyle FF^{\\dagger }=F^{\\dagger }F=I}\n\n holds, where \n\n\n\n\nF\n\n\u2020\n\n\n\n\n{\\displaystyle F^{\\dagger }}\n\n is the Hermitian adjoint of \n\n\n\nF\n\n\n{\\displaystyle F}\n\n. Alternately, one can check that vectors of norm 1 get mapped to vectors of norm 1.\nFrom the unitary property it follows that the inverse of the quantum Fourier transform is the Hermitian adjoint of the Fourier matrix, thus \n\n\n\n\nF\n\n\u2212\n1\n\n\n=\n\nF\n\n\u2020\n\n\n\n\n{\\displaystyle F^{-1}=F^{\\dagger }}\n\n. Since there is an efficient quantum circuit implementing the quantum Fourier transform, the circuit can be run in reverse to perform the inverse quantum Fourier transform. Thus both transforms can be efficiently performed on a quantum computer.\nThe quantum Fourier transform can be approximately implemented for any N; however, the implementation for the case where N is a power of 2 is much simpler. Suppose N = 2n. We have the orthonormal basis consisting of the vectors\nThe basis states enumerate all the possible states of the qubits:\nwhere, with tensor product notation \n\n\n\n\u2297\n\n\n{\\displaystyle \\otimes }\n\n, \n\n\n\n\n|\n\n\nx\n\nj\n\n\n\u27e9\n\n\n{\\displaystyle |x_{j}\\rangle }\n\n indicates that qubit \n\n\n\nj\n\n\n{\\displaystyle j}\n\n is in state \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n, with \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n either 0 or 1. By convention, the basis state index \n\n\n\nx\n\n\n{\\displaystyle x}\n\n orders the possible states of the qubits lexicographically, i.e., by converting from binary to decimal in this way:\nIt is also useful to borrow fractional binary notation:\nFor instance, \n\n\n\n[\n0.\n\nx\n\n1\n\n\n]\n=\n\n\n\nx\n\n1\n\n\n2\n\n\n\n\n{\\displaystyle [0.x_{1}]={\\frac {x_{1}}{2}}}\n\n and \n\n\n\n[\n0.\n\nx\n\n1\n\n\n\nx\n\n2\n\n\n]\n=\n\n\n\nx\n\n1\n\n\n2\n\n\n+\n\n\n\nx\n\n2\n\n\n\n2\n\n2\n\n\n\n\n.\n\n\n{\\displaystyle [0.x_{1}x_{2}]={\\frac {x_{1}}{2}}+{\\frac {x_{2}}{2^{2}}}.}\n\n\nWith this notation, the action of the quantum Fourier transform can be expressed as:\nwhere the output qubit 1 is in a superposition of state \n\n\n\n\n|\n\n0\n\u27e9\n\n\n{\\displaystyle |0\\rangle }\n\n and \n\n\n\n\ne\n\n2\n\u03c0\ni\n\n[\n0.\n\nx\n\nn\n\n\n]\n\n\n\n|\n\n1\n\u27e9\n\n\n{\\displaystyle e^{2\\pi i\\,[0.x_{n}]}|1\\rangle }\n\n, and so on for the other qubits.\nIn other words, the discrete Fourier transform, an operation on n-qubits, can be factored into the tensor product of n single-qubit operations, suggesting it is easily represented as a quantum circuit. In fact, each of those single-qubit operations can be implemented efficiently using a Hadamard gate and controlled phase gates. The first term requires one Hadamard gate, the next one requires a Hadamard gate and a controlled phase gate, and each following term requires an additional controlled phase gate. Summing up the number of gates gives \n\n\n\n1\n+\n2\n+\n\u22ef\n+\nn\n=\nn\n(\nn\n+\n1\n)\n\n/\n\n2\n=\nO\n(\n\nn\n\n2\n\n\n)\n\n\n{\\displaystyle 1+2+\\cdots +n=n(n+1)/2=O(n^{2})}\n\n gates, which is polynomial in the number of qubits.\nConsider the quantum Fourier transform on 3 qubits. It is the following transformation:\nwhere \n\n\n\n\u03c9\n\n\n{\\displaystyle \\omega }\n\n is a primitive eighth root of unity satisfying \n\n\n\n\n\u03c9\n\n8\n\n\n=\n\n\n(\n\ne\n\n\n\n2\n\u03c0\ni\n\n8\n\n\n\n)\n\n\n8\n\n\n=\n1\n\n\n{\\displaystyle \\omega ^{8}=\\left(e^{\\frac {2\\pi i}{8}}\\right)^{8}=1}\n\n (since \n\n\n\nN\n=\n\n2\n\n3\n\n\n=\n8\n\n\n{\\displaystyle N=2^{3}=8}\n\n).\nThe matrix representing this transformation on 3 qubits is\nThe 3-qubit quantum Fourier transform is the following operation:\nThis quantum circuit implements the quantum Fourier transform on the quantum state \n\n\n\n\n|\n\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\nx\n\n3\n\n\n\u27e9\n\n\n{\\displaystyle |x_{1},x_{2},x_{3}\\rangle }\n\n.\n\nThe quantum gates used in the circuit above are the Hadamard gate and the controlled phase gate \n\n\n\n\nR\n\n\u03b8\n\n\n\n\n{\\displaystyle R_{\\theta }}\n\n.\nAs calculated above, the number of gates used is \n\n\n\nn\n(\nn\n+\n1\n)\n\n/\n\n2\n\n\n{\\displaystyle n(n+1)/2}\n\n which is equal to 6, for\u00a0n\u00a0=\u00a03.", 
    "dbpedia_url": "http://dbpedia.org/resource/Quantum_Fourier_transform", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Quantum_Fourier_transform\n"
}