{
    "about": "Semidefinite embedding (SDE) or maximum variance unfolding (MVU) is an algorithm in computer science that uses semidefinite programming to perform non-linear dimensionality reduction of high-dimensional vectorial input data. MVU can be viewed as a non-linear generalization of Principal component analysis.", 
    "name": "Semidefinite Embedding", 
    "classification": "Computational Statistics", 
    "full_text": "Semidefinite embedding (SDE) or maximum variance unfolding (MVU) is an algorithm in computer science that uses semidefinite programming to perform non-linear dimensionality reduction of high-dimensional vectorial input data. MVU can be viewed as a non-linear generalization of Principal component analysis.\nNon-linear dimensionality reduction algorithms attempt to map high-dimensional data onto a low-dimensional Euclidean vector space. Maximum variance Unfolding is a member of the manifold learning family, which also include algorithms such as isomap and locally linear embedding. In manifold learning, the input data is assumed to be sampled from a low dimensional manifold that is embedded inside of a higher-dimensional vector space. The main intuition behind MVU is to exploit the local linearity of manifolds and create a mapping that preserves local neighbourhoods at every point of the underlying manifold.\nMVU creates a mapping from the high dimensional input vectors to some low dimensional Euclidean vector space in the following steps:\nA neighbourhood graph is created. Each input is connected with its k-nearest input vectors (according to Euclidean distance metric) and all k-nearest neighbors are connected with each other. If the data is sampled well enough, the resulting graph is a discrete approximation of the underlying manifold.\nThe neighbourhood graph is \"unfolded\" with the help of semidefinite programming. Instead of learning the output vectors directly, the semidefinite programming aims to find an inner product matrix that maximizes the pairwise distances between any two inputs that are not connected in the neighbourhood graph while preserving the nearest neighbors distances.\nThe low-dimensional embedding is finally obtained by application of multidimensional scaling on the learned inner product matrix.\nThe steps of applying semidefinite programming followed by a linear dimensionality reduction step to recover a low-dimensional embedding into a Euclidean space were first proposed by Linial, London, and Rabinovich.\n\n\nLet \n\n\n\nX\n\n\n\n\n{\\displaystyle X\\,\\!}\n\n be the original input and \n\n\n\nY\n\n\n\n\n{\\displaystyle Y\\,\\!}\n\n be the embedding. If \n\n\n\ni\n,\nj\n\n\n\n\n{\\displaystyle i,j\\,\\!}\n\n are two neighbors, then the local isometry constraint that needs to be satisfied is:\nLet \n\n\n\nG\n,\nK\n\n\n\n\n{\\displaystyle G,K\\,\\!}\n\n be the Gram matrices of \n\n\n\nX\n\n\n\n\n{\\displaystyle X\\,\\!}\n\n and \n\n\n\nY\n\n\n\n\n{\\displaystyle Y\\,\\!}\n\n (i.e.: \n\n\n\n\nG\n\ni\nj\n\n\n=\n\nX\n\ni\n\n\n\u22c5\n\nX\n\nj\n\n\n,\n\nK\n\ni\nj\n\n\n=\n\nY\n\ni\n\n\n\u22c5\n\nY\n\nj\n\n\n\n\n\n\n{\\displaystyle G_{ij}=X_{i}\\cdot X_{j},K_{ij}=Y_{i}\\cdot Y_{j}\\,\\!}\n\n). We can express the above constraint for every neighbor points \n\n\n\ni\n,\nj\n\n\n\n\n{\\displaystyle i,j\\,\\!}\n\n in term of \n\n\n\nG\n,\nK\n\n\n\n\n{\\displaystyle G,K\\,\\!}\n\n:\nIn addition, we also want to constrain the embedding \n\n\n\nY\n\n\n\n\n{\\displaystyle Y\\,\\!}\n\n to center at the origin:\n\n\n\n\n\n\u2211\n\ni\n\n\n\nY\n\ni\n\n\n=\n0\n\u21d4\n(\n\n\u2211\n\ni\n\n\n\nY\n\ni\n\n\n)\n\u22c5\n(\n\n\u2211\n\ni\n\n\n\nY\n\ni\n\n\n)\n=\n0\n\u21d4\n\n\u2211\n\ni\n,\nj\n\n\n\nY\n\ni\n\n\n\u22c5\n\nY\n\nj\n\n\n=\n0\n\u21d4\n\n\u2211\n\ni\n,\nj\n\n\n\nK\n\ni\nj\n\n\n=\n0\n\n\n{\\displaystyle \\sum _{i}Y_{i}=0\\Leftrightarrow (\\sum _{i}Y_{i})\\cdot (\\sum _{i}Y_{i})=0\\Leftrightarrow \\sum _{i,j}Y_{i}\\cdot Y_{j}=0\\Leftrightarrow \\sum _{i,j}K_{ij}=0}\n\n\nAs described above, except the distances of neighbor points are preserved, the algorithm aims to maximize the pairwise distance of every pair of points. The objective function to be maximized is:\n\n\n\n\nT\n(\nY\n)\n=\n\n\n\n1\n\n2\nN\n\n\n\n\n\n\u2211\n\ni\n,\nj\n\n\n\n|\n\n\nY\n\ni\n\n\n\u2212\n\nY\n\nj\n\n\n\n\n|\n\n\n2\n\n\n\n\n{\\displaystyle T(Y)={\\dfrac {1}{2N}}\\sum _{i,j}|Y_{i}-Y_{j}|^{2}}\n\n\nIntuitively, maximizing the function above is equivalent to pulling the points as far away from each other as possible and therefore \"unfold\" the manifold. The local isometry constraint prevents the objective function from going to infinity. Proof:\nLet \n\n\n\n\u03c4\n=\nm\na\nx\n{\n\n\u03b7\n\ni\nj\n\n\n\n|\n\n\nY\n\ni\n\n\n\u2212\n\nY\n\nj\n\n\n\n\n|\n\n\n2\n\n\n}\n\n\n\n\n{\\displaystyle \\tau =max\\{\\eta _{ij}|Y_{i}-Y_{j}|^{2}\\}\\,\\!}\n\n where \n\n\n\n\n\u03b7\n\ni\nj\n\n\n=\n1\n\n\n\n\n{\\displaystyle \\eta _{ij}=1\\,\\!}\n\n if i and j are neighbors and \n\n\n\n\n\u03b7\n\ni\nj\n\n\n=\n0\n\n\n\n\n{\\displaystyle \\eta _{ij}=0\\,\\!}\n\n otherwise.\nSince the graph has N points, the distance between any two points \n\n\n\n\n|\n\n\nY\n\ni\n\n\n\u2212\n\nY\n\nj\n\n\n\n\n|\n\n\n2\n\n\n\u2264\nN\n\u03c4\n\n\n\n\n{\\displaystyle |Y_{i}-Y_{j}|^{2}\\leq N\\tau \\,\\!}\n\n. We can then bound the objective function as follow:\nThe objective function can be rewritten purely in the form of the Gram matrix:\nFinally, the optimization can be formulated as:\nMaximize \n\n\n\nT\nr\n(\nK\n)\n\n\n\n\n{\\displaystyle Tr(K)\\,\\!}\n\n\nSubject to \n\n\n\nK\n\u2ab0\n0\n\n\n\n\n{\\displaystyle K\\succeq 0\\,\\!}\n\n and \n\n\n\n\u2200\ni\n,\nj\n\n\n\n\n{\\displaystyle \\forall i,j\\,\\!}\n\n where \n\n\n\n\n\u03b7\n\ni\nj\n\n\n=\n1\n,\n\nG\n\ni\ni\n\n\n+\n\nG\n\nj\nj\n\n\n\u2212\n\nG\n\ni\nj\n\n\n\u2212\n\nG\n\nj\ni\n\n\n=\n\nK\n\ni\ni\n\n\n+\n\nK\n\nj\nj\n\n\n\u2212\n\nK\n\ni\nj\n\n\n\u2212\n\nK\n\nj\ni\n\n\n\n\n\n\n{\\displaystyle \\eta _{ij}=1,G_{ii}+G_{jj}-G_{ij}-G_{ji}=K_{ii}+K_{jj}-K_{ij}-K_{ji}\\,\\!}\n\n\nAfter the Gram matrix \n\n\n\nK\n\n\n\n\n{\\displaystyle K\\,\\!}\n\n is learned by semidefinite programming, the output \n\n\n\nY\n\n\n\n\n{\\displaystyle Y\\,\\!}\n\n can be obtained via Cholesky decomposition. In particular, the Gram matrix can be written as \n\n\n\n\nK\n\ni\nj\n\n\n=\n\n\u2211\n\n\u03b1\n=\n1\n\n\nN\n\n\n(\n\n\u03bb\n\n\u03b1\n\n\n\nV\n\n\u03b1\ni\n\n\n\nV\n\n\u03b1\nj\n\n\n)\n\n\n\n\n{\\displaystyle K_{ij}=\\sum _{\\alpha =1}^{N}(\\lambda _{\\alpha }V_{\\alpha i}V_{\\alpha j})\\,\\!}\n\n where \n\n\n\n\nV\n\n\u03b1\ni\n\n\n\n\n\n\n{\\displaystyle V_{\\alpha i}\\,\\!}\n\n is the i-th element of eigenvector \n\n\n\n\nV\n\n\u03b1\n\n\n\n\n\n\n{\\displaystyle V_{\\alpha }\\,\\!}\n\n of the eigenvalue \n\n\n\n\n\u03bb\n\n\u03b1\n\n\n\n\n\n\n{\\displaystyle \\lambda _{\\alpha }\\,\\!}\n\n.\nIt follows that the \n\n\n\n\u03b1\n\n\n\n\n{\\displaystyle \\alpha \\,\\!}\n\n-th element of the output \n\n\n\n\nY\n\ni\n\n\n\n\n\n\n{\\displaystyle Y_{i}\\,\\!}\n\n is \n\n\n\n\n\n\n\u03bb\n\n\u03b1\n\n\n\n\n\nV\n\n\u03b1\ni\n\n\n\n\n\n\n{\\displaystyle {\\sqrt {\\lambda _{\\alpha }}}V_{\\alpha i}\\,\\!}\n\n.", 
    "dbpedia_url": "http://dbpedia.org/resource/Semidefinite_embedding", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Semidefinite_embedding\n"
}