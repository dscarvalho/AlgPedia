{
    "about": "Cell lists (also sometimes referred to as cell linked-lists) are a tool for finding all atom pairs within a given cut-off distance of each other in molecular dynamics simulations. These pairs are needed to compute the short-range non-bonded interactions in a system, such as Van der Waals forces or the short-range part of the electrostatic interaction when using Ewald summation.", 
    "name": "Cell Lists", 
    "classification": "Computational Physics", 
    "full_text": "Cell lists (also sometimes referred to as cell linked-lists) are a tool for finding all atom pairs within a given cut-off distance of each other in molecular dynamics simulations. These pairs are needed to compute the short-range non-bonded interactions in a system, such as Van der Waals forces or the short-range part of the electrostatic interaction when using Ewald summation.\n\n\nCell lists work by subdividing the simulation domain into cells with an edge length greater than or equal to the cut-off radius of the interaction to be computed. The particles are sorted into these cells and the interactions are computed between particles in the same or neighbouring cells.\nIn its most basic form, the non-bonded interactions for a cut-off distance \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n are computed as follows:\nSince the cell length is at least \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n in all dimensions, no particles within \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n of each other can be missed.\nGiven a simulation with \n\n\n\nN\n\n\n{\\displaystyle N}\n\n particles with a homogeneous particle density, the number of cells \n\n\n\nm\n\n\n{\\displaystyle m}\n\n is proportional to \n\n\n\nN\n\n\n{\\displaystyle N}\n\n and inversely proportional to the cut-off radius (i.e. if \n\n\n\nN\n\n\n{\\displaystyle N}\n\n increases, so does the number of cells). The average number of particles per cell \n\n\n\n\n\nc\n\u00af\n\n\n=\nN\n\n/\n\nm\n\n\n{\\displaystyle {\\overline {c}}=N/m}\n\n therefore does not depend on the total number of particles. The cost of interacting two cells is in \n\n\n\n\n\nO\n\n\n(\n\n\n\nc\n\u00af\n\n\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {O}}({\\overline {c}}^{2})}\n\n. The number of cell pairs is proportional to the number of cells which is again proportional to the number of particles \n\n\n\nN\n\n\n{\\displaystyle N}\n\n. The total cost of finding all pairwise distances within a given cut-off is in \n\n\n\n\n\nO\n\n\n(\nN\nc\n)\n\u2208\n\n\nO\n\n\n(\nN\n)\n\n\n{\\displaystyle {\\mathcal {O}}(Nc)\\in {\\mathcal {O}}(N)}\n\n, which is significantly better than computing the \n\n\n\n\n\nO\n\n\n(\n\nN\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {O}}(N^{2})}\n\n pairwise distances naively.\nIn most simulations, periodic boundary conditions are used to avoid imposing artificial boundary conditions. Using cell lists, these boundaries can be implemented in two ways.\nIn the ghost cells approach, the simulation box is wrapped in an additional layer of cells. These cells contain periodically wrapped copies of the corresponding simulation cells inside the domain.\nAlthough the data\u2014and usually also the computational cost\u2014is doubled for interactions over the periodic boundary, this approach has the advantage of being straightforward to implement and very easy to parallelize, since cells will only interact with their geographical neighbours.\nInstead of creating ghost cells, cell pairs that interact over a periodic boundary can also use a periodic correction vector \n\n\n\n\n\nq\n\n\n\u03b1\n\u03b2\n\n\n\n\n{\\displaystyle \\mathbf {q} _{\\alpha \\beta }}\n\n. This vector, which can be stored or computed for every cell pair \n\n\n\n(\n\nC\n\n\u03b1\n\n\n,\n\nC\n\n\u03b2\n\n\n)\n\n\n{\\displaystyle (C_{\\alpha },C_{\\beta })}\n\n, contains the correction which needs to be applied to \"wrap\" one cell around the domain to neighbour the other. The pairwise distance between two particles \n\n\n\n\np\n\n\u03b1\n\n\n\u2208\n\nC\n\n\u03b1\n\n\n\n\n{\\displaystyle p_{\\alpha }\\in C_{\\alpha }}\n\n and \n\n\n\n\np\n\n\u03b2\n\n\n\u2208\n\nC\n\n\u03b2\n\n\n\n\n{\\displaystyle p_{\\beta }\\in C_{\\beta }}\n\n is then computed as\nThis approach, although more efficient than using ghost cells, is less straightforward to implement (the cell pairs need to be identified over the periodic boundaries and the vector \n\n\n\n\n\nq\n\n\n\u03b1\n\u03b2\n\n\n\n\n{\\displaystyle \\mathbf {q} _{\\alpha \\beta }}\n\n needs to be computed/stored).\nDespite reducing the computational cost of finding all pairs within a given cut-off distance from \n\n\n\n\n\nO\n\n\n(\n\nN\n\n2\n\n\n)\n\n\n{\\displaystyle {\\mathcal {O}}(N^{2})}\n\n to \n\n\n\n\n\nO\n\n\n(\nN\n)\n\n\n{\\displaystyle {\\mathcal {O}}(N)}\n\n, the cell list algorithm listed above still has some inefficiencies.\nConsider a computational cell with edge length equal to the cut-off radius \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n. The pairwise distance between all particles in the cell and in one of the neighbouring cells is computed. The cell has 26 neighbours: 6 sharing a common face, 12 sharing a common edge and 8 sharing a common corner. Of all the pairwise distances computed, only about 16% will actually be less than or equal to \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n. In other words, 84% of all pairwise distance computations are spurious.\nOne way of overcoming this inefficiency is to partition the domain into cells of edge length smaller than \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n. The pairwise interactions are then not just computed between neighboring cells, but between all cells within \n\n\n\n\nr\n\nc\n\n\n\n\n{\\displaystyle r_{c}}\n\n of each other (first suggested in [1] and implemented and analysed in [2][3] and [4]). This approach can be taken to the limit wherein each cell holds at most one single particle, therefore reducing the number of spurious pairwise distance evaluations to zero. This gain in efficiency, however, is quickly offset by the number of cells \n\n\n\n\nC\n\n\u03b2\n\n\n\n\n{\\displaystyle C_{\\beta }}\n\n that need to be inspected for every interaction with a cell \n\n\n\n\nC\n\n\u03b1\n\n\n\n\n{\\displaystyle C_{\\alpha }}\n\n, which, for example in three dimensions, grows cubically with the inverse of the cell edge length. Setting the edge length to \n\n\n\n\nr\n\nc\n\n\n\n/\n\n2\n\n\n{\\displaystyle r_{c}/2}\n\n, however, already reduces the number of spurious distance evaluations to 63%.\nAnother approach is outlined and tested in Gonnet,[5] in which the particles are first sorted along the axis connecting the cell centers. This approach generates only about 40% spurious pairwise distance computations, yet carries an additional cost due to sorting the particles.", 
    "dbpedia_url": "http://dbpedia.org/resource/Cell_lists", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Cell_lists\n"
}