{
    "about": "Multiple kernel learning refers to a set of machine learning methods that use a predefined set of kernels and learn an optimal linear or non-linear combination of kernels as part of the algorithm. Reasons to use multiple kernel learning include a) the ability to select for an optimal kernel and parameters from a larger set of kernels, reducing bias due to kernel selection while allowing for more automated machine learning methods, and b) combining data from different sources (e.g. sound and images from a video) that have different notions of similarity and thus require different kernels. Instead of creating a new kernel, multiple kernel algorithms can be used to combine kernels already established for each individual data source.", 
    "name": "Multiple Kernel Learning", 
    "classification": "Machine Learning Algorithms", 
    "full_text": "Multiple kernel learning refers to a set of machine learning methods that use a predefined set of kernels and learn an optimal linear or non-linear combination of kernels as part of the algorithm. Reasons to use multiple kernel learning include a) the ability to select for an optimal kernel and parameters from a larger set of kernels, reducing bias due to kernel selection while allowing for more automated machine learning methods, and b) combining data from different sources (e.g. sound and images from a video) that have different notions of similarity and thus require different kernels. Instead of creating a new kernel, multiple kernel algorithms can be used to combine kernels already established for each individual data source.\nMultiple kernel learning approaches have been used in many applications, such as event recognition in video,[1] object recognition in images,[2] and biomedical data fusion.[3]\n\n\nMultiple kernel learning algorithms have been developed for supervised, semi-supervised, as well as unsupervised learning. Most work has been done on the supervised learning case with linear combinations of kernels, however, many algorithms have been developed. The basic idea behind multiple kernel learning algorithms is to add an extra parameter to the minimization problem of the learning algorithm. As an example, consider the case of supervised learning of a linear combination of a set of \n\n\n\nn\n\n\n{\\displaystyle n}\n\n kernels \n\n\n\nK\n\n\n{\\displaystyle K}\n\n. We introduce a new kernel \n\n\n\n\nK\n\u2032\n\n=\n\n\u2211\n\ni\n=\n1\n\n\nn\n\n\n\n\u03b2\n\ni\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K'=\\sum _{i=1}^{n}\\beta _{i}K_{i}}\n\n, where \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\n is a vector of coefficients for each kernel. Because the kernels are additive (due to properties of reproducing kernel Hilbert spaces), this new function is still a kernel. For a set of data \n\n\n\nX\n\n\n{\\displaystyle X}\n\n with labels \n\n\n\nY\n\n\n{\\displaystyle Y}\n\n, the minimization problem can then be written as\nwhere \n\n\n\n\nE\n\n\n\n{\\displaystyle \\mathrm {E} }\n\n is an error function and \n\n\n\nR\n\n\n{\\displaystyle R}\n\n is a regularization term. \n\n\n\n\nE\n\n\n\n{\\displaystyle \\mathrm {E} }\n\n is typically the square loss function (Tikhonov regularization) or the hinge loss function (for SVM algorithms), and \n\n\n\nR\n\n\n{\\displaystyle R}\n\n is usually an \n\n\n\n\n\u2113\n\nn\n\n\n\n\n{\\displaystyle \\ell _{n}}\n\n norm or some combination of the norms (i.e. elastic net regularization). This optimization problem can then be solved by standard optimization methods. Adaptations of existing techniques such as the Sequential Minimal Optimization have also been developed for multiple kernel SVM-based methods.[4]\nFor supervised learning, there are many other algorithms that use different methods to learn the form of the kernel. The following categorization has been proposed by Gonen and Alpayd\u0131n (2011)[5]\nFixed rules approaches such as the linear combination algorithm described above use rules to set the combination of the kernels. These do not require parameterization and use rules like summation and multiplication to combine the kernels. The weighting is learned in the algorithm. Other examples of fixed rules include pairwise kernels, which are of the form\nThese pairwise approaches have been used in predicting protein-protein interactions.[6]\nThese algorithms use a combination function that is parameterized. The parameters are generally defined for each individual kernel based on single-kernel performance or some computation from the kernel matrix. Examples of these include the kernel from Tenabe et al. (2008).[7] Letting \n\n\n\n\n\u03c0\n\nm\n\n\n\n\n{\\displaystyle \\pi _{m}}\n\n be the accuracy obtained using only \n\n\n\n\nK\n\nm\n\n\n\n\n{\\displaystyle K_{m}}\n\n, and letting \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n be a threshold less than the minimum of the single-kernel accuracies, we can define\nOther approaches use a definition of kernel similarity, such as\nUsing this measure, Qui and Lane (2009)[8] used the following heuristic to define\nThese approaches solve an optimization problem to determine parameters for the kernel combination function. This has been done with similarity measures and structural risk minimization approaches. For similarity measures such as the one defined above, the problem can be formulated as follows:[9]\nwhere \n\n\n\n\nK\n\nt\nr\na\n\n\u2032\n\n\n\n{\\displaystyle K'_{tra}}\n\n is the kernel of the training set.\nStructural risk minimization approaches that have been used include linear approaches, such as that used by Lanckriet et al. (2002).[10] We can define the implausibility of a kernel \n\n\n\n\u03c9\n(\nK\n)\n\n\n{\\displaystyle \\omega (K)}\n\n to be the value of the objective function after solving a canonical SVM problem. We can then solve the following minimization problem:\nwhere \n\n\n\nc\n\n\n{\\displaystyle c}\n\n is a positive constant. Many other variations exist on the same idea, with different methods of refining and solving the problem, e.g. with nonnegative weights for individual kernels and using non-linear combinations of kernels.\nBayesian approaches put priors on the kernel parameters and learn the parameter values from the priors and the base algorithm. For example, the decision function can be written as\n\n\n\n\n\u03b7\n\n\n{\\displaystyle \\eta }\n\n can be modeled with a Dirichlet prior and \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\n can be modeled with a zero-mean Gaussian and an inverse gamma variance prior. This model is then optimized using a customized multinomial probit approach with a Gibbs sampler.\n[11] These methods have been used successfully in applications such as protein fold recognition and protein homology problems [12][13]\nBoosting approaches add new kernels iteratively until some stopping criteria that is a function of performance is reached. An example of this is the MARK model developed by Bennett et al. (2002) [14]\nThe parameters \n\n\n\n\n\u03b1\n\ni\n\n\nm\n\n\n\n\n{\\displaystyle \\alpha _{i}^{m}}\n\n and \n\n\n\nb\n\n\n{\\displaystyle b}\n\n are learned by gradient descent on a coordinate basis. In this way, each iteration of the descent algorithm identifies the best kernel column to choose at each particular iteration and adds that to the combined kernel. The model is then rerun to generate the optimal weights \n\n\n\n\n\u03b1\n\ni\n\n\n\n\n{\\displaystyle \\alpha _{i}}\n\n and \n\n\n\nb\n\n\n{\\displaystyle b}\n\n.\nSemisupervised learning approaches to multiple kernel learning are similar to other extensions of supervised learning approaches. An inductive procedure has been developed that uses a log-likelihood empirical loss and group LASSO regularization with conditional expectation consensus on unlabeled data for image categorization. We can define the problem as follows. Let \n\n\n\nL\n=\n\n(\n\nx\n\ni\n\n\n,\n\ny\n\ni\n\n\n)\n\n\n\n{\\displaystyle L={(x_{i},y_{i})}}\n\n be the labeled data, and let \n\n\n\nU\n=\n\n\nx\n\ni\n\n\n\n\n\n{\\displaystyle U={x_{i}}}\n\n be the set of unlabeled data. Then, we can write the decision function as follows.\nThe problem can be written as\nwhere \n\n\n\nL\n\n\n{\\displaystyle L}\n\n is the loss function (weighted negative log-likelihood in this case), \n\n\n\nR\n\n\n{\\displaystyle R}\n\n is the regularization parameter (Group LASSO in this case), and \n\n\n\n\u0398\n\n\n{\\displaystyle \\Theta }\n\n is the conditional expectation consensus (CEC) penalty on unlabeled data. The CEC penalty is defined as follows. Let the marginal kernel density for all the data be\nwhere \n\n\n\n\n\u03c8\n\nm\n\n\n(\nx\n)\n=\n[\n\nK\n\nm\n\n\n(\n\nx\n\n1\n\n\n,\nx\n)\n,\n\u2026\n,\n\nK\n\nm\n\n\n(\n\nx\n\nL\n\n\n,\nx\n)\n\n]\n\nT\n\n\n\n\n{\\displaystyle \\psi _{m}(x)=[K_{m}(x_{1},x),\\ldots ,K_{m}(x_{L},x)]^{T}}\n\n (the kernel distance between the labeled data and all of the labeled and unlabeled data) and \n\n\n\n\n\u03d5\n\nm\n\n\n\u03c0\n\n\n\n\n{\\displaystyle \\phi _{m}^{\\pi }}\n\n is a non-negative random vector with a 2-norm of 1. The value of \n\n\n\n\u03a0\n\n\n{\\displaystyle \\Pi }\n\n is the number of times each kernel is projected. Expectation regularization is then performed on the MKD, resulting in a reference expectation \n\n\n\n\nq\n\nm\n\n\np\ni\n\n\n(\ny\n\n|\n\n\ng\n\nm\n\n\n\u03c0\n\n\n(\nx\n)\n)\n\n\n{\\displaystyle q_{m}^{pi}(y|g_{m}^{\\pi }(x))}\n\n and model expectation \n\n\n\n\np\n\nm\n\n\n\u03c0\n\n\n(\nf\n(\nx\n)\n\n|\n\n\ng\n\nm\n\n\n\u03c0\n\n\n(\nx\n)\n)\n\n\n{\\displaystyle p_{m}^{\\pi }(f(x)|g_{m}^{\\pi }(x))}\n\n. Then, we define\nwhere \n\n\n\nD\n(\nQ\n\n|\n\n\n|\n\nP\n)\n=\n\n\u2211\n\ni\n\n\nQ\n(\ni\n)\nln\n\u2061\n\n\n\nQ\n(\ni\n)\n\n\nP\n(\ni\n)\n\n\n\n\n\n{\\displaystyle D(Q||P)=\\sum _{i}Q(i)\\ln {\\frac {Q(i)}{P(i)}}}\n\n is the Kullback-Leibler divergence. The combined minimization problem is optimized using a modified block gradient descent algorithm. For more information, see Wang et al.[15]\nUnsupervised multiple kernel learning algorithms have also been proposed by Zhuang et al. The problem is defined as follows. Let \n\n\n\nU\n=\n\n\nx\n\ni\n\n\n\n\n\n{\\displaystyle U={x_{i}}}\n\n be a set of unlabeled data. The kernel definition is the linear combined kernel \n\n\n\n\nK\n\u2032\n\n=\n\n\u2211\n\ni\n=\n1\n\n\nM\n\n\n\n\u03b2\n\ni\n\n\n\nK\n\nm\n\n\n\n\n{\\displaystyle K'=\\sum _{i=1}^{M}\\beta _{i}K_{m}}\n\n. In this problem, the data needs to be \"clustered\" into groups based on the kernel distances. Let \n\n\n\n\nB\n\ni\n\n\n\n\n{\\displaystyle B_{i}}\n\n be a group or cluster of which \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n is a member. We define the loss function as \n\n\n\n\n\u2211\n\ni\n=\n1\n\n\nn\n\n\n\n\n\u2225\n\nx\n\ni\n\n\n\u2212\n\n\u2211\n\n\nx\n\nj\n\n\n\u2208\n\nB\n\ni\n\n\n\n\nK\n(\n\nx\n\ni\n\n\n,\n\nx\n\nj\n\n\n)\n\nx\n\nj\n\n\n\u2225\n\n\n2\n\n\n\n\n{\\displaystyle \\sum _{i=1}^{n}\\left\\Vert x_{i}-\\sum _{x_{j}\\in B_{i}}K(x_{i},x_{j})x_{j}\\right\\Vert ^{2}}\n\n. Furthermore, we minimize the distortion by minimizing \n\n\n\n\n\u2211\n\ni\n=\n1\n\n\nn\n\n\n\n\u2211\n\n\nx\n\nj\n\n\n\u2208\n\nB\n\ni\n\n\n\n\nK\n(\n\nx\n\ni\n\n\n,\n\nx\n\nj\n\n\n)\n\n\n\u2225\n\nx\n\ni\n\n\n\u2212\n\nx\n\nj\n\n\n\u2225\n\n\n2\n\n\n\n\n{\\displaystyle \\sum _{i=1}^{n}\\sum _{x_{j}\\in B_{i}}K(x_{i},x_{j})\\left\\Vert x_{i}-x_{j}\\right\\Vert ^{2}}\n\n. Finally, we add a regularization term to avoid overfitting. Combining these terms, we can write the minimization problem as follows.\nwhere . One formulation of this is defined as follows. Let \n\n\n\nD\n\u2208\n\n\n0\n,\n1\n\n\nn\n\u00d7\nn\n\n\n\n\n{\\displaystyle D\\in {0,1}^{n\\times n}}\n\n be a matrix such that \n\n\n\n\nD\n\ni\nj\n\n\n=\n1\n\n\n{\\displaystyle D_{ij}=1}\n\n means that \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n and \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n are neighbors. Then, \n\n\n\n\nB\n\ni\n\n\n=\n\n\nx\n\nj\n\n\n:\n\nD\n\ni\nj\n\n\n=\n1\n\n\n\n{\\displaystyle B_{i}={x_{j}:D_{ij}=1}}\n\n. Note that these groups must be learned as well. Zhuang et al. solve this problem by an alternating minimization method for \n\n\n\nK\n\n\n{\\displaystyle K}\n\n and the groups \n\n\n\n\nB\n\ni\n\n\n\n\n{\\displaystyle B_{i}}\n\n. For more information, see Zhuang et al.[16]\nAvailable MKL libraries include", 
    "dbpedia_url": "http://dbpedia.org/resource/Multiple_kernel_learning", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Multiple_kernel_learning\n"
}