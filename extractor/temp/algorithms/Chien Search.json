{
    "about": "In abstract algebra, the Chien search, named after Robert Tienwen Chien, is a fast algorithm for determining roots of polynomials defined over a finite field. Chien search is commonly used to find the roots of error-locator polynomials encountered in decoding Reed-Solomon codes and BCH codes.", 
    "name": "Chien Search", 
    "classification": "Error Detection And Correction", 
    "full_text": "In abstract algebra, the Chien search, named after Robert Tienwen Chien, is a fast algorithm for determining roots of polynomials defined over a finite field. Chien search is commonly used to find the roots of error-locator polynomials encountered in decoding Reed-Solomon codes and BCH codes.\nThe problem is to find the roots of the polynomial \u039b(x) (over the finite field GF(q)):\nThe roots may be found using brute force: there are a finite number of x, so the polynomial can be evaluated for each element xi. If the polynomial evaluates to zero, then that element is a root.\nFor the trivial case x\u00a0=\u00a00, only the coefficient \u03bb0 need be tested for zero. Below, the only concern will be for non-zero xi.\nA straightforward evaluation of the polynomial involves O(t2) general multiplications and O(t) additions. A more efficient scheme would use Horner's method for O(t) general multiplications and O(t) additions. Both of these approaches may evaluate the elements of the finite field in any order.\nChien search improves upon the above by selecting a specific order for the non-zero elements. In particular, the finite field has a (constant) generator element \u03b1. Chien tests the elements in the generator's order \u03b11, \u03b12, \u03b13, ..... Consequently, Chien search needs only O(t) multiplications by constants and O(t) additions. The multiplications by constants are less complex than general multiplications.\nThe Chien search is based on two observations:\nIn other words, we may define each \n\n\n\n\u039b\n(\n\n\u03b1\n\ni\n\n\n)\n\n\n{\\displaystyle \\Lambda (\\alpha ^{i})}\n\n as the sum of a set of terms \n\n\n\n{\n\n\u03b3\n\nj\n,\ni\n\n\n\n|\n\n0\n\u2264\nj\n\u2264\nt\n}\n\n\n{\\displaystyle \\{\\gamma _{j,i}|0\\leq j\\leq t\\}}\n\n, from which the next set of coefficients may be derived thus:\nIn this way, we may start at \n\n\n\ni\n=\n0\n\n\n{\\displaystyle i=0}\n\n with \n\n\n\n\n\u03b3\n\nj\n,\n0\n\n\n=\n\n\u03bb\n\nj\n\n\n\n\n{\\displaystyle \\gamma _{j,0}=\\lambda _{j}}\n\n, and iterate through each value of \n\n\n\ni\n\n\n{\\displaystyle i}\n\n up to \n\n\n\n(\nq\n\u2212\n1\n)\n\n\n{\\displaystyle (q-1)}\n\n. If at any stage the resultant summation is zero, i.e.\nthen \n\n\n\n\u039b\n(\n\n\u03b1\n\ni\n\n\n)\n=\n0\n\n\n{\\displaystyle \\Lambda (\\alpha ^{i})=0}\n\n also, so \n\n\n\n\n\u03b1\n\ni\n\n\n\n\n{\\displaystyle \\alpha ^{i}}\n\n is a root. In this way, we check every element in the field.\nWhen implemented in hardware, this approach significantly reduces the complexity, as all multiplications consist of one variable and one constant, rather than two variables as in the brute-force approach.", 
    "dbpedia_url": "http://dbpedia.org/resource/Chien_search", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Chien_search\n"
}