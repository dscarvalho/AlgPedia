{
    "about": "In mathematics and computer science, the probabilistic method is used to prove the existence of mathematical objects with desired combinatorial properties. The proofs are probabilistic \u2014 they work by showing that a random object, chosen from some probability distribution, has the desired properties with positive probability. Consequently, they are nonconstructive \u2014 they don't explicitly describe an efficient method for computing the desired objects.", 
    "name": "Method Of Conditional Probabilities", 
    "classification": "Approximation Algorithms", 
    "full_text": "In mathematics and computer science, the probabilistic method is used to prove the existence of mathematical objects with desired combinatorial properties. The proofs are probabilistic \u2014 they work by showing that a random object, chosen from some probability distribution, has the desired properties with positive probability. Consequently, they are nonconstructive \u2014 they don't explicitly describe an efficient method for computing the desired objects.\nThe method of conditional probabilities (Erd\u0151s & Selfridge 1973), (Spencer 1987), (Raghavan 1988) converts such a proof, in a \"very precise sense\", into an efficient deterministic algorithm, one that is guaranteed to compute an object with the desired properties. That is, the method derandomizes the proof. The basic idea is to replace each random choice in a random experiment by a deterministic choice, so as to keep the conditional probability of failure, given the choices so far, below 1.\nThe method is particularly relevant in the context of randomized rounding (which uses the probabilistic method to design approximation algorithms).\nWhen applying the method of conditional probabilities, the technical term pessimistic estimator refers to a quantity used in place of the true conditional probability (or conditional expectation) underlying the proof.\n\n\n(Raghavan 1988) gives this description:\n(Raghavan is discussing the method in the context of randomized rounding, but it works with the probabilistic method in general.)\nTo apply the method to a probabilistic proof, the randomly chosen object in the proof must be choosable by a random experiment that consists of a sequence of \"small\" random choices.\nHere is a trivial example to illustrate the principle.\nIn this example the random experiment consists of flipping three fair coins. The experiment is illustrated by the rooted tree in the adjacent diagram. There are eight outcomes, each corresponding to a leaf in the tree. A trial of the random experiment corresponds to taking a random walk from the root (the top node in the tree, where no coins have been flipped) to a leaf. The successful outcomes are those in which at least two coins came up tails. The interior nodes in the tree correspond to partially determined outcomes, where only 0, 1, or 2 of the coins have been flipped so far.\nTo apply the method of conditional probabilities, one focuses on the conditional probability of failure, given the choices so far as the experiment proceeds step by step. In the diagram, each node is labeled with this conditional probability. (For example, if only the first coin has been flipped, and it comes up tails, that corresponds to the second child of the root. Conditioned on that partial state, the probability of failure is 0.25.)\nThe method of conditional probabilities replaces the random root-to-leaf walk in the random experiment by a deterministic root-to-leaf walk, where each step is chosen to inductively maintain the following invariant:\nIn this way, it is guaranteed to arrive at a leaf with label 0, that is, a successful outcome.\nThe invariant holds initially (at the root), because the original proof showed that the (unconditioned) probability of failure is less than 1. The conditional probability at any interior node is the average of the conditional probabilities of its children. The latter property is important because it implies that any interior node whose conditional probability is less than 1 has at least one child whose conditional probability is less than 1. Thus, from any interior node, one can always choose some child to walk to so as to maintain the invariant. Since the invariant holds at the end, when the walk arrives at a leaf and all choices have been determined, the outcome reached in this way must be a successful one.\nIn a typical application of the method, the goal is to be able to implement the resulting deterministic process by a reasonably efficient algorithm (the word \"efficient\" usually means an algorithm, which needs the polynomial time of the input size), even though typically the number of possible outcomes is huge (exponentially large). For example, consider the task with coin flipping, but extended to n flips for large n.\nIn the ideal case, given a partial state (a node in the tree), the conditional probability of failure (the label on the node) can be efficiently and exactly computed. (The example above is like this.) If this is so, then the algorithm can select the next node to go to by computing the conditional probabilities at each of the children of the current node, then moving to any child whose conditional probability is less than 1. As discussed above, there is guaranteed to be such a node.\nUnfortunately, in most applications, the conditional probability of failure is not easy to compute efficiently. There are two standard and related techniques for dealing with this:\nIn this case, to keep the conditional probability of failure below 1, it suffices to keep the conditional expectation of Q below (or above) the threshold. To do this, instead of computing the conditional probability of failure, the algorithm computes the conditional expectation of Q and proceeds accordingly: at each interior node, there is some child whose conditional expectation is at most (at least) the node's conditional expectation; the algorithm moves from the current node to such a child, thus keeping the conditional expectation below (above) the threshold.\nThis example demonstrates the method of conditional probabilities using a conditional expectation.\nGiven any undirected graph G = (V, E), the Max cut problem is to color each vertex of the graph with one of two colors (say black or white) so as to maximize the number of edges whose endpoints have different colors. (Say such an edge is cut.)\nMax-Cut Lemma: In any graph G = (V, E), at least |E|/2 edges can be cut.\nProbabilistic proof. Color each vertex black or white by flipping a fair coin. By calculation, for any edge e in E, the probability that it is cut is 1/2. Thus, by linearity of expectation, the expected number of edges cut is |E|/2. Thus, there exists a coloring that cuts at least |E|/2 edges. QED\nTo apply the method of conditional probabilities, first model the random experiment as a sequence of small random steps. In this case it is natural to consider each step to be the choice of color for a particular vertex (so there are |V| steps).\nNext, replace the random choice at each step by a deterministic choice, so as to keep the conditional probability of failure, given the vertices colored so far, below 1. (Here failure means that finally fewer than |E|/2 edges are cut.)\nIn this case, the conditional probability of failure is not easy to calculate. Indeed the original proof did not calculate the probability of failure directly; instead, the proof worked by showing that the expected number of cut edges was at least |E|/2.\nLet random variable Q be the number of edges cut. To keep the conditional probability of failure below 1, it suffices to keep the conditional expectation of Q at or above the threshold |E|/2. (This is because as long as the conditional expectation of Q is at least |E|/2, there must be some still-reachable outcome where Q is at least |E|/2, so the conditional probability of reaching such an outcome is positive.) To keep the conditional expectation of Q at |E|/2 or above, the algorithm will, at each step, color the vertex under consideration so as to maximize the resulting conditional expectation of Q. This suffices, because there must be some child whose conditional expectation is at least the current state's conditional expectation (and thus at least |E|/2).\nGiven that some of the vertices are colored already, what is this conditional expectation? Following the logic of the original proof, the conditional expectation of the number of cut edges is\nThe algorithm colors each vertex to maximize the resulting value of the above conditional expectation. This is guaranteed to keep the conditional expectation at |E|/2 or above, and so is guaranteed to keep the conditional probability of failure below 1, which in turn guarantees a successful outcome. By calculation, the algorithm simplifies to the following:\nBecause of its derivation, this deterministic algorithm is guaranteed to cut at least half the edges of the given graph. (This makes it a 0.5-approximation algorithm for Max-cut.)\nThe next example demonstrates the use of pessimistic estimators.\nOne way of stating Tur\u00e1n's theorem is the following:\nConsider the following random process for constructing an independent set S:\nClearly the process computes an independent set. Any vertex u that is considered before all of its neighbors will be added to S. Thus, letting d(u) denote the degree of u, the probability that u is added to S is at least 1/(d(u)+1). By linearity of expectation, the expected size of S is at least\n(The inequality above follows because 1/(x+1) is convex in x, so the left-hand side is minimized, subject to the sum of the degrees being fixed at 2|E|, when each d(u) = D = 2|E|/|V|.) QED\nIn this case, the random process has |V| steps. Each step considers some not-yet considered vertex u and adds u to S if none of its neighbors have yet been added. Let random variable Q be the number of vertices added to S. The proof shows that E[Q] \u2265 |V|/(D+1).\nWe will replace each random step by a deterministic step that keeps the conditional expectation of Q at or above |V|/(D+1). This will ensure a successful outcome, that is, one in which the independent set S has size at least |V|/(D+1), realizing the bound in Tur\u00e1n's theorem.\nGiven that the first t steps have been taken, let S(t) denote the vertices added so far. Let R(t) denote those vertices that have not yet been considered, and that have no neighbors in S(t). Given the first t steps, following the reasoning in the original proof, any given vertex w in R(t) has conditional probability at least 1/(d(w)+1) of being added to S, so the conditional expectation of Q is at least\nLet Q(t) denote the above quantity, which is called a pessimistic estimator for the conditional expectation.\nThe proof showed that the pessimistic estimator is initially at least |V|/(D+1). (That is, Q(0) \u2265 |V|/(D+1).) The algorithm will make each choice to keep the pessimistic estimator from decreasing, that is, so that Q(t+1) \u2265 Q(t) for each t. Since the pessimistic estimator is a lower bound on the conditional expectation, this will ensure that the conditional expectation stays above |V|/(D+1), which in turn will ensure that the conditional probability of failure stays below 1.\nLet u be the vertex considered by the algorithm in the next ((t+1)-st) step.\nIf u already has a neighbor in S, then u is not added to S and (by inspection of Q(t)), the pessimistic estimator is unchanged. If u does not have a neighbor in S, then u is added to S.\nBy calculation, if u is chosen randomly from the remaining vertices, the expected increase in the pessimistic estimator is non-negative. [The calculation. Conditioned on choosing a vertex in R(t), the probability that a given term 1/(d(w)+1) is dropped from the sum in the pessimistic estimator is at most (d(w)+1)/|R(t)|, so the expected decrease in each term in the sum is at most 1/|R(t)|. There are R(t) terms in the sum. Thus, the expected decrease in the sum is at most 1. Meanwhile, the size of S increases by 1.]\nThus, there must exist some choice of u that keeps the pessimistic estimator from decreasing.\nThe algorithm below chooses each vertex u to maximize the resulting pessimistic estimator. By the previous considerations, this keeps the pessimistic estimator from decreasing and guarantees a successful outcome.\nBelow, N(t)(u) denotes the neighbors of u in R(t) (that is, neighbors of u that are neither in S nor have a neighbor in S).\nFor the method of conditional probabilities to work, it suffices if the algorithm keeps the pessimistic estimator from decreasing (or increasing, as appropriate). The algorithm does not necessarily have to maximize (or minimize) the pessimistic estimator. This gives some flexibility in deriving the algorithm. The next two algorithms illustrate this.\nEach algorithm is analyzed with the same pessimistic estimator as before. With each step of either algorithm, the net increase in the pessimistic estimator is\nwhere N(t)(u) denotes the neighbors of u in the remaining graph (that is, in R(t)).\nFor the first algorithm, the net increase is non-negative because, by the choice of u,\nwhere d(u) is the degree of u in the original graph.\nFor the second algorithm, the net increase is non-negative because, by the choice of u,\nwhere d\u2032(u) is the degree of u in the remaining graph.", 
    "dbpedia_url": "http://dbpedia.org/resource/Method_of_conditional_probabilities", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Method_of_conditional_probabilities\n"
}