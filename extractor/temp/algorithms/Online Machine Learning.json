{
    "about": "In computer science, online machine learning is a method of machine learning in which data becomes available in a sequential order and is used to update our best predictor for future data at each step, as opposed to batch learning techniques which generate the best predictor by learning on the entire training data set at once. Online learning is a common technique used in areas of machine learning where it is computationally infeasible to train over the entire dataset, requiring the need of out-of-core algorithms. It is also used in situations where it is necessary for the algorithm to dynamically adapt to new patterns in the data, or when the data itself is generated as a function of time, e.g. stock price prediction.", 
    "name": "Online Machine Learning", 
    "classification": "Machine Learning Algorithms", 
    "full_text": "In computer science, online machine learning is a method of machine learning in which data becomes available in a sequential order and is used to update our best predictor for future data at each step, as opposed to batch learning techniques which generate the best predictor by learning on the entire training data set at once. Online learning is a common technique used in areas of machine learning where it is computationally infeasible to train over the entire dataset, requiring the need of out-of-core algorithms. It is also used in situations where it is necessary for the algorithm to dynamically adapt to new patterns in the data, or when the data itself is generated as a function of time, e.g. stock price prediction.\nTwo general modelling strategies exist for online learning models: statistical learning models and adversarial models. In statistical learning models (e.g. stochastic gradient descent, perceptrons), the data samples are assumed to be independent and identically distributed random variables (i.e. they are not adapting with time), and the algorithm just has a limited access to the data. In adversarial models, looking at the learning problem as a game between two players (the learner vs the data generator), the goal is to minimize losses regardless of the move played by the other player. In this model, the opponent is allowed to dynamically adapt the data generated based on the output of the learning algorithm. Spam filtering falls in this category, as the adversary will dynamically generate new spam based on the current behavior of the spam detector. Examples of algorithms in this model include follow the leader, follow the regularized leader, etc.\n\n\nIn the setting of supervised learning, a function of \n\n\n\nf\n:\nX\n\u2192\nY\n\n\n{\\displaystyle f:X\\to Y}\n\n is to be learned, where \n\n\n\nX\n\n\n{\\displaystyle X}\n\n is thought of as a space of inputs and \n\n\n\nY\n\n\n{\\displaystyle Y}\n\n as a space of outputs, that predicts well on instances that are drawn from a joint probability distribution \n\n\n\np\n(\nx\n,\ny\n)\n\n\n{\\displaystyle p(x,y)}\n\n on \n\n\n\nX\n\u00d7\nY\n\n\n{\\displaystyle X\\times Y}\n\n. In reality, the learner never knows the true distribution \n\n\n\np\n(\nx\n,\ny\n)\n\n\n{\\displaystyle p(x,y)}\n\n over instances. Instead, the learner usually has access to a training set of examples \n\n\n\n(\n\nx\n\n1\n\n\n,\n\ny\n\n1\n\n\n)\n,\n\u2026\n,\n(\n\nx\n\nn\n\n\n,\n\ny\n\nn\n\n\n)\n\n\n{\\displaystyle (x_{1},y_{1}),\\ldots ,(x_{n},y_{n})}\n\n. In this setting, the loss function is given as \n\n\n\nV\n:\nY\n\u00d7\nY\n\u2192\n\nR\n\n\n\n{\\displaystyle V:Y\\times Y\\to \\mathbb {R} }\n\n, such that \n\n\n\nV\n(\nf\n(\nx\n)\n,\ny\n)\n\n\n{\\displaystyle V(f(x),y)}\n\n measures the difference between the predicted value \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n and the true value \n\n\n\ny\n\n\n{\\displaystyle y}\n\n. The ideal goal is to select a function \n\n\n\nf\n\u2208\n\n\nH\n\n\n\n\n{\\displaystyle f\\in {\\mathcal {H}}}\n\n, where \n\n\n\n\n\nH\n\n\n\n\n{\\displaystyle {\\mathcal {H}}}\n\n is a space of functions called a hypothesis space, so that some notion of total loss is minimised. Depending on the type of model (statistical or adversarial), one can devise different notions of loss, which lead to different learning algorithms.\nIn statistical learning models, the training sample \n\n\n\n(\n\nx\n\ni\n\n\n,\n\ny\n\ni\n\n\n)\n\n\n{\\displaystyle (x_{i},y_{i})}\n\n are assumed to have been drawn i.i.d. from the true distribution \n\n\n\np\n(\nx\n,\ny\n)\n\n\n{\\displaystyle p(x,y)}\n\n and the objective is to minimize the expected \"risk\"\nA common paradigm in this situation is to estimate a function \n\n\n\n\n\n\nf\n^\n\n\n\n\n\n{\\displaystyle {\\hat {f}}}\n\n through empirical risk minimization or regularized empirical risk minimization (usually Tikhonov regularization). The choice of loss function here gives rise to several well-known learning algorithms such as regularized least squares and support vector machines. For the case of online learning, the data is still assumed to be i.i.d without access to all the data. A purely online model in this category would learn based on just the new input \n\n\n\n(\n\nx\n\nt\n+\n1\n\n\n,\n\ny\n\nt\n+\n1\n\n\n)\n\n\n{\\displaystyle (x_{t+1},y_{t+1})}\n\n, the current best predictor \n\n\n\n\nf\n\nt\n\n\n\n\n{\\displaystyle f_{t}}\n\n and some extra stored information (which is usually expected to have storage requirements independent of training data size). For many formulations, for example nonlinear kernel methods, true online learning is not possible, though a form of hybrid online learning with recursive algorithms can be used where \n\n\n\n\nf\n\nt\n+\n1\n\n\n\n\n{\\displaystyle f_{t+1}}\n\n is permitted to depend on \n\n\n\n\nf\n\nt\n\n\n\n\n{\\displaystyle f_{t}}\n\n and all previous data points \n\n\n\n(\n\nx\n\n1\n\n\n,\n\ny\n\n1\n\n\n)\n,\n\u2026\n,\n(\n\nx\n\nt\n\n\n,\n\ny\n\nt\n\n\n)\n\n\n{\\displaystyle (x_{1},y_{1}),\\ldots ,(x_{t},y_{t})}\n\n. In this case, the space requirements are no longer guaranteed to be constant since it requires storing all previous data points, but the solution may take less time to compute with the addition of a new data point, as compared to batch learning techniques.\nAn important generalization of these techniques is mini-batch techniques, which process a small batch of \n\n\n\nb\n\u2265\n1\n\n\n{\\displaystyle b\\geq 1}\n\n data points at a time, but can be considered as online algorithms for \n\n\n\nb\n\n\n{\\displaystyle b}\n\n much smaller than the total number of training points. Mini-batch techniques are used with repeated passing over the training data (called incremental methods) to obtain optimized out-of-core versions of machine learning algorithms, for e.g. Stochastic gradient descent. When combined with backpropogation, this is currently the de facto training method for training artificial neural networks.\nThe simple example of linear least squares is used to explain a variety of ideas in online learning. The ideas are general enough to be applied to other settings, for e.g. with other convex loss functions.\nIn the setting of supervised learning with the square loss function, the intent is to minimize the empirical loss,\nLet \n\n\n\nX\n\n\n{\\displaystyle X}\n\n be the \n\n\n\ni\n\u00d7\nd\n\n\n{\\displaystyle i\\times d}\n\n data matrix and \n\n\n\nY\n\n\n{\\displaystyle Y}\n\n is the \n\n\n\ni\n\u00d7\n1\n\n\n{\\displaystyle i\\times 1}\n\n matrix of target values after the arrival of the first \n\n\n\ni\n\n\n{\\displaystyle i}\n\n data points. Assuming that the covariance matrix \n\n\n\n\n\u03a3\n\ni\n\n\n=\n\nX\n\nT\n\n\nX\n\n\n{\\displaystyle \\Sigma _{i}=X^{T}X}\n\n is invertible (otherwise it is preferential to proceed in a similar fashion with Tikhonov regularization), the best solution \n\n\n\n\nf\n\n\u2217\n\n\n(\nx\n)\n=\n\u27e8\n\nw\n\n\u2217\n\n\n,\nx\n\u27e9\n\n\n{\\displaystyle f^{*}(x)=\\langle w^{*},x\\rangle }\n\n to the linear least squares problem is given by\nNow, calculating the covariance matrix \n\n\n\n\n\u03a3\n\ni\n\n\n=\n\n\u2211\n\nj\n=\n1\n\n\ni\n\n\n\nx\n\nj\n\n\n\nx\n\nj\n\n\nT\n\n\n\n\n{\\displaystyle \\Sigma _{i}=\\sum _{j=1}^{i}x_{j}x_{j}^{T}}\n\n takes time \n\n\n\nO\n(\ni\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(id^{2})}\n\n, inverting the \n\n\n\nd\n\u00d7\nd\n\n\n{\\displaystyle d\\times d}\n\n matrix takes time \n\n\n\nO\n(\n\nd\n\n3\n\n\n)\n\n\n{\\displaystyle O(d^{3})}\n\n, while the rest of the multiplication takes time \n\n\n\nO\n(\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(d^{2})}\n\n, giving a total time of \n\n\n\nO\n(\ni\n\nd\n\n2\n\n\n+\n\nd\n\n3\n\n\n)\n\n\n{\\displaystyle O(id^{2}+d^{3})}\n\n. When \n\n\n\nn\n\n\n{\\displaystyle n}\n\n total points in the dataset and having to recompute the solution after the arrival of every datapoint \n\n\n\ni\n=\n1\n,\n\u2026\n,\nn\n\n\n{\\displaystyle i=1,\\ldots ,n}\n\n, the naive approach will have a total complexity \n\n\n\nO\n(\n\nn\n\n2\n\n\n\nd\n\n2\n\n\n+\nn\n\nd\n\n3\n\n\n)\n\n\n{\\displaystyle O(n^{2}d^{2}+nd^{3})}\n\n. Note that when storing the matrix \n\n\n\n\n\u03a3\n\ni\n\n\n\n\n{\\displaystyle \\Sigma _{i}}\n\n, then updating it at each step needs only adding \n\n\n\n\nx\n\ni\n+\n1\n\n\n\nx\n\ni\n+\n1\n\n\nT\n\n\n\n\n{\\displaystyle x_{i+1}x_{i+1}^{T}}\n\n, which takes \n\n\n\nO\n(\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(d^{2})}\n\n time, reducing the total time to \n\n\n\nO\n(\nn\n\nd\n\n2\n\n\n+\nn\n\nd\n\n3\n\n\n)\n=\nO\n(\nn\n\nd\n\n3\n\n\n)\n\n\n{\\displaystyle O(nd^{2}+nd^{3})=O(nd^{3})}\n\n, but with an additional storage space of \n\n\n\nO\n(\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(d^{2})}\n\n to store \n\n\n\n\n\u03a3\n\ni\n\n\n\n\n{\\displaystyle \\Sigma _{i}}\n\n.[1]\nThe recursive least squares algorithm considers an online approach to the least squares problem. It can be shown that by initialising \n\n\n\n\n\nw\n\n0\n\n\n=\n0\n\u2208\n\n\nR\n\n\nd\n\n\n\n\n\n{\\displaystyle \\textstyle w_{0}=0\\in \\mathbb {R} ^{d}}\n\n and \n\n\n\n\n\n\u0393\n\n0\n\n\n=\nI\n\u2208\n\n\nR\n\n\nd\n\u00d7\nd\n\n\n\n\n\n{\\displaystyle \\textstyle \\Gamma _{0}=I\\in \\mathbb {R} ^{d\\times d}}\n\n, the solution of the linear least squares problem given in the previous section can be computed by the following iteration:\nThe above iteration algorithm can be proved using induction on \n\n\n\ni\n\n\n{\\displaystyle i}\n\n.[2] The proof also shows that \n\n\n\n\n\u0393\n\ni\n\n\n=\n\n\u03a3\n\ni\n\n\n\u2212\n1\n\n\n\n\n{\\displaystyle \\Gamma _{i}=\\Sigma _{i}^{-1}}\n\n. One can look at RLS also in the context of adaptive filters (see RLS).\nThe complexity for \n\n\n\nn\n\n\n{\\displaystyle n}\n\n steps of this algorithm is \n\n\n\nO\n(\nn\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(nd^{2})}\n\n, which is an order of magnitude faster than the corresponding batch learning complexity. The storage requirements at every step \n\n\n\ni\n\n\n{\\displaystyle i}\n\n here are to store the matrix \n\n\n\n\n\u0393\n\ni\n\n\n\n\n{\\displaystyle \\Gamma _{i}}\n\n, which is constant at \n\n\n\nO\n(\n\nd\n\n2\n\n\n)\n\n\n{\\displaystyle O(d^{2})}\n\n. For the case when \n\n\n\n\n\u03a3\n\ni\n\n\n\n\n{\\displaystyle \\Sigma _{i}}\n\n is not invertible, consider the regularised version of the problem loss function \n\n\n\n\n\u2211\n\nj\n=\n1\n\n\nn\n\n\n(\n\nx\n\nj\n\n\nT\n\n\nw\n\u2212\n\ny\n\nj\n\n\n\n)\n\n2\n\n\n+\n\u03bb\n\n|\n\n\n|\n\nw\n\n|\n\n\n\n|\n\n\n2\n\n\n2\n\n\n\n\n{\\displaystyle \\sum _{j=1}^{n}(x_{j}^{T}w-y_{j})^{2}+\\lambda ||w||_{2}^{2}}\n\n. Then, it's easy to show that the same algorithm works with \n\n\n\n\n\u0393\n\n0\n\n\n=\n(\nI\n+\n\u03bb\nI\n\n)\n\n\u2212\n1\n\n\n\n\n{\\displaystyle \\Gamma _{0}=(I+\\lambda I)^{-1}}\n\n, and the iterations proceed to give \n\n\n\n\n\u0393\n\ni\n\n\n=\n(\n\n\u03a3\n\ni\n\n\n+\n\u03bb\nI\n\n)\n\n\u2212\n1\n\n\n\n\n{\\displaystyle \\Gamma _{i}=(\\Sigma _{i}+\\lambda I)^{-1}}\n\n.[1]\nWhen this is replaced,\nby\nor \n\n\n\n\n\u0393\n\ni\n\n\n\u2208\n\n\nR\n\n\nd\n\u00d7\nd\n\n\n\n\n{\\displaystyle \\Gamma _{i}\\in \\mathbb {R} ^{d\\times d}}\n\n by \n\n\n\n\n\u03b3\n\ni\n\n\n\u2208\n\nR\n\n\n\n{\\displaystyle \\gamma _{i}\\in \\mathbb {R} }\n\n, this becomes the stochastic gradient descent algorithm. In this case, the complexity for \n\n\n\nn\n\n\n{\\displaystyle n}\n\n steps of this algorithm reduces to \n\n\n\nO\n(\nn\nd\n)\n\n\n{\\displaystyle O(nd)}\n\n. The storage requirements at every step \n\n\n\ni\n\n\n{\\displaystyle i}\n\n are constant at \n\n\n\nO\n(\nd\n)\n\n\n{\\displaystyle O(d)}\n\n.\nHowever, the stepsize \n\n\n\n\n\u03b3\n\ni\n\n\n\n\n{\\displaystyle \\gamma _{i}}\n\n needs to be chosen carefully to solve the expected risk minimization problem, as detailed above. By choosing a decaying step size \n\n\n\n\n\u03b3\n\ni\n\n\n\u2248\n\n\n1\n\ni\n\n\n\n,\n\n\n{\\displaystyle \\gamma _{i}\\approx {\\frac {1}{\\sqrt {i}}},}\n\n one can prove the convergence of the average iterate \n\n\n\n\n\n\nw\n\u00af\n\n\n\nn\n\n\n=\n\n\n1\nn\n\n\n\n\u2211\n\ni\n=\n1\n\n\nn\n\n\n\nw\n\ni\n\n\n\n\n{\\displaystyle {\\overline {w}}_{n}={\\frac {1}{n}}\\sum _{i=1}^{n}w_{i}}\n\n. This setting is a special case of stochastic optimization, a well known problem in optimization.[1]\nIn practice, one can perform multiple stochastic gradient passes (also called cycles or epochs) over the data. The algorithm thus obtained is called incremental gradient method and corresponds to an iteration\nThe main difference with the stochastic gradient method is that here a sequence \n\n\n\n\nt\n\ni\n\n\n\n\n{\\displaystyle t_{i}}\n\n is chosen to decide which training point is visited in the \n\n\n\ni\n\n\n{\\displaystyle i}\n\n-th step. Such a sequence can be stochastic or deterministic. The number of iterations is then decoupled to the number of points (each point can be considered more than once). The incremental gradient method can be shown to provide a minimizer to the empirical risk.[3] Incremental techniques can be advantageous when considering objective functions made up of a sum of many terms e.g. an empirical error corresponding to a very large dataset.[1]\nKernels can be used to extend the above algorithms to non-parametric models (or models where the parameters form an infinite dimensional space). The corresponding procedure will no longer be truly online and instead involve storing all the data points, but is still faster than the brute force method. This discussion is restricted to the case of the square loss, though it can be extended to any convex loss. It can be shown by an easy induction [1] that if \n\n\n\n\nX\n\ni\n\n\n\n\n{\\displaystyle X_{i}}\n\n is the data matrix and \n\n\n\n\nw\n\ni\n\n\n\n\n{\\displaystyle w_{i}}\n\n is the output after \n\n\n\ni\n\n\n{\\displaystyle i}\n\n steps of the SGD algorithm, then,\nwhere \n\n\n\n\n\nc\n\ni\n\n\n=\n(\n(\n\nc\n\ni\n\n\n\n)\n\n1\n\n\n,\n(\n\nc\n\ni\n\n\n\n)\n\n2\n\n\n,\n.\n.\n.\n,\n(\n\nc\n\ni\n\n\n\n)\n\ni\n\n\n)\n\u2208\n\n\nR\n\n\ni\n\n\n\n\n\n{\\displaystyle \\textstyle c_{i}=((c_{i})_{1},(c_{i})_{2},...,(c_{i})_{i})\\in \\mathbb {R} ^{i}}\n\n and the sequence \n\n\n\n\nc\n\ni\n\n\n\n\n{\\displaystyle c_{i}}\n\n satisfies the recursion:\nNotice that here \n\n\n\n\u27e8\n\nx\n\nj\n\n\n,\n\nx\n\ni\n\n\n\u27e9\n\n\n{\\displaystyle \\langle x_{j},x_{i}\\rangle }\n\n is just the standard Kernel on \n\n\n\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle \\mathbb {R} ^{d}}\n\n, and the predictor is of the form\nNow, if a general kernel \n\n\n\nK\n\n\n{\\displaystyle K}\n\n is introduced instead and let the predictor be\nthen the same proof will also show that predictor minimising the least squares loss is obtained by changing the above recursion to\nThe above expression requires storing all the data for updating \n\n\n\n\nc\n\ni\n\n\n\n\n{\\displaystyle c_{i}}\n\n. The total time complexity for the recursion when evaluating for the \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-th datapoint is \n\n\n\nO\n(\n\nn\n\n2\n\n\nd\nk\n)\n\n\n{\\displaystyle O(n^{2}dk)}\n\n, where \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is the cost of evaluating the kernel on a single pair of points.[1] Thus, the use of the kernel has allowed the movement from a finite dimensional parameter space \n\n\n\n\n\nw\n\ni\n\n\n\u2208\n\n\nR\n\n\nd\n\n\n\n\n\n{\\displaystyle \\textstyle w_{i}\\in \\mathbb {R} ^{d}}\n\n to a possibly infinite dimensional feature represented by a kernel \n\n\n\nK\n\n\n{\\displaystyle K}\n\n by instead performing the recursion on the space of parameters \n\n\n\n\n\nc\n\ni\n\n\n\u2208\n\n\nR\n\n\ni\n\n\n\n\n\n{\\displaystyle \\textstyle c_{i}\\in \\mathbb {R} ^{i}}\n\n, whose dimension is the same as the size of the training dataset. In general, this is a consequence of the representer theorem.[1]\nProgressive learning is an effective learning model which is demonstrated by the human learning process. It is the process of learning continuously from direct experience. Progressive learning technique (PLT) in machine learning can learn new classes/labels dynamically on the run.[4] Though online learning can learn new samples of data that arrive sequentially, they cannot learn new classes of data being introduced to the model. The learning paradigm of progressive learning, is independent of the number of class constraints and it can learn new classes while still retaining the knowledge of previous classes. Whenever a new class (non-native to the knowledge learnt thus far) is encountered, the classifier gets remodeled automatically and the parameters are calculated in such a way that it retains the knowledge learnt thus far. This technique is suitable for real-world applications where the number of classes is often unknown and online learning from real-time data is required.\nIn sequential learning, the learning problem can be thought of as a game between two players (the learner vs. nature), and the goal is to minimize losses regardless of the move played by the other player. The game proceeds as follows.\nFor \n\n\n\nt\n=\n1\n,\n2\n,\n.\n.\n.\n,\nT\n\n\n{\\displaystyle t=1,2,...,T}\n\n\nSince no distributional assumptions are made about the data, the goal here is to perform as well as if the entire sequence of examples could be viewed ahead of time. Let \n\n\n\n\nf\n\n\u2217\n\n\n\u2208\nH\n\n\n{\\displaystyle f^{\\ast }\\in H}\n\n be the hypothesis that achieves the least loss for this sequence, i.e. it minimizes \n\n\n\n\n\u2211\n\nt\n=\n1\n\n\nT\n\n\nV\n(\n\np\n\nt\n\n\n,\n\ny\n\nt\n\n\n)\n\n\n{\\displaystyle \\sum _{t=1}^{T}V(p_{t},y_{t})}\n\n. This can be though of as the benchmark to beat, and thus, it would be preferable for the sequence of functions \n\n\n\n\nf\n\n1\n\n\n,\n\nf\n\n2\n\n\n,\n\u2026\n\n\n{\\displaystyle f_{1},f_{2},\\ldots }\n\n to have a low loss relative to this. It's customary to call this \"the regret on the hypothesis set \n\n\n\nH\n\n\n{\\displaystyle H}\n\n\". Thus, for sequential learning, the learner is trying to minimize is the regret\nThe learner is thus required to be competitive with the best fixed predictor from \n\n\n\nH\n\n\n{\\displaystyle H}\n\n. In adversarial models, the members of the hypothesis set are also called experts.\nIf no additional constraints are imposed, then one can prove Cover's impossibility result, which states that there is a hypothesis set \n\n\n\nH\n\n\n{\\displaystyle H}\n\n such that for any online learning algorithm, the regret is at least linear in \n\n\n\nT\n\n\n{\\displaystyle T}\n\n.[5] However, for learning to be feasible, we would like to obtain a sublinear bound on the regret, so that the average regret goes to \n\n\n\n0\n\n\n{\\displaystyle 0}\n\n as \n\n\n\nT\n\u2192\n\u221e\n\n\n{\\displaystyle T\\rightarrow \\infty }\n\n. One way to do so is to add the realisability constraint. It states that there exists a fixed hypothesis in \n\n\n\nH\n\n\n{\\displaystyle H}\n\n generating the target values. In this case, one can show that the regret \n\n\n\n\nR\n\nT\n\n\n\n\n{\\displaystyle R_{T}}\n\n is bounded by \n\n\n\n\nlog\n\n2\n\n\n\u2061\n\n|\n\nH\n\n|\n\n\n\n{\\displaystyle \\log _{2}|H|}\n\n.[6] However, realisability is usually too strong of an assumption. Another way to bound the regret is to move to the setup of online convex optimisation, which we will now look at.\nIn OCO, the hypothesis set and the loss functions are forced to be convex to obtain stronger learning bounds. The modified sequential game is now as follows:\nFor \n\n\n\nt\n=\n1\n,\n2\n,\n.\n.\n.\n,\nT\n\n\n{\\displaystyle t=1,2,...,T}\n\n\nThus, when regret is minimised, we are now competing against the best weight vector \n\n\n\nu\n\u2208\nH\n\n\n{\\displaystyle u\\in H}\n\n. As an example, consider the case of online least squares linear regression. Here, the weight vectors come from the convex set \n\n\n\nS\n=\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle S=\\mathbb {R} ^{d}}\n\n, and nature sends back the convex loss function \n\n\n\n\nv\n\nt\n\n\n(\nw\n)\n=\n(\n\u27e8\nw\n,\n\nx\n\nt\n\n\n\u27e9\n\u2212\n\ny\n\nt\n\n\n\n)\n\n2\n\n\n\n\n{\\displaystyle v_{t}(w)=(\\langle w,x_{t}\\rangle -y_{t})^{2}}\n\n. Note here that \n\n\n\n\ny\n\nt\n\n\n\n\n{\\displaystyle y_{t}}\n\n is implicitly sent with \n\n\n\n\nv\n\nt\n\n\n\n\n{\\displaystyle v_{t}}\n\n.\nSome online prediction problems however cannot fit it the framework of OCO. For example, in online classification, the prediction domain and the loss functions are not convex. In such scenarios, two simple techniques for convexification are convexification by randomisation and convexification by use of surrogate loss functions.[5]\nSome simple online convex optimisation algorithms are to be considered:\nThe simplest learning rule to try is to select (at the current step) the hypothesis that has the least loss over all past rounds. This algorithm is called Follow the leader, and is simply given by:\nIn round \n\n\n\nt\n\n\n{\\displaystyle t}\n\n, set\nHere, ties are broken arbitrarily. This method can thus be looked as a greedy algorithm. For the case of online quadratic optimization (where the loss function is \n\n\n\n\nv\n\nt\n\n\n(\nw\n)\n=\n\n|\n\n\n|\n\nw\n\u2212\n\nx\n\nt\n\n\n\n|\n\n\n\n|\n\n\n2\n\n\n2\n\n\n\n\n{\\displaystyle v_{t}(w)=||w-x_{t}||_{2}^{2}}\n\n), one can show a regret bound that grows as \n\n\n\nlog\n\u2061\n(\nT\n)\n\n\n{\\displaystyle \\log(T)}\n\n.[5] However, similar bounds cannot be obtained for the FTL algorithm for other important families of models like online linear optimization etc. To do so, one modifies FTL by adding regularisation.\nThis is a natural modification of FTL that is used to stabilise the FTL solutions and obtain better regret bounds. We choose a regularisation function \n\n\n\nR\n:\nS\n\u2192\n\nR\n\n\n\n{\\displaystyle R:S\\rightarrow \\mathbb {R} }\n\n and then perform the learning as follows:\nIn round t, set\nAs a special example, consider the case of online linear optimisation i.e. where nature sends back loss functions of the form \n\n\n\n\nv\n\nt\n\n\n(\nw\n)\n=\n\u27e8\nw\n,\n\nz\n\nt\n\n\n\u27e9\n\n\n{\\displaystyle v_{t}(w)=\\langle w,z_{t}\\rangle }\n\n. Also, let \n\n\n\nS\n=\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle S=\\mathbb {R} ^{d}}\n\n. Suppose the regularisation function \n\n\n\nR\n(\nw\n)\n=\n\n\n1\n\n2\n\u03b7\n\n\n\n\n|\n\n\n|\n\nw\n\n|\n\n\n\n|\n\n\n2\n\n\n2\n\n\n\n\n{\\displaystyle R(w)={\\frac {1}{2\\eta }}||w||_{2}^{2}}\n\n is chosen for some positive number \n\n\n\n\u03b7\n\n\n{\\displaystyle \\eta }\n\n. Then, one can show that the regret minimising iteration becomes [5]\nNote that this can be rewritten as \n\n\n\n\nw\n\nt\n+\n1\n\n\n=\n\nw\n\nt\n\n\n\u2212\n\u03b7\n\u2207\n\nv\n\nt\n\n\n(\n\nw\n\nt\n\n\n)\n\n\n{\\displaystyle w_{t+1}=w_{t}-\\eta \\nabla v_{t}(w_{t})}\n\n, which looks exactly like online gradient descent. If S is instead some convex subspace of \n\n\n\n\n\nR\n\n\nd\n\n\n\n\n{\\displaystyle \\mathbb {R} ^{d}}\n\n, S would need to be projected onto, leading to the modified update rule\nThis algorithm is known as lazy projection, as the vector \n\n\n\n\n\u03b8\n\nt\n+\n1\n\n\n\n\n{\\displaystyle \\theta _{t+1}}\n\n accumulates the gradients. It is also known as Nesterov's dual averaging algorithm. In this scenario of linear loss functions and quadratic regularisation, the regret is bounded by \n\n\n\nO\n(\n\n\nT\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {T}})}\n\n, and thus the average regret goes to 0 as desired.[6]\nThe above proved a regret bound for linear loss functions \n\n\n\n\nv\n\nt\n\n\n(\nw\n)\n=\n\u27e8\nw\n,\n\nz\n\nt\n\n\n\u27e9\n\n\n{\\displaystyle v_{t}(w)=\\langle w,z_{t}\\rangle }\n\n. To generalise the algorithm to any convex loss function, the subgradient \n\n\n\n\u2202\n\nv\n\nt\n\n\n(\n\nw\n\nt\n\n\n)\n\n\n{\\displaystyle \\partial v_{t}(w_{t})}\n\n of \n\n\n\n\nv\n\nt\n\n\n\n\n{\\displaystyle v_{t}}\n\n is used as a linear approximation to \n\n\n\n\nv\n\nt\n\n\n\n\n{\\displaystyle v_{t}}\n\n near \n\n\n\n\nw\n\nt\n\n\n\n\n{\\displaystyle w_{t}}\n\n, leading to the online subgradient descent algorithm:\nInitialise parameter \n\n\n\n\u03b7\n,\n\nw\n\n1\n\n\n=\n0\n\n\n{\\displaystyle \\eta ,w_{1}=0}\n\n\nFor \n\n\n\nt\n=\n1\n,\n2\n,\n.\n.\n.\n,\nT\n\n\n{\\displaystyle t=1,2,...,T}\n\n\nOne can use the OSD algorithm to derive \n\n\n\nO\n(\n\n\nT\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {T}})}\n\n regret bounds for the online version of SVM's for classification, which use the hinge loss \n\n\n\n\nv\n\nt\n\n\n(\nw\n)\n=\nmax\n{\n0\n,\n1\n\u2212\n\ny\n\nt\n\n\n(\nw\n\u22c5\n\nx\n\nt\n\n\n)\n}\n\n\n{\\displaystyle v_{t}(w)=\\max\\{0,1-y_{t}(w\\cdot x_{t})\\}}\n\n [6]\nQuadratically regularised FTRL algorithms lead to lazily projected gradient algorithms as described above. To use the above for arbitrary convex functions and regularisers, one uses online mirror descent. Another algorithm is called prediction with expert advice. In this case, the hypothesis set consists of \n\n\n\nd\n\n\n{\\displaystyle d}\n\n functions. We maintain a distribution \n\n\n\n\nw\n\nt\n\n\n\u2208\n\n\u0394\n\nd\n\n\n\n\n{\\displaystyle w_{t}\\in \\Delta _{d}}\n\n over the \n\n\n\nd\n\n\n{\\displaystyle d}\n\n experts, and predict by sampling an expert from this distribution. For the Euclidean regularisation, one can show a regret bound of \n\n\n\nO\n(\n\n\nT\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {T}})}\n\n, which can be improved further to a \n\n\n\nO\n(\n\n\nlog\n\u2061\nT\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {\\log T}})}\n\n bound by using a better regulariser. For further reading about these algorithms, refer to [5][6]\nThe paradigm of online learning interestingly has three distinct interpretations depending on the choice of the learning model, each of which has distinct implications about the predictive quality of the sequence of functions \n\n\n\n\nf\n\n1\n\n\n,\n\nf\n\n2\n\n\n,\n\u2026\n,\n\nf\n\nn\n\n\n\n\n{\\displaystyle f_{1},f_{2},\\ldots ,f_{n}}\n\n. The prototypical stochastic gradient descent algorithm is used for this discussion. As noted above, its recursion is given by\nThe first interpretation consider the stochastic gradient descent method as applied to the problem of minimizing the expected risk \n\n\n\nI\n[\nw\n]\n\n\n{\\displaystyle I[w]}\n\n defined above.[7] Indeed, in the case of an infinite stream of data, since the examples \n\n\n\n(\n\nx\n\n1\n\n\n,\n\ny\n\n1\n\n\n)\n,\n(\n\nx\n\n2\n\n\n,\n\ny\n\n2\n\n\n)\n,\n\u2026\n\n\n{\\displaystyle (x_{1},y_{1}),(x_{2},y_{2}),\\ldots }\n\n are assumed to be drawn i.i.d. from the distribution \n\n\n\np\n(\nx\n,\ny\n)\n\n\n{\\displaystyle p(x,y)}\n\n, the sequence of gradients of \n\n\n\nV\n(\n\u22c5\n,\n\u22c5\n)\n\n\n{\\displaystyle V(\\cdot ,\\cdot )}\n\n in the above iteration are an i.i.d. sample of stochastic estimates of the gradient of the expected risk \n\n\n\nI\n[\nw\n]\n\n\n{\\displaystyle I[w]}\n\n and therefore one can apply complexity results for the stochastic gradient descent method to bound the deviation \n\n\n\nI\n[\n\nw\n\nt\n\n\n]\n\u2212\nI\n[\n\nw\n\n\u2217\n\n\n]\n\n\n{\\displaystyle I[w_{t}]-I[w^{\\ast }]}\n\n, where \n\n\n\n\nw\n\n\u2217\n\n\n\n\n{\\displaystyle w^{\\ast }}\n\n is the minimizer of \n\n\n\nI\n[\nw\n]\n\n\n{\\displaystyle I[w]}\n\n.[8] This interpretation is also valid in the case of a finite training set; although with multiple passes through the data the gradients are no longer independent, still complexity results can be obtained in special cases.\nThe second interpretation applies to the case of a finite training set and considers the SGD algorithm as an instance of incremental gradient descent method.[3] In this case, one instead looks at the empirical risk:\nSince the gradients of \n\n\n\nV\n(\n\u22c5\n,\n\u22c5\n)\n\n\n{\\displaystyle V(\\cdot ,\\cdot )}\n\n in the incremental gradient descent iterations are also stochastic estimates of the gradient of \n\n\n\n\nI\n\nn\n\n\n[\nw\n]\n\n\n{\\displaystyle I_{n}[w]}\n\n, this interpretation is also related to the stochastic gradient descent method, but applied to minimize the empirical risk as opposed to the expected risk. Since this interpretation concerns the empirical risk and not the expected risk, multiple passes through the data are readily allowed and actually lead to tighter bounds on the deviations \n\n\n\n\nI\n\nn\n\n\n[\n\nw\n\nt\n\n\n]\n\u2212\n\nI\n\nn\n\n\n[\n\nw\n\nn\n\n\n\u2217\n\n\n]\n\n\n{\\displaystyle I_{n}[w_{t}]-I_{n}[w_{n}^{\\ast }]}\n\n, where \n\n\n\n\nw\n\nn\n\n\n\u2217\n\n\n\n\n{\\displaystyle w_{n}^{\\ast }}\n\n is the minimizer of \n\n\n\n\nI\n\nn\n\n\n[\nw\n]\n\n\n{\\displaystyle I_{n}[w]}\n\n.\nThe third interpretation of the above recursion is distinctly different from the first two and concerns the case of sequential trials where the data are potentially not i.i.d. and can perhaps be selected in an adversarial manner. Since no distributional assumptions are made about the data, the goal here is to perform as well as if the entire sequence of examples could be viewed ahead of time, and the regret is to be minimised on the hypothesis set \n\n\n\n\n\nH\n\n\n\n\n{\\displaystyle {\\mathcal {H}}}\n\n\nIn this setting, the above recursion can be considered as an instance of the online subgradient descent method for which there are complexity bounds that guarantee \n\n\n\nO\n(\n\n\nT\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {T}})}\n\n regret.[5]\nIt should be noted that although the three interpretations of this algorithm yield complexity bounds in three distinct settings, each bound depends on the choice of step-size sequence \n\n\n\n{\n\n\u03b3\n\nt\n\n\n}\n\n\n{\\displaystyle \\{\\gamma _{t}\\}}\n\n in a different way, and thus the consequences of all three interpretations cannot be simultaneously applied; the step-size sequence should be selected in a way that is tailored for the interpretation that is most relevant instead. Furthermore, the above algorithm and these interpretations can be extended to the case of a nonlinear kernel by simply considering \n\n\n\nX\n\n\n{\\displaystyle X}\n\n to be the feature space associated with the kernel. Although in this case the memory requirements at each iteration are no longer \n\n\n\nO\n(\nd\n)\n\n\n{\\displaystyle O(d)}\n\n, but are rather on the order of the number of data points considered so far.", 
    "dbpedia_url": "http://dbpedia.org/resource/Online_machine_learning", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Online_machine_learning\n"
}