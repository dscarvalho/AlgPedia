{
    "about": "This is a chronologically ordered list of metaphor-based metaheuristics and swarm intelligence algorithms.", 
    "name": "Shuffled Frog Leaping Algorithm", 
    "classification": "Optimization Algorithms And Methods", 
    "full_text": "This is a chronologically ordered list of metaphor-based metaheuristics and swarm intelligence algorithms.\n\n\nSimulated annealing (SA) is a probabilistic technique inspired by a heat treatment method in metallurgy. It is often used when the search space is discrete (e.g., all tours that visit a given set of cities). For problems where finding the precise global optimum is less important than finding an acceptable local optimum in a fixed amount of time, simulated annealing may be preferable to alternatives such as gradient descent.\nSimulated annealing interprets slow cooling as a slow decrease in the probability of accepting worse solutions as it explores the solution space. Accepting worse solutions is a fundamental property of metaheuristics because it allows for a more extensive search for the optimal solution.\nThe ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. Initially proposed by Marco Dorigo in 1992 in his PhD thesis,[1][2] the first algorithm was aiming to search for an optimal path in a graph, based on the behavior of ants seeking a path between their colony and a source of food. The original idea has since diversified to solve a wider class of numerical problems, and as a result, several problems have emerged, drawing on various aspects of the behavior of ants. From a broader perspective, ACO performs a model-based search[3] and shares some similarities with Estimation of Distribution Algorithms.\nParticle swarm optimization (PSO) is a computational method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. It solves a problem by having a population of candidate solutions, here dubbed particles, and moving these particles around in the search-space according to simple mathematical formulae over the particle's position and velocity. Each particle's movement is influenced by its local best known position, but is also guided toward the best known positions in the search-space, which are updated as better positions are found by other particles. This is expected to move the swarm toward the best solutions.\nPSO is originally attributed to Kennedy, Eberhart and Shi[4][5] and was first intended for simulating social behaviour,[6] as a stylized representation of the movement of organisms in a bird flock or fish school. The algorithm was simplified and it was observed to be performing optimization. The book by Kennedy and Eberhart[7] describes many philosophical aspects of PSO and swarm intelligence. An extensive survey of PSO applications is made by Poli.[8][9] Recently, a comprehensive review on theoretical and experimental works on PSO has been published by Bonyadi and Michalewicz.[10]\nHarmony search is a phenomenon-mimicking metaheuristic introduced in 2001 by Zong Woo Geem, Joong Hoon Kim, and G. V. Loganathan.[11] Harmony search is inspired by the improvisation process of jazz musicians. Harmony search has been strongly criticized for being a special case of the well-established Evolution Strategies algorithm.[12] However the rebuttal provided in [13] gives ample evidence that HS is not a special case of Evolutionary strategies.\nThe Harmony search (HS) is a relatively simple yet very efficient evolutionary algorithm. In HS algorithm a bunch/group of solutions is randomly generated (Called Harmony memory). A new solution is generated by using all the solutions in the Harmony memory (rather than just two as used in GA) and if this new solution is better than the Worst solution in Harmony memory, the Worst solution gets replaced by this new solution. All though HS is a relatively new meta heuristic algorithm, its effectiveness and advantages have been demonstrated in various applications like design of municipal water distribution networks,[14] structural design,[15] traffic routing,[16] load dispatch problem in electrical engineering,[17] multi objective optimization,[18] rostering problems,[19] clustering,[20] classi\ufb01cation and feature selection [21][22] to name a few. A detailed survey on applications of HS can be found in [23] and applications of HS in data mining can be found in.[24]\nArtificial bee colony algorithm is a meta-heuristic algorithm introduced by Karaboga in 2005,[25] and simulates the foraging behaviour of honey bees. The ABC algorithm has three phases: employed bee, onlooker bee and scout bee. In the employed bee and the onlooker bee phases, bees exploit the sources by local searches in the neighbourhood of the solutions selected based on deterministic selection in the employed bee phase and the probabilistic selection in the onlooker bee phase. In the scout bee phase which is an analogy of abandoning exhausted food sources in the foraging process, solutions that are not beneficial anymore for search progress are abandoned, and new solutions are inserted instead of them to explore new regions in the search space. The algorithm has a well-balanced exploration and exploitation ability.\nThe bees algorithm in its basic formulation was created by Pham and his co-workers in 2005,[26] and further refined in the following years.[27] Modelled on the foraging behaviour of honey bees, the algorithm combines global explorative search with local exploitative search. A small number of artificial bees (scouts) explores randomly the solution space (environment) for solutions of high fitness (highly profitable food sources), whilst the bulk of the population search (harvest) the neighbourhood of the fittest solutions looking for the fitness optimum. A deterministics recruitment procedure which simulates the waggle dance of biological bees is used to communicate the scouts' findings to the foragers, and distribute the foragers depending on the fitness of the neighbourhoods selected for local search. Once the search in the neighbourhood of a solution stagnates, the local fitness optimum is considered to be found, and the site is abandoned. In summary, the Bees Algorithm searches concurrently the most promising regions of the solution space, whilst continuously sampling it in search of new favourable regions.\nThe glowworm swarm optimization is a swarm intelligence optimization algorithm developed based on the behaviour of glowworms (also known as fireflies or lightning bugs). The GSO algorithm was developed and introduced by K.N. Krishnanand and Debasish Ghose in 2005 at the Guidance, Control, and Decision Systems Laboratory in the Department of Aerospace Engineering at the Indian Institute of Science, Bangalore, India.[28]\nThe behaviour pattern of glowworms which is used for this algorithm is the apparent capability of the glowworms to change the intensity of the luciferin emission and thus appear to glow at different intensities.\nThe part 2 of the algorithm makes it different from other evolutionary multimodal optimization algorithms. It is this step that allows glowworm swarms to automatically subdivide into subgroups which can then converge to multiple local optima simultaneously, This property of the algorithm allows it to be used to identify multiple peaks of a multi-modal function and makes it a part of the evolutionary multimodal optimization algorithms family.\nThe shuffled frog leaping algorithm is an optimization algorithm used in artificial intelligence.[29] It is comparable to a genetic algorithm.\nThe imperialist competitive algorithm is a computational method that is used to solve optimization problems of different types.[30] [31] Like most of the methods in the area of evolutionary computation, ICA does not need the gradient of the function in its optimization process. From a specific point of view, ICA can be thought of as the social counterpart of genetic algorithms (GAs). ICA is the mathematical model and the computer simulation of human social evolution, while GAs are based on the biological evolution of species.\nThis algorithm starts by generating a set of candidate random solutions in the search space of the optimization problem. The generated random points are called the initial Countries. Countries in this algorithm are the counterpart of Chromosomes in GAs and Particles in Particle Swarm Optimization (PSO) and it is an array of values of a candidate solution of optimization problem. The cost function of the optimization problem determines the power of each country. Based on their power, some of the best initial countries (the countries with the least cost function value), become Imperialists and start taking control of other countries (called colonies) and form the initial Empires.[30]\nTwo main operators of this algorithm are Assimilation and Revolution. Assimilation makes the colonies of each empire get closer to the imperialist state in the space of socio-political characteristics (optimization search space). Revolution brings about sudden random changes in the position of some of the countries in the search space. During assimilation and revolution a colony might reach a better position and has the chance to take the control of the entire empire and replace the current imperialist state of the empire.[32]\nImperialistic Competition is another part of this algorithm. All the empires try to win this game and take possession of colonies of other empires. In each step of the algorithm, based on their power, all the empires have a chance to take control of one or more of the colonies of the weakest empire.[30]\nAlgorithm continues with the mentioned steps (Assimilation, Revolution, Competition) until a stop condition is satisfied.\nThe above steps can be summarized as the below pseudocode.[31][32]\nRiver formation dynamics is based on imitating how water forms rivers by eroding the ground and depositing sediments (the drops act as the swarm). After drops transform the landscape by increasing/decreasing the altitude of places, solutions are given in the form of paths of decreasing altitudes. Decreasing gradients are constructed, and these gradients are followed by subsequent drops to compose new gradients and reinforce the best ones. This heuristic optimization method was first presented in 2007 by Rabanal et al.[33] The applicability of RFD to other NP-complete problems has been studied,[34] and the algorithm has been applied to fields such as routing[35] and robot navigation.[36]\nIntelligent water drops algorithm contains a few essential elements of natural water drops and actions and reactions that occur between river's bed and the water drops that flow within. The IWD was first introduced for the traveling salesman problem in 2007.[37]\nAlmost every IWD algorithm is composed of two parts: a graph that plays the role of distributed memory on which soils of different edges are preserved, and the moving part of the IWD algorithm, which is a few number of Intelligent water drops. These intelligent water drops (IWDs) both compete and cooperate to find better solutions and by changing soils of the graph, the paths to better solutions become more reachable. It is mentioned that the IWD-based algorithms need at least two IWDs to work.\nThe IWD algorithm has two types of parameters: static and dynamic parameters. Static parameters are constant during the process of the IWD algorithm. Dynamic parameters are reinitialized after each iteration of the IWD algorithm. The pseudo-code of an IWD-based algorithm may be specified in eight steps:\nGravitational search algorithm based on the law of gravity and the notion of mass interactions. The GSA algorithm uses the theory of Newtonian physics and its searcher agents are the collection of masses. In GSA, there is an isolated system of masses. Using the gravitational force, every mass in the system can see the situation of other masses. The gravitational force is therefore a way of transferring information between different masses (Rashedi, Nezamabadi-pour and Saryazdi 2009).[38] In GSA, agents are considered as objects and their performance is measured by their masses. All these objects attract each other by a gravity force, and this force causes a movement of all objects globally towards the objects with heavier masses. The heavy masses correspond to good solutions of the problem. The position of the agent corresponds to a solution of the problem, and its mass is determined using a fitness function. By lapse of time, masses are attracted by the heaviest mass, which would ideally present an optimum solution in the search space. The GSA could be considered as an isolated system of masses. It is like a small artificial world of masses obeying the Newtonian laws of gravitation and motion (Rashedi, Nezamabadi-pour and Saryazdi 2009). A multi-objective variant of GSA, called MOGSA, was first proposed by Hassanzadeh et al. in 2010.[39]\nIn operations research, cuckoo search is an optimization algorithm developed by Xin-she Yang and Suash Deb in 2009.[40][41] It was inspired by the obligate brood parasitism of some cuckoo species by laying their eggs in the nests of other host birds (of other species). Some host birds can engage direct conflict with the intruding cuckoos. For example, if a host bird discovers the eggs are not their own, it will either throw these alien eggs away or simply abandon its nest and build a new nest elsewhere. Some cuckoo species such as the New World brood-parasitic Tapera have evolved in such a way that female parasitic cuckoos are often very specialized in the mimicry in colors and pattern of the eggs of a few chosen host species [42]\nBat algorithm is a swarm-intelligence-based algorithm, inspired by the echolocation behavior of microbats. BA automatically balances exploration (long-range jumps around the global search space to avoid getting stuck around one local maximum) with exploitation (searching in more detail around known good solutions to find local maxima) by controlling loudness and pulse emission rates of simulated bats in the multi-dimensional search space.[43]\nFlower pollination algorithm is a metaheuristic algorithm that was developed by Xin-She Yang,[44] based on the pollination process of flowering plants.\nThis algorithm has 4 rules or assumptions:\nhave a significant fraction p in the overall pollination activities.\nThese rules can be translated into the following updating equations:\nwhere \n\n\n\n\nx\n\ni\n\n\nt\n\n\n\n\n{\\displaystyle x_{i}^{t}}\n\n is the solution vector and \n\n\n\n\ng\n\n\u2217\n\n\n\n\n{\\displaystyle g_{*}}\n\n is the current best found so far during iteration. The switch probability between two equations during iterations is \n\n\n\np\n\n\n{\\displaystyle p}\n\n. In addition, \n\n\n\n\u03f5\n\n\n{\\displaystyle \\epsilon }\n\n is a random number drawn from a uniform distribution. \n\n\n\nL\n\n\n{\\displaystyle L}\n\n is a step size drawn from a L\u00e9vy distribution.\nL\u00e9vy flights using L\u00e9vy steps is a powerful random walk because both global and local search capabilities can be carried out at the same time. In contrast with standard Random walks, L\u00e9vy flights have occasional long jumps, which enable the algorithm to jump out any local valleys. L\u00e9vy steps obey the following approximation:\nwhere \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\n is the L\u00e9vy exponent.[45] It may be challenging to draw L\u00e9vy steps properly, and a simple way of generating L\u00e9vy flights \n\n\n\ns\n\n\n{\\displaystyle s}\n\n is to use two normal distributions \n\n\n\nu\n\n\n{\\displaystyle u}\n\n and \n\n\n\nv\n\n\n{\\displaystyle v}\n\n by a transform[46]\nwith\nwhere \n\n\n\n\u03c3\n\n\n{\\displaystyle \\sigma }\n\n is a function of \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\n.\nThe cuttlefish optimization algorithm is a population-based search algorithm inspired by skin color changing behaviour of Cuttlefish which was developed in 2013 [47][48] It has two global search and two local search.\nThe algorithm considers two main processes: Reflection and Visibility. Reflection process simulates the light reflection mechanism, while visibility simulates the visibility of matching patterns. These two processes are used as a search strategy to find the global optimal solution. The formulation of finding the new solution (newP) by using reflection and visibility is as follows: \n\n\n\nn\ne\nw\nP\n=\nR\ne\nf\nl\ne\nc\nt\ni\no\nn\n+\nV\ni\ns\ni\nb\ni\nl\ni\nt\ny\n\n\n{\\displaystyle newP=Reflection+Visibility}\n\n\nCFA divide the pubulaion to 4 Groups (G1, G2, G3 and G4). For G1 the algorithm appling case 1 and 2 (the interaction between chromatophores and iridophores) to produce a new solutions. These two cases are used as a golobal search. For G2, the algorithm uses case 3 (Iridophores reflection opaerator) and case 4 (the interaction between Iridophores and chromatophores) to produces a new solutions) as a local search. While for G3 the interaction between the leucophores and chromatophores (case 5) is used to produse solutions around the best solution (local search). Finaly for G4, case 6 (reflection operator of leucophores) is used as a global search by reflecting any incoming light as it with out any modification. The main step of CFA is described as follows:\nEquations that are used to calculate reflection and visibility for the four Groups are described below:\nCase 1 and 2 for G1:\n\n\n\n\nR\ne\nf\nl\ne\nc\nt\ni\no\nn\n[\nj\n]\n=\nR\n\u2217\n\nG\n\n1\n\n\n[\nj\n]\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\n\n{\\displaystyle Reflection[j]=R*G_{1}[j].Points[j]}\n\n\n\n\n\n\nV\ni\ns\ni\nb\ni\nl\ni\nt\ny\n[\nj\n]\n=\nV\n\u2217\n(\nB\ne\ns\nt\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\u2212\n\nG\n\n1\n\n\n[\ni\n]\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n)\n\n\n{\\displaystyle Visibility[j]=V*(Best.Points[j]-G_{1}[i].Points[j])}\n\n\nCase 3 and 4 for G2:\n\n\n\n\nR\ne\nf\nl\ne\nc\nt\ni\no\nn\n[\nj\n]\n=\nR\n\u2217\nB\ne\ns\nt\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\n\n{\\displaystyle Reflection[j]=R*Best.Points[j]}\n\n\n\n\n\n\nV\ni\ns\ni\nb\ni\nl\ni\nt\ny\n[\nj\n]\n=\nV\n\u2217\n(\nB\ne\ns\nt\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\u2212\n\nG\n\n2\n\n\n[\ni\n]\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n)\n\n\n{\\displaystyle Visibility[j]=V*(Best.Points[j]-G_{2}[i].Points[j])}\n\n\nCase 5 for G3:\n\n\n\n\nR\ne\nf\nl\ne\nc\nt\ni\no\nn\n[\nj\n]\n=\nR\n\u2217\nB\ne\ns\nt\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\n\n{\\displaystyle Reflection[j]=R*Best.Points[j]}\n\n\n\n\n\n\nV\ni\ns\ni\nb\ni\nl\ni\nt\ny\n[\nj\n]\n=\nV\n\u2217\n(\nB\ne\ns\nt\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n\u2212\nA\n\nV\n\nB\ne\ns\nt\n\n\n\n\n{\\displaystyle Visibility[j]=V*(Best.Points[j]-AV_{Best}}\n\n\nCase 6 for G4:\n\n\n\n\nP\n[\ni\n]\n.\nP\no\ni\nn\nt\ns\n[\nj\n]\n=\nr\na\nn\nd\no\nm\n\u2217\n(\nu\np\np\ne\nr\nL\ni\nm\ni\nt\n\u2212\nl\no\nw\ne\nr\nL\ni\nn\ni\nt\n)\n+\nL\no\nw\ne\nr\nL\ni\nm\ni\nt\n,\ni\n=\n1\n,\n2\n,\n.\n.\n.\n,\nN\n;\nj\n=\n1\n,\n2\n,\n.\n.\n.\n,\nd\n\n\n{\\displaystyle P[i].Points[j]=random*(upperLimit-lowerLinit)+LowerLimit,i=1,2,...,N;j=1,2,...,d}\n\n\nWhere \n\n\n\n\nG\n\n1\n\n\n\n\n{\\displaystyle G_{1}}\n\n, \n\n\n\n\nG\n\n2\n\n\n\n\n{\\displaystyle G_{2}}\n\n are Group1 and Group2, i presents the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n element in G, j is the \n\n\n\n\nj\n\nt\nh\n\n\n\n\n{\\displaystyle j^{th}}\n\n point of \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n element in group G, Best is the best solution and \n\n\n\nA\n\nV\n\nB\ne\ns\nt\n\n\n\n\n{\\displaystyle AV_{Best}}\n\n presents the average value of the Best points. While R and V are two random numbers produced around zero such as between (-1, 1), R represents the degree of reflection, V represents the visibility degree of the final view of the pattern, upperLimit and lowerLimit are the upper limit and the lower limit of the problem domain.\nArtificial swarm intelligence refers to a real-time closed-loop system of human users connected over the internet and structured in a framework modeled after natural swarms such that it evokes the group's collective wisdom as a unified emergent intelligence.[49][50] In this way, human swarms can answer questions, make predictions, reach decisions, and solve problems by collectively exploring a diverse set of options and converging on preferred solutions in synchrony. Invented by Dr. Louis Rosenberg in 2014, the ASI methodology has become notable for its ability to make accurate collective predictions that outperform the individual members of the swarm.[51] In 2016 an Artificial Swarm Intelligence from Unanimous A.I. was challenged by a reporter to predict the winners of the Kentucky Derby, and successfully picked the first four horses, in order, beating 540 to 1 odds.[52][53]\nWhile individual metaphor-inspired metaheuristics have produced remarkably effective solutions to specific problems,[54] metaphor-inspired metaheuristics in general have attracted criticism in the research community for hiding their lack of effectiveness or novelty behind an elaborate metaphor.[54][55] Kenneth S\u00f6rensen noted that:[56]\nIn recent years, the \ufb01eld of combinatorial optimization has witnessed a true tsunami of \"novel\" metaheuristic methods, most of them based on a metaphor of some natural or man-made process. The behavior of virtually any species of insects, the \ufb02ow of water, musicians playing together \u2013 it seems that no idea is too far-fetched to serve as inspiration to launch yet another metaheuristic. [I] will argue that this line of research is threatening to lead the area of metaheuristics away from scienti\ufb01c rigor.\nS\u00f6rensen and Glover stated that:[57]\nA large (and increasing) number of publications focuses on the development of (supposedly) new metaheuristic frameworks based on metaphors. The list of natural or man-made processes that has been used as the basis for a metaheuristic framework now includes such diverse processes as bacterial foraging, river formation, biogeography, musicians playing together, electromagnetism, gravity, colonization by an empire, mine blasts, league championships, clouds, and so forth. An important subcategory is found in metaheuristics based on animal behavior. Ants, bees, bats, wolves, cats, fireflies, eagles, dolphins, frogs, salmon, vultures, termites, flies, and many others, have all been used to inspire a \"novel\" metaheuristic. [...] As a general rule, publication of papers on metaphor-based metaheuristics has been limited to second-tier journals and conferences, but some recent exceptions to this rule can be found. S\u00f6rensen (2013) states that research in this direction is fundamentally flawed. Most importantly, the author contends that the novelty of the underlying metaphor does not automatically render the resulting framework \"novel\". On the contrary, there is increasing evidence that very few of the metaphor-based methods are new in any interesting sense.\nIn response, Springer's Journal of Heuristics has updated their editorial policy to state that:[58]\nProposing new paradigms is only acceptable if they contain innovative basic ideas, such as those that are embedded in classical frameworks like genetic algorithms, tabu search, and simulated annealing. The Journal of Heuristics avoids the publication of articles that repackage and embed old ideas in methods that are claimed to be based on metaphors of natural or manmade systems and processes. These so-called \"novel\" methods employ analogies that range from intelligent water drops, musicians playing jazz, imperialist societies, leapfrogs, kangaroos, all types of swarms and insects and even mine blast processes (S\u00f6rensen, 2013). If a researcher uses a metaphor to stimulate his or her own ideas about a new method, the method must nevertheless be translated into metaphor-free language, so that the strategies employed can be clearly understood, and their novelty is made clearly visible. (See items 2 and 3 below.) Metaphors are cheap and easy to come by. Their use to \"window dress\" a method is not acceptable.\"\n[...] Implementations should be explained by employing standard optimization terminology, where a solution is called a \"solution\" and not something else related to some obscure metaphor (e.g., harmony, flies, bats, countries, etc.).\n[...] The Journal of Heuristics fully endorses S\u00f6rensen\u2019s view that metaphor-based \u201cnovel\u201d methods should not be published if they cannot demonstrate a contribution to their field. Renaming existing concepts does not count as a contribution. Even though these methods are often called \u201cnovel\u201d, many present no new ideas, except for the occasional marginal variant of an already existing methodology. These methods should not take the journal space of truly innovative ideas and research. Since they do not use the standard optimization vocabulary, they are unnecessarily difficult to understand.", 
    "dbpedia_url": "http://dbpedia.org/resource/Shuffled_frog_leaping_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Shuffled_frog_leaping_algorithm\n"
}