{
    "about": "In algebra, the greatest common divisor (frequently abbreviated as GCD) of two polynomials is a polynomial, of the highest possible degree, that is a factor of both the two original polynomials. This concept is analogous to the greatest common divisor of two integers.", 
    "name": "Polynomial Greatest Common Divisor", 
    "classification": "Computer Algebra", 
    "full_text": "In algebra, the greatest common divisor (frequently abbreviated as GCD) of two polynomials is a polynomial, of the highest possible degree, that is a factor of both the two original polynomials. This concept is analogous to the greatest common divisor of two integers.\nIn the important case of univariate polynomials over a field the polynomial GCD may be computed, like for the integer GCD, by Euclid's algorithm using long division. The polynomial GCD is defined only up to the multiplication by an invertible constant.\nThe similarity between the integer GCD and the polynomial GCD allows us to extend to univariate polynomials all the properties that may be deduced from Euclid's algorithm and Euclidean division. Moreover, the polynomial GCD has specific properties that make it a fundamental notion in various areas of algebra. Typically, the roots of the GCD of two polynomials are the common roots of the two polynomials, and this allows us to get information on the roots without computing them. For example, the multiple roots of a polynomial are the roots of the GCD of the polynomial and its derivative, and further GCD computations allow us to compute the square-free factorization of the polynomial, which provides polynomials whose roots are the roots of a given multiplicity.\nThe greatest common divisor may be defined and exists, more generally, for multivariate polynomials over a field or the ring of integers, and also over a unique factorization domain. There exist algorithms to compute them as soon as one has a GCD algorithm in the ring of coefficients. These algorithms proceed by a recursion on the number of variables to reduce the problem to a variant of Euclid's algorithm. They are a fundamental tool in computer algebra, because computer algebra systems use them systematically to simplify fractions. Conversely, most of the modern theory of polynomial GCD has been developed to satisfy the need of efficiency of computer algebra systems.\n\n\nLet p and q be polynomials with coefficients in an integral domain F, typically a field or the integers. A greatest common divisor of p and q is a polynomial d that divides p and q and such that every common divisor of p and q also divides d. Every pair of polynomials (not both zero) has a GCD if and only if F is a unique factorization domain.\nIf F is a field and p and q are not both zero, for d to be a greatest common divisor it is sufficient that it divides both p and q and it has the greatest degree among the polynomials having this property. If p = q = 0, the GCD is 0. However, some authors consider that it is not defined in this case.\nThe greatest common divisor of p and q is usually denoted \"gcd(p, q)\".\nThe greatest common divisor is not unique: if d is a GCD of p and q, then the polynomial f is another GCD if and only if there is an invertible element u of F such that\nand\nIn other words, the GCD is unique up to the multiplication by an invertible constant.\nIn the case of the integers, this indetermination has been settled by choosing, as the GCD, the unique one which is positive (there is another one, which is its opposite). With this convention, the GCD of two integers is also the greatest (for the usual ordering) common divisor. However, since there is no natural total order for polynomials over an integral domain, one cannot proceed in the same way here. For univariate polynomials over a field, one can additionally require the GCD to be monic (i.e. it has 1 as coefficient of the highest degree), but in more general cases there is no general convention. Therefore, equalities like d = gcd(p, q) or gcd(p, q) = gcd(r, s) are usual abuses of notation which should be read \"d is a GCD of p and q\" and \"p, q has the same set of GCD as r, s\". In particular, gcd(p, q) = 1 means that the invertible constants are the only common divisors, and thus that p and q are coprime.\nThere are several ways to find the greatest common divisor of two polynomials. Two of them are:\nTo find the GCD of two polynomials using factoring, simply factor the two polynomials completely. Then, take the product of all common factors. At this stage, we do not necessarily have a monic polynomial, so finally multiply this by a constant to make it a monic polynomial. This will be the GCD of the two polynomials as it includes all common divisors and is monic.\nExample one: Find the GCD of x2 + 7x + 6 and x2 \u2212 5x \u2212 6.\nThus, their GCD is x + 1.\nFactoring polynomials can be difficult, especially if the polynomials have large degree. The Euclidean algorithm is a method which works for any pair of polynomials. It makes repeated use of Euclidean division. When using this algorithm on two numbers, the size of the numbers decreases at each stage. With polynomials, the degree of the polynomials decreases at each stage. The last nonzero remainder, made monic if necessary, is the GCD of the two polynomials.\nMore specifically, assume we wish to find the gcd of two polynomials a(x) and b(x), where we can suppose\nWe can find two polynomials q(x) and r(x) which satisfy (see Polynomial long division)\nThe polynomial q0(x) is called the quotient and r0(x) is the remainder. Notice that a polynomial g(x) divides a(x) and b(x) if and only if it divides b(x) and r0(x). We deduce\nThen set\nRepeat the Polynomial long division to get new polynomials q1(x), r1(x), a2(x), b2(x) and so on. At each stage we have\nso the sequence will eventually reach a point at which\nand we will have found our GCD:\nExample: Find the GCD of x2 + 7x + 6 and x2 \u2212 5x \u2212 6.\nSince x + 1 is the last nonzero remainder, the GCD of these polynomials is x\u00a0+\u00a01.\nThis method works only if one may test the equality to zero of the elements of the field of the coefficients, so one needs a description of the coefficients as elements of some finitely generated field, for which the generators and relations are known exactly. If the coefficients are floating point numbers, known only approximately, then one uses completely different techniques, usually based on SVD.\nThis induces a new difficulty: For all these fields except the finite ones, the coefficients are fractions. If the fractions are not simplified during the computation, the size of the coefficients grows exponentially during the computation, which makes it impossible except for very small degrees. On the other hand, it is highly time consuming to simplify the fractions immediately. Therefore, two different alternative methods have been introduced (see below):\nThe case of univariate polynomials over a field is specially important for several reasons. Firstly, it is the most elementary case and therefore appear in most first courses in algebra. Secondly, it is very similar to the case of the integers, and this analogy is the source of the notion of Euclidean domain. A third reason is that the theory and the algorithms for the multivariate case and for coefficients in a unique factorization domain are strongly based on this particular case. Last but not least, polynomial GCD algorithms and derived algorithms allow one to get useful information on the roots of a polynomial, without computing them.\nEuclidean division of polynomials, which is used in Euclid's algorithm for computing GCDs, is very similar to Euclidean division of integers. Its existence is based on the following theorem: Given two univariate polynomials a and b \u2260 0 defined over a field, there exist two polynomials q (the quotient) and r (the remainder) which satisfy\nand\nwhere \"deg(...)\" denotes the degree and the degree of 0 is defined as negative. Moreover, q and r are uniquely defined by these relations.\nThe difference from Euclidean division of the integers is that, for the integers, the degree is replaced by the absolute value, and that to have uniqueness one has to suppose that r is non-negative. The rings for which such a theorem exists are called Euclidean domains.\nLike for the integers, the Euclidean division of the polynomials may be computed by the long division algorithm. This algorithm is usually presented for paper-and-pencil computation, but it works well on computers, when formalized as follows (note that the names of the variables correspond exactly to the regions of the paper sheet in a pencil-and-paper computation of long division). In the following computation \"deg\" stands for the degree of its argument (with the convention deg(0)<0), and \"lc\" stands for the leading coefficient, the coefficient of the highest degree of the variable.\nThe proof of the validity of this algorithm relies on the fact that during the whole \"while\" loop, we have a = bq + r and deg(r) is a non-negative integer that decreases at each iteration. Thus the proof of the validity of this algorithm also proves the validity of Euclidean division.\nAs for the integers, Euclidean division allows us to define Euclid's algorithm for computing GCDs.\nStarting from two polynomials a and b, Euclid's algorithm consists of recursively replacing the pair (a, b) by (b, rem(a, b)) (where \"rem(a, b)\" denotes the remainder of the Euclidean division, computed by the algorithm of the preceding section), until b = 0. The GCD is the last non zero remainder.\nEuclid's algorithm may be formalized in the recursive programming style as:\n\n\n\n\ngcd\n(\na\n,\nb\n)\n:=\n\nif\u00a0\n\nb\n=\n0\n\n\u00a0then\u00a0\n\na\n\n\u00a0else\u00a0\n\ngcd\n(\nb\n,\nrem\n\u2061\n(\na\n,\nb\n)\n)\n.\n\n\n{\\displaystyle \\gcd(a,b):={\\text{if }}b=0{\\text{ then }}a{\\text{ else }}\\gcd(b,\\operatorname {rem} (a,b)).}\n\n\nIn the imperative programming style, the same algorithm becomes, giving a name to each intermediate remainder:\nThe sequence of the degrees of the ri is strictly decreasing. Thus after, at most, deg(b) steps, one get a null remainder, say rk. As (a, b) and (b, rem(a,b)) have the same divisors, the set of the common divisors is not changed by Euclid's algorithm and thus all pairs (ri, ri + 1) have the same set of common divisors. The common divisors of a and b are thus the common divisors of rk \u2212 1 and 0. Thus rk \u2212 1 is a GCD of a and b. This not only proves that Euclid's algorithm computes GCDs, but also proves that GCDs exist.\nB\u00e9zout's identity is a GCD related theorem, initially proved for the integers, which is valid for every principal ideal domain. In the case of the univariate polynomials over a field, it may be stated as follows.\nIf g is the greatest common divisor of two polynomials a and b, then there are two polynomials u and v such that\nand\nThe interest of this result in the case of the polynomials is that there is an efficient algorithm to compute the polynomials u and v, This algorithm differs from Euclid's algorithm by a few more computations done at each iteration of the loop. It is therefore called extended GCD algorithm. Another difference with Euclid's algorithm is that it also uses the quotient, denoted \"quo\", of the Euclidean division instead of only the remainder. This algorithm works as follows.\nThe proof that the algorithm satisfies its output specification relies on the fact that, for every i we have\nthe latter equality implying\nThe assertion on the degrees follows from the fact that, at every iteration, the degrees of si and ti increase at most as the degree of ri decreases.\nAn interesting feature of this algorithm is that, when the coefficients of Bezout's identity are needed, one gets for free the quotient of the input polynomials by their GCD.\nAn important application of extended GCD algorithm is that it allows one to compute division in algebraic field extensions.\nLet L an algebraic extension of a field K, generated by an element whose minimal polynomial f has degree n. The elements of L are usually represented by univariate polynomials over K of degree less than n.\nThe addition in L is simply the addition of polynomials:\nThe multiplication in L is the multiplication of polynomials followed by the division by f:\nThe inverse of a non zero element a of L is the coefficient u in B\u00e9zout's identity au + fv = 1, which may be computed by extended GCD algorithm. (the GCD is 1 because the minimal polynomial f is irreducible). The degrees inequality in the specification of extended GCD algorithm shows that a further division by f is not needed to get deg(u) < deg(f).\nIn the case of univariate polynomials, there is a strong relationship between greatest common divisors and resultants. In fact the resultant of two polynomials P, Q is a polynomial function of the coefficients of P and Q which has the value zero if and only if the GCD of P and Q is not constant.\nThe subresultants theory is a generalization of this property that allows to characterize generically the GCD of two polynomials, and the resultant is the 0-th subresultant polynomial.[1]\nThe i-th subresultant polynomial Si(P ,Q) of two polynomials P and Q is a polynomial of degree at most i whose coefficients are polynomial functions of the coefficients of P and Q, and the i-th principal subresultant coefficient si(P ,Q) is the coefficient of degree i of Si(P, Q). They have the property that the GCD of P and Q has a degree d if and only if\nIn this case, Sd(P ,Q) is a GCD of P and Q and\nEvery coefficient of the subresultant polynomials is defined as the determinant of a submatrix of the Sylvester matrix of P and Q. This implies that subresultants \"specialize\" well. More precisely, subresultants are defined for polynomials over any commutative ring R, and have the following property.\nLet \u03c6 be a ring homomorphism of R into another commutative ring S. It extends to another homomorphism, denoted also \u03c6 between the polynomials rings over R and S. Then, if P and Q are univariate polynomials with coefficients in R such that\nand\nthen the subresultant polynomials and the principal subresultant coefficients of \u03c6(P) and \u03c6(Q) are the image by \u03c6 of those of P and Q.\nThe subresultants have two important properties which make them fundamental for the computation on computers of the GCD of two polynomials with integer coefficients. Firstly, their definition through determinants allows to bound, through Hadamard inequality, the size of the coefficients of the GCD. Secondly, this bound and the property of good specialization allow to compute the GCD of two polynomials with integer coefficients through modular computation and Chinese remainder theorem (see below).\nLet\nbe two univariate polynomials with coefficients in a field K. Let us denote by \n\n\n\n\n\n\nP\n\n\n\ni\n\n\n\n\n{\\displaystyle {\\mathcal {P}}_{i}}\n\n the K vector space of dimension i the polynomials of degree less than i. For non negative integer i such that i\u2264m and i\u2264n, let\nbe the linear map such that\nThe resultant of P and Q is the determinant of the Sylvester matrix, which is the (square) matrix of \n\n\n\n\n\u03c6\n\n0\n\n\n\n\n{\\displaystyle \\varphi _{0}}\n\n on the bases of the powers of X. Similarly, the i-subresultant polynomial is defined in term of determinants of submatrices of the matrix of \n\n\n\n\n\u03c6\n\ni\n\n\n.\n\n\n{\\displaystyle \\varphi _{i}.}\n\n\nLet us describe these matrices more precisely;\nLet pi = 0 for i < 0 or i > m, and qi = 0 for i < 0 or i > n. The Sylvester matrix is the (m + n) \u00d7 (m + n)-matrix such that the coefficient of the i-th row and the j-th column is pm + j - i for j \u2264 n and qj - i for j > n:[2]\nThe matrix Ti of \n\n\n\n\n\u03c6\n\ni\n\n\n\n\n{\\displaystyle \\varphi _{i}}\n\n is the (m + n \u2212 i) \u00d7 (m + n \u2212 2i)-submatrix of S which is obtained by removing the last i rows of zeros in the submatrix of the columns 1 to n-i and n+1 to m+n-i of S (that is removing i columns in each block and the i last rows of zeros). The principal subresultant coefficient si is the determinant of the m + n - 2i first rows of Ti.\nLet Vi be the (m + n \u2212 2i) \u00d7 (m + n \u2212 i) matrix defined as follows. First we add (i + 1) columns of zeros to the right of the (m + n - 2i - 1) \u00d7 (m + n - 2i - 1) identity matrix. Then we border the bottom of the resulting matrix by a row consisting in (m + n - i - 1) zeros followed by Xi, Xi \u2212 1, ..., X, 1:\nWith this notation, the i-th subresultant polynomial is the determinant of the matrix product ViTi. Its coefficient of degree j is the determinant of the square submatrix of Ti consisting in its m + n - 2i - 1 first rows and the (m + n - i - j)-th row.\nIt is not obvious that, as defined, the subresultants have the desired properties. In fact the proof is rather simple if the properties of linear algebra and those of polynomials are put together.\nAs defined, the columns of the matrix Ti are the vectors of the coefficients of some polynomials belonging to the image of \n\n\n\n\n\u03c6\n\ni\n\n\n\n\n{\\displaystyle \\varphi _{i}}\n\n. The definition of the i-th subresultant polynomial Si shows that the vector of its coefficients is a linear combination of these column vectors, and thus that Si belongs to the image of \n\n\n\n\n\u03c6\n\ni\n\n\n.\n\n\n{\\displaystyle \\varphi _{i}.}\n\n\nIf the degree of the GCD is greater than i, then B\u00e9zout's identity shows that every non zero polynomial in the image of \n\n\n\n\n\u03c6\n\ni\n\n\n\n\n{\\displaystyle \\varphi _{i}}\n\n has a degree larger than i. This implies that Si=0.\nIf, on the other hand, the degree of the GCD is i, then B\u00e9zout's identity again allows to prove that the multiples of the GCD that have a degree lower than m + n - i are in the image of \n\n\n\n\n\u03c6\n\ni\n\n\n\n\n{\\displaystyle \\varphi _{i}}\n\n. The vector space of these multiples has the dimension m + n - 2i and has a base of polynomials of pairwise different degrees, not smaller than i. This implies that the submatrix of the m + n - 2i first rows of the column echelon form of Ti is the identity matrix and thus that si is not 0. Thus Si is a polynomial in the image of \n\n\n\n\n\u03c6\n\ni\n\n\n\n\n{\\displaystyle \\varphi _{i}}\n\n, which is a multiple of the GCD and has the same degree. It is thus a greatest common divisor.\nMost root-finding algorithms behave badly with polynomials that have multiple roots. It is therefore useful to detect and remove them before calling a root-finding algorithm. A GCD computation allows to detect the existence of multiple roots, because the multiple roots of a polynomial are the roots of the GCD of the polynomial and its derivative.\nAfter computing the GCD of the polynomial and its derivative, further GCD computations provide the complete square-free factorization of the polynomial, which is a factorization\nwhere, for each i, the polynomial fi either is 1 if f does not have any root of multiplicity i or is a square-free polynomial (that is a polynomial without multiple root) whose roots are exactly the roots of multiplicity i of f (see Yun's algorithm).\nThus the square-free factorization reduces root finding of a polynomial with multiple roots to root finding of several square-free polynomials of lower degree. The square-free factorization is also the first step in most polynomial factorization algorithms.\nThe Sturm sequence of a polynomial with real coefficients is the sequence of the remainders provided by a variant of Euclid's algorithm applied to the polynomial and its derivative. For getting the Sturm sequence, one simply replaces the instruction\nof Euclid's algorithm by\nLet V(a) be the number of changes of signs in the sequence, when evaluated at a point a. Sturm's theorem asserts that V(a)-V(b) is the number of real roots of the polynomial in the interval [a,b]. Thus the Sturm sequence allows to compute the number of real roots in a given interval. By subdividing the interval until every subinterval contains at most one root, this provides an algorithm that locates the real roots in intervals of arbitrary small length.\nIn this section, we consider polynomials over a unique factorization domain R, typically the ring of the integers, and over its field of fractions F, typically the field of the rational numbers, and we denote R[X] and F[X] the rings of polynomials in a set of variables over these rings.\nThe content of a polynomial p \u2208 R[X], denoted \"cont(p)\", is the GCD of its coefficients. A polynomial q \u2208 F[X] may be written\nwhere p \u2208 R[X] and c \u2208 R: it suffices to take for c a multiple of all denominators of the coefficients of q (for example their product) and p = cq. The content of q is defined as:\nIn both cases, the content is defined up to the multiplication by a unit of R.\nThe primitive part of a polynomial in R[X] or F[X] is defined by\nIn both cases, it is a polynomial in R[X] that is primitive, which means that 1 is a GCD of its coefficients.\nThus every polynomial in R[X] or F[X] may be factorized as\nand this factorization is unique up to the multiplication of the content by a unit of R and of the primitive part by the inverse of this unit.\nGauss's lemma implies that the product of two primitive polynomials is primitive. It follows that\nand\nThe relations of the preceding section imply a strong relation between the GCD's in R[X] and in F[X]. In order to avoid ambiguities, the notation \"gcd\" will be indexed, in the following, by the ring in which the GCD is computed.\nIf q1 and q2 belong to F[X], then\nIf p1 and p2 belong to R[X], then\nand\nThus the computation of polynomial GCD's is essentially the same problem over F[X] and over R[X].\nFor univariate polynomials over the rational numbers one may think that Euclid's algorithm is a convenient method for computing the GCD. However, it involves to simplify a large number of fractions of integers, and the resulting algorithm is not efficient. For this reason, methods have been designed to modify Euclid's algorithm for working only with polynomials over the integers. They consist in replacing Euclidean division, which introduces fractions, by a so-called pseudo-division, and replacing the remainder sequence of Euclid's algorithm by so-called pseudo-remainder sequences (see below).\nIn the previous section we have seen that the GCD of polynomials in R[X] may be deduced from GCDs in R and in F[X]. A closer look on the proof shows that this allows us to prove the existence of GCDs in R[X], if they exist in R and in F[X]. In particular, if GCDs exist in R, and if X is reduced to one variable, this proves that GCDs exist in R[X] (Euclid's algorithm proves the existence of GCDs in F[X]).\nA polynomial in n variables may be considered as a univariate polynomial over the ring of polynomials in (n \u2212 1) variables. Thus a recursion on the number of variables shows that if GCDs exists and may be computed in R, then they exist and may be computed in every multivariate polynomial ring over R. In particular, if R is either the ring of the integers or a field, then GCDs exist in R[x1,..., xn], and what precedes provides an algorithm to compute them.\nThe proof that a polynomial ring over a unique factorization domain is also a unique factorization domain is similar, but it does not provide an algorithm, because there is no general algorithm to factor univariate polynomials over a field (there are examples of fields for which there does not exist any factorization algorithm for the univariate polynomials).\nIn this section, we consider an integral domain Z (typically the ring Z of the integers) and its field of fractions Q (typically the field Q of the rational numbers). Given two polynomials A and B in the univariate polynomial ring Z[X], the Euclidean division (over Q) of A by B provides a quotient and a remainder which may not belong to Z[X].\nFor, if one applies Euclid's algorithm to\nand\nthe successive remainders of Euclid's algorithm are\nOne sees that, despite the small degree and the small size of the coefficients of the input polynomials, one has to manipulate and simplify integer fractions of rather large size.\nThe pseudo-division has been introduced to allow a variant of Euclid's algorithm for which all remainders belong to Z[X].\nIf \n\n\n\ndeg\n\u2061\n(\nA\n)\n=\na\n\n\n{\\displaystyle \\deg(A)=a}\n\n and \n\n\n\ndeg\n\u2061\n(\nB\n)\n=\nb\n\n\n{\\displaystyle \\deg(B)=b}\n\n and a\u2265b, the pseudo-remainder of the pseudo-division of A by B, denoted by prem(A,B) is\nwhere lc(B) is the leading coefficient of B (the coefficient of Xb).\nThe pseudo-remainder of the pseudo-division of two polynomials in Z[X] belongs always to Z[X].\nA pseudo-remainder sequence is the sequence of the (pseudo) remainders ri obtained by replacing the instruction\nof Euclid's algorithm by\nwhere \u03b1 is an element of Z that divides exactly every coefficient of the numerator. Different choices of \u03b1 give different pseudo-remainder sequences, which are described in the next subsections.\nAs the common divisors of two polynomials are not changed if the polynomials are multiplied by invertible constants (in Q), the last non zero term in a pseudo-remainder sequence is a GCD (in Q[X]) of the input polynomials. Therefore, pseudo-remainder sequences allows to compute GCD's in Q[X] without introducing fractions in Q.\nThe simplest (to define) remainder sequence consists in taking always \u03b1=1. In practice, it is not interesting, as the size of the coefficients grow exponentially with the degree of the input polynomials. This appears clearly on the example of the preceding section, for which the successive pseudo-remainders are\nThe number of digits of the coefficients of the successive remainders is more than doubled at each iteration of the algorithm. This is a typical behavior of the trivial pseudo-remainder sequences.\nThe primitive pseudo-remainder sequence consists in taking for \u03b1 the content of the numerator. Thus all the ri are primitive polynomials.\nThe primitive pseudo-remainder sequence is the pseudo-remainder sequence, which generates the smallest coefficients. However it requires to compute a number of GCD's in Z, and therefore is not sufficiently efficient to be used in practice, especially when Z is itself a polynomial ring.\nWith the same input as in the preceding sections, the successive remainders, after division by their content are\nThe small size of the coefficients hides the fact that a number of integers GCD and divisions by the GCD have been computed.\nA subresultant sequence can be also computed with pseudo-remainders. The process consists in choosing \u03b1 is such a way that every ri is a subresultant polynomial. Surprisingly, the computation of \u03b1 is very easy (see below). On the other hand, the proof of correctness of the algorithm is difficult, because it should take into account all the possibilities for the difference of degrees of two consecutive remainders.\nThe coefficients in the subresultant sequence are rarely much larger than those of the primitive pseudo-remainder sequence. As GCD computations in Z are not needed, the subresultant sequence with pseudo-remainders gives the most efficient computation.\nWith the same input as in the preceding sections, the successive remainders are\nThe coefficients have a reasonable size. They are obtained without any GCD computation, only exact divisions. This makes this algorithm more efficient than that of primitive pseudo-remainder sequences.\nThe algorithm computing the subresultant sequence with pseudo-remainders is given below. In this algorithm, the input (a, b) is a pair of polynomials in Z[X]. The ri are the successive pseudo remainders in Z[X], the variables i and di are non negative integers, and the Greek letters denote elements in Z. The functions deg() and rem() denote the degree of a polynomial and the remainder of the Euclidean division. In the algorithm, this remainder is always in Z[X]. Finally the divisions denoted / are always exact and have their result either in Z[X] or in Z.\nThis algorithm computes not only the greatest common divisor (the last non zero ri), but also all the subresultant polynomials: The remainder ri is the (deg(ri-1)-1)-th subresultant polynomial. If deg(ri)<deg(ri-1)-1, the deg(ri)-th subresultant polynomial is lc(ri)deg(ri-1)-deg(ri)-1ri. All the other subresultant polynomials are null.\nOne may use pseudo-remainders for constructing sequences having the same properties as Sturm sequences. This requires to control the signs of the successive pseudo-remainders, in order to have the same signs as in the Sturm sequence. This may be done by defining a modified pseudo-remainder as follows.\nIf \n\n\n\ndeg\n\u2061\n(\nA\n)\n=\na\n\n\n{\\displaystyle \\deg(A)=a}\n\n and \n\n\n\ndeg\n\u2061\n(\nB\n)\n=\nb\n\n\n{\\displaystyle \\deg(B)=b}\n\n and a \u2265 b, the modified pseudo-remainder prem2(A,B) of the pseudo-division of A by B is\nwhere |lc(B)| is the absolute value of the leading coefficient of B (the coefficient of Xb).\nFor input polynomials with integers coefficients, this allows to get Sturm sequences consisting of polynomials with integer coefficients. The subresultant pseudo-remainder sequence may be modified similarly, in which case the signs of the remainders coincide with those computed over the rationals.\nNote that the algorithm for computing the subresultant pseudo-remainder sequence given above will compute wrong subresultant polynomials if one uses \n\n\n\n\n-\np\nr\ne\nm\n2\n\n\u2061\n(\nA\n,\nB\n)\n\n\n{\\displaystyle \\operatorname {-prem2} (A,B)}\n\n instead of \n\n\n\nprem\n\u2061\n(\nA\n,\nB\n)\n\n\n{\\displaystyle \\operatorname {prem} (A,B)}\n\n.\nIf f and g are polynomials in F[x] for some finitely generated field F, the Euclidean Algorithm is the most natural way to compute their GCD. However, modern computer algebra systems only use it if F is finite because of a phenomenon called intermediate expression swell. Although degrees keep decreasing during the Euclidean algorithm, if F is not finite then the bitsize of the polynomials can increase (sometimes dramatically) during the computations because repeated arithmetic operations in F tends to lead to larger expressions. For example, the addition of two rational numbers whose denominators are bounded by b leads to a rational number whose denominator is bounded by b2, so in the worst case, the bitsize could nearly double with just one operation.\nTo expedite the computation, take a ring D for which f and g are in D[x], and take an ideal I such that D/I is a finite ring. Then compute the GCD over this finite ring with the Euclidean Algorithm. Using reconstruction techniques (Chinese remainder theorem, rational reconstruction, etc.) one can recover the GCD of f and g from its image modulo a number of ideals I. One can prove[3] that this works provided that one discards modular images with non-minimal degree, and avoids ideals I modulo which a leading coefficient vanishes.\nSuppose \n\n\n\nF\n=\n\nQ\n\n(\n\n\n3\n\n\n)\n\n\n{\\displaystyle F=\\mathbb {Q} ({\\sqrt {3}})}\n\n, \n\n\n\nD\n=\n\nZ\n\n[\n\n\n3\n\n\n]\n\n\n{\\displaystyle D=\\mathbb {Z} [{\\sqrt {3}}]}\n\n, \n\n\n\nf\n=\n\n\n3\n\n\n\nx\n\n3\n\n\n\u2212\n5\n\nx\n\n2\n\n\n+\n4\nx\n+\n9\n\n\n{\\displaystyle f={\\sqrt {3}}x^{3}-5x^{2}+4x+9}\n\n and \n\n\n\ng\n=\n\nx\n\n4\n\n\n+\n4\n\nx\n\n2\n\n\n+\n3\n\n\n3\n\n\nx\n\u2212\n6\n\n\n{\\displaystyle g=x^{4}+4x^{2}+3{\\sqrt {3}}x-6}\n\n. If we take \n\n\n\nI\n=\n(\n2\n)\n\n\n{\\displaystyle I=(2)}\n\n then \n\n\n\nD\n\n/\n\nI\n\n\n{\\displaystyle D/I}\n\n is a finite ring (not a field since \n\n\n\nI\n\n\n{\\displaystyle I}\n\n is not maximal in \n\n\n\nD\n\n\n{\\displaystyle D}\n\n). The Euclidean algorithm applied to the images of \n\n\n\nf\n,\ng\n\n\n{\\displaystyle f,g}\n\n in \n\n\n\n(\nD\n\n/\n\nI\n)\n[\nx\n]\n\n\n{\\displaystyle (D/I)[x]}\n\n succeeds and returns 1. This implies that the GCD of \n\n\n\nf\n,\ng\n\n\n{\\displaystyle f,g}\n\n in \n\n\n\nF\n[\nx\n]\n\n\n{\\displaystyle F[x]}\n\n must be 1 as well. Note that this example could easily be handled by any method because the degrees were too small for expression swell to occur, but it illustrates that if two polynomials have GCD 1, then the modular algorithm is likely to terminate after a single ideal \n\n\n\nI\n\n\n{\\displaystyle I}\n\n.", 
    "dbpedia_url": "http://dbpedia.org/resource/Polynomial_greatest_common_divisor", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Polynomial_greatest_common_divisor\n"
}