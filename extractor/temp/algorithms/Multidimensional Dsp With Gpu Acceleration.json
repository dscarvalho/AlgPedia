{
    "about": "Digital signal processing (DSP) is a ubiquitous methodology in scientific and engineering computations. However, practically, DSP problems are often not only 1-D. For instance, image data are 2-D signals and radar signals are 3-D signals. While the number of dimension increases, the time and/or storage complexity of processing digital signals grow dramatically. Therefore, solving DSP problems in real-time is extremely difficult in reality.", 
    "name": "Multidimensional Dsp With Gpu Acceleration", 
    "classification": "Digital Signal Processing", 
    "full_text": "Digital signal processing (DSP) is a ubiquitous methodology in scientific and engineering computations. However, practically, DSP problems are often not only 1-D. For instance, image data are 2-D signals and radar signals are 3-D signals. While the number of dimension increases, the time and/or storage complexity of processing digital signals grow dramatically. Therefore, solving DSP problems in real-time is extremely difficult in reality.\nModern general purpose graphics processing units (GPGPUs) are considered as having an excellent throughput on vector operations and numeric manipulations through a high degree of parallel computations. While processing digital signals, particularly multidimensional signals, often involves a series of vector operations on massive amount of independent data samples, GPGPUs are now widely employed to accelerate multidimensional DSP, such as image processing, video codecs, radar signal analysis, sonar signal processing, and ultrasound scanning. Conceptually, using GPGPU devices to perform multidimensional DSP is able to dramatically reduce the computation complexity compared with central processing units (CPUs), digital signal processors (DSPs), or other FPGA accelerators.\n\n\nProcessing multidimensional signals is a common problem in scientific research and/or engineering computations. Typically, a DSP problem's computation complexity grows exponentially with the number of dimensions. Notwithstanding, with a high degree of time and storage complexity, it is extremely difficult to process multidimensional signals in real-time. Although many fast algorithms (e.g. FFT) have been proposed for 1-D DSP problems, they are still not efficient enough to be adapted in high dimensional DSP problems. Therefore, it is still hard to obtain the desired computation results with digital signal processors (DSPs). Hence, better algorithms and hardware architecture are needed to accelerate multidimensional DSP computations.\nPractically, to accelerate multidimensional DSP, some common approaches have been proposed and developed in the past decades.\nA makeshift to achieve real-time requirement in multidimensional DSP applications is to use a lower sampling rate, which can efficiently reduce the number of samples to be processed at one time and thereby decrease the total processing time. However, this can lead to the aliasing problem due to the sampling theorem and poor-quality outputs. In some applications, such as military radars and medical images, we are eager to have highly precise and accurate results. In such cases, using a lower sampling rate to reduce the amount of computation in the multidimensional DSP domain is not always allowable.\nDigital signal processors are designed specifically to process vector operations. They have been widely used in DSP computations for decades. However, most digital signal processors are only capable of manipulating few operations in parallel. This kind of designs is sufficient to accelerate audio processing (1-D signals) and image processing (2-D signals). However, with a large amount of data samples in multidimensional signals, this is still not powerful enough to retrieve computation results in real-time.\nIn order to accelerate multidimensional DSP computations, using dedicated supercomputers or cluster computers is required in some circumstances, e.g., weather forecasting and military radars. Nevertheless, using supercomputers designated to simply perform DSP operations takes considerable money cost and energy consumption. Also, it is not practical and suitable for all multidimensional DSP applications.\nGPUs are originally devised to accelerate image processing and video stream rendering. Moreover, since modern GPUs have good ability to perform numeric computations in parallel with a relatively low cost and better energy efficiency, GPUs are becoming a popular alternative to replace supercomputers performing multidimensional DSP.[1]\nModern GPU designs are mainly based on the SIMD (Single Instruction Multiple Data) computation paradigm.[2][3] This type of GPU devices is so-called general-purpose GPUs (GPGPUs).\nGPGPUs are able to perform an operation on multiple independent data concurrently with their vector or SIMD functional units. A modern GPGPU can spawn thousands of concurrent threads and process all threads in a batch manner. With this nature, GPGPUs can be employed as DSP accelerators easily while many DSP problems can be solved by divide-and-conquer algorithms. A large scale and complex DSP problem can be divided into a bunch of small numeric problems and be processed altogether at one time so that the overall time complexity can be reduced significantly. For example, multiplying two M \u00d7 M matrices can be processed by M \u00d7 M concurrent threads on a GPGPU device without any output data dependency. Therefore, theoretically, by means of GPGPU acceleration, we can gain up to M \u00d7 M speedup compared with a traditional CPU or digital signal processor.\nCurrently, there are several existing programming languages or interfaces which support GPGPU programming.\nCUDA is the standard interface to program NVIDIA GPUs. NVIDIA also provides many CUDA libraries to support DSP acceleration on NVIDIA GPU devices.[4]\nOpenCL is an industrial standard which was originally proposed by Apple Inc. and is maintained and developed by the Khronos Group now.[5] OpenCL provides C++ like APIs for programming different devices universally, including GPGPUs.\nThe following figure illustrates the execution flow of launching an OpenCL program on a GPU device. The CPU first detects OpenCL devices (GPU in this case) and than invokes a just-in-time compiler to translate the OpenCL source code into target binary. CPU then sends data to GPU to perform computations. When the GPU is processing data, CPU is free to process its own tasks.\nC++ Amp is a programming model proposed by Microsoft. C++ Amp is a C++ based library designed for programming SIMD processors[6]\nOpenAcc is a programming standard for parallel computing developed by Cray, CAPS, NVIDIA and PGI.[7] OpenAcc targets programming for CPU and GPU heterogeneous systems with C, C++, and Fortran extensions.\nSuppose A and B are two m \u00d7 m matrices and we would like to compute C = A \u00d7 B.\n\n\n\n\n\nA\n\n=\n\n\n(\n\n\n\n\nA\n\n11\n\n\n\n\n\nA\n\n12\n\n\n\n\n\u22ef\n\n\n\nA\n\n1\nm\n\n\n\n\n\n\n\nA\n\n21\n\n\n\n\n\nA\n\n22\n\n\n\n\n\u22ef\n\n\n\nA\n\n2\nm\n\n\n\n\n\n\n\u22ee\n\n\n\u22ee\n\n\n\u22f1\n\n\n\u22ee\n\n\n\n\n\nA\n\nm\n1\n\n\n\n\n\nA\n\nm\n2\n\n\n\n\n\u22ef\n\n\n\nA\n\nm\nm\n\n\n\n\n\n)\n\n\n,\n\n\nB\n\n=\n\n\n(\n\n\n\n\nB\n\n11\n\n\n\n\n\nB\n\n12\n\n\n\n\n\u22ef\n\n\n\nB\n\n1\nm\n\n\n\n\n\n\n\nB\n\n21\n\n\n\n\n\nB\n\n22\n\n\n\n\n\u22ef\n\n\n\nB\n\n2\nm\n\n\n\n\n\n\n\u22ee\n\n\n\u22ee\n\n\n\u22f1\n\n\n\u22ee\n\n\n\n\n\nB\n\nm\n1\n\n\n\n\n\nB\n\nm\n2\n\n\n\n\n\u22ef\n\n\n\nB\n\nm\nm\n\n\n\n\n\n)\n\n\n\n\n{\\displaystyle \\mathbf {A} ={\\begin{pmatrix}A_{11}&A_{12}&\\cdots &A_{1m}\\\\A_{21}&A_{22}&\\cdots &A_{2m}\\\\\\vdots &\\vdots &\\ddots &\\vdots \\\\A_{m1}&A_{m2}&\\cdots &A_{mm}\\\\\\end{pmatrix}},\\quad \\mathbf {B} ={\\begin{pmatrix}B_{11}&B_{12}&\\cdots &B_{1m}\\\\B_{21}&B_{22}&\\cdots &B_{2m}\\\\\\vdots &\\vdots &\\ddots &\\vdots \\\\B_{m1}&B_{m2}&\\cdots &B_{mm}\\\\\\end{pmatrix}}}\n\n\n\n\n\n\n\nC\n\n=\n\nA\n\n\u00d7\n\nB\n\n=\n\n\n(\n\n\n\n\nC\n\n11\n\n\n\n\n\nC\n\n12\n\n\n\n\n\u22ef\n\n\n\nC\n\n1\nm\n\n\n\n\n\n\n\nC\n\n21\n\n\n\n\n\nC\n\n22\n\n\n\n\n\u22ef\n\n\n\nC\n\n2\nm\n\n\n\n\n\n\n\u22ee\n\n\n\u22ee\n\n\n\u22f1\n\n\n\u22ee\n\n\n\n\n\nC\n\nm\n1\n\n\n\n\n\nC\n\nm\n2\n\n\n\n\n\u22ef\n\n\n\nC\n\nm\nm\n\n\n\n\n\n)\n\n\n,\n\n\nC\n\ni\nj\n\n\n=\n\n\u2211\n\nk\n=\n1\n\n\nm\n\n\n\nA\n\ni\nk\n\n\n\nB\n\nk\nj\n\n\n\n\n{\\displaystyle \\mathbf {C} =\\mathbf {A} \\times \\mathbf {B} ={\\begin{pmatrix}C_{11}&C_{12}&\\cdots &C_{1m}\\\\C_{21}&C_{22}&\\cdots &C_{2m}\\\\\\vdots &\\vdots &\\ddots &\\vdots \\\\C_{m1}&C_{m2}&\\cdots &C_{mm}\\\\\\end{pmatrix}},\\quad C_{ij}=\\sum _{k=1}^{m}A_{ik}B_{kj}}\n\n\nTo compute each element in C takes m multiplications and (m \u2013 1) additions. Therefore, with a CPU implementation, the time complexity to achieve this computation is \u0398(n3) in the following C example. However, we have known that elements in C are independent of each other. Hence, the computation can be fully parallelized by SIMD processors, such as GPGPU devices. With a GPGPU implementation, the time complexity significantly reduces to \u0398(n) by unrolling the for-loop as shown in the following OpenCL example.\nConvolution is a frequently used operation in DSP. To compute the 2-D convolution of two m \u00d7 m signals, it requires m2 multiplications and m \u00d7 (m \u2013 1) additions for an output element. That is, the overall time complexity is \u0398(n4) for the entire output signal. As the following OpenCL example shows, with GPGPU acceleration, the total computation time effectively decreases to \u0398(n2) since all output elements are data independent.\n2-D convolution equation:\n\n\n\n\ny\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n=\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\u2217\n\u2217\nh\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n=\n\n\u2211\n\n\nk\n\n1\n\n\n=\n0\n\n\nm\n\u2212\n1\n\n\n\n\u2211\n\n\nk\n\n2\n\n\n=\n0\n\n\nm\n\u2212\n1\n\n\nx\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\nh\n(\n\nn\n\n1\n\n\n\u2212\n\nk\n\n1\n\n\n,\n\nn\n\n2\n\n\n\u2212\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle y(n_{1},n_{2})=x(n_{1},n_{2})**h(n_{1},n_{2})=\\sum _{k_{1}=0}^{m-1}\\sum _{k_{2}=0}^{m-1}x(k_{1},k_{2})h(n_{1}-k_{1},n_{2}-k_{2})}\n\n\nNote that, although the example demonstrated above is a 2-D convolution, a similar approach can be adopted for a higher dimension system. Overall, for a s-D convolution, a GPGPU implementation has time complexity \u0398(ns), whereas a CPU implementation has time complexity \u0398(n2s).\nM-D convolution equation:\n\n\n\n\ny\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n,\n.\n.\n.\n,\n\nn\n\ns\n\n\n)\n=\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n,\n.\n.\n.\n,\n\nn\n\ns\n\n\n)\n\u2217\n\u2217\nh\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n,\n.\n.\n.\n,\n\nn\n\ns\n\n\n)\n=\n\n\u2211\n\n\nk\n\n1\n\n\n=\n0\n\n\n\nm\n\n1\n\n\n\u2212\n1\n\n\n\n\u2211\n\n\nk\n\n2\n\n\n=\n0\n\n\n\nm\n\n2\n\n\n\u2212\n1\n\n\n.\n.\n.\n\n\u2211\n\n\nk\n\ns\n\n\n=\n0\n\n\n\nm\n\ns\n\n\n\u2212\n1\n\n\nx\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n,\n.\n.\n.\n,\n\nk\n\ns\n\n\n)\nh\n(\n\nn\n\n1\n\n\n\u2212\n\nk\n\n1\n\n\n,\n\nn\n\n2\n\n\n\u2212\n\nk\n\n2\n\n\n,\n.\n.\n.\n,\n\nn\n\ns\n\n\n\u2212\n\nk\n\ns\n\n\n)\n\n\n{\\displaystyle y(n_{1},n_{2},...,n_{s})=x(n_{1},n_{2},...,n_{s})**h(n_{1},n_{2},...,n_{s})=\\sum _{k_{1}=0}^{m_{1}-1}\\sum _{k_{2}=0}^{m_{2}-1}...\\sum _{k_{s}=0}^{m_{s}-1}x(k_{1},k_{2},...,k_{s})h(n_{1}-k_{1},n_{2}-k_{2},...,n_{s}-k_{s})}\n\n\nIn addition to convolution, the discrete-time Fourier transform (DTFT) is another technique which is often used in system analysis.\n\n\n\n\nX\n(\n\n\u03a9\n\n1\n\n\n,\n\n\u03a9\n\n2\n\n\n,\n.\n.\n.\n,\n\n\u03a9\n\ns\n\n\n)\n=\n\n\u2211\n\n\nn\n\n1\n\n\n=\n0\n\n\n\nm\n\n1\n\n\n\u2212\n1\n\n\n\n\u2211\n\n\nn\n\n2\n\n\n=\n0\n\n\n\nm\n\n2\n\n\n\u2212\n1\n\n\n.\n.\n.\n\n\u2211\n\n\nn\n\ns\n\n\n=\n0\n\n\n\nm\n\ns\n\n\n\u2212\n1\n\n\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n,\n.\n.\n.\n,\n\nn\n\ns\n\n\n)\n\ne\n\n\u2212\nj\n(\n\n\u03a9\n\n1\n\n\n\nn\n\n1\n\n\n+\n\n\u03a9\n\n1\n\n\n\nn\n\n1\n\n\n+\n.\n.\n.\n+\n\n\u03a9\n\ns\n\n\n\nn\n\ns\n\n\n)\n\n\n\n\n{\\displaystyle X(\\Omega _{1},\\Omega _{2},...,\\Omega _{s})=\\sum _{n_{1}=0}^{m_{1}-1}\\sum _{n_{2}=0}^{m_{2}-1}...\\sum _{n_{s}=0}^{m_{s}-1}x(n_{1},n_{2},...,n_{s})e^{-j(\\Omega _{1}n_{1}+\\Omega _{1}n_{1}+...+\\Omega _{s}n_{s})}}\n\n\nPractically, to implement an M-D DTFT, we can perform M times 1-D DFTF and matrix transpose with respect to each dimension. With a 1-D DTFT operation, GPGPU can conceptually reduce the complexity from \u0398(n2) to \u0398(n) as illustrated by the following example of OpenCL implementation. That is, an M-D DTFT the complexity of GPGPU can be computed on a GPU with a complexity of \u0398(n2). While some GPGPUs are also equipped with hardware FFT accelerators internally, this implementation might be also optimized by invoking the FFT APIs or libraries provided by GPU manufacture.[8]\nDesigning a multidimensional digital filter is a big challenge, especially IIR filters. Typically it relies on computers to solve difference equations and obtain a set of approximated solutions. While GPGPU computation is becoming popular, several adaptive algorithms have been proposed to design multidimensional FIR and/or IIR filters by means of GPGPUs.[9][10][11]\nRadar systems usually require to reconstruct a numerous amount of 3-D or 4-D data samples in real-time. Traditionally, particularly in military, this needs supercomputers' support. Nowadays, GPGPUs are also employed to replace supercomputers to process radar signals. For example, to process synthetic aperture radar (SAR) signals, it usually involves multidimensional FFT computations.[12][13][14] GPGPUs can be used to rapidly perform FFT and/or iFFT in this kind of applications.\nMany self-driving cars apply 3-D image recognition techniques to auto control the vehicles. Clearly, to accommodate the fast changing exterior environment, the recognition and decision processes must be done in real-time. GPGPUs are excellent devices to achieve the goal.[15]\nIn order to have accurate diagnosis, 2-D or 3-D medical signals, such as ultrasound, X-ray, MRI, and CT, often require very high sampling rate and image resolutions to reconstruct images. By applying GPGPUs' superior computation power, it was shown that we can acquire better-quality medical images[16][17]", 
    "dbpedia_url": "http://dbpedia.org/resource/Multidimensional_DSP_with_GPU_Acceleration", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Multidimensional_DSP_with_GPU_Acceleration\n"
}