{
    "about": "ProxmapSort, or Proxmap sort, is a sorting algorithm that works by partitioning an array of data items, or keys, into a number of \"subarrays\" (termed buckets, in similar sorts). The name is short for computing a \"proximity map,\" which indicates for each key K the beginning of a subarray where K will reside in the final sorted order. Keys are placed into each subarray using insertion sort. If keys are \"well distributed\" among the subarrays, sorting occurs in linear time. The computational complexity estimates involve the number of subarrays and the proximity mapping function, the \"map key,\" used. It is a form of bucket and radix sort.", 
    "name": "Proxmap Sort", 
    "classification": "Sorting Algorithms", 
    "full_text": "ProxmapSort, or Proxmap sort, is a sorting algorithm that works by partitioning an array of data items, or keys, into a number of \"subarrays\" (termed buckets, in similar sorts). The name is short for computing a \"proximity map,\" which indicates for each key K the beginning of a subarray where K will reside in the final sorted order. Keys are placed into each subarray using insertion sort. If keys are \"well distributed\" among the subarrays, sorting occurs in linear time. The computational complexity estimates involve the number of subarrays and the proximity mapping function, the \"map key,\" used. It is a form of bucket and radix sort.\nOnce a ProxmapSort is complete, ProxmapSearch can be used to find keys in the sorted array in \n\n\n\nO\n(\n1\n)\n\n\n{\\displaystyle O(1)}\n\n time if the keys were well distributed during the sort.\nBoth algorithms were invented in the late 1980s by Prof. Thomas A. Standish at the University of California, Irvine.\n\n\nIn general: Given an array A with n keys:\nSimplied version: Given an array A with n keys\nNote: \"keys\" may also contain other data, for instance an array of Student objects that contain the key plus a student ID and name. This makes ProxMapSort suitable for organizing groups of objects, not just keys themselves.\nConsider a full array: A[0 to n-1] with n keys. Let i be an index of A. Sort A's keys into array A2 of equal size.\nThe map key function is defined as mapKey(key) = floor(K).\n\nHere A is the array to be sorted and the mapKey functions determines the number of subarrays to use. For example, floor(K) will simply assign as many subarrays as there are integers from the data in A. Dividing the key by a constant reduces the number of subarrays; different functions can be used to translate the range of elements in A to subarrays, such as converting the letters A\u2013Z to 0\u201325 or returning the first character (0\u2013255) for sorting strings. Subarrays are sorted as the data comes in, not after all data has been placed into the subarray, as is typical in bucket sorting.\nProxmapSearch uses the proxMap array generated by a previously done ProxmapSort to find keys in the sorted array A2 in constant time.\nComputing H, P, and L all take \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n time. Each is computed with one pass through an array, with constant time spent at each array location.\nHaving a good MapKey function is imperative for avoiding the worst case. We must know something about the distribution of the data to come up with a good key.\nSince ProxmapSort is not a comparison sort, the \u03a9(n log n) lower bound is inapplicable.[citation needed] Its speed can be attributed to it not being comparison-based and using arrays instead of dynamically allocated objects and pointers that must be followed, such as is done with when using a binary search tree.\nProxmapSort allows for the use of ProxmapSearch. Despite the O(n) build time, ProxMapSearch makes up for it with its \n\n\n\nO\n(\n1\n)\n\n\n{\\displaystyle O(1)}\n\n average access time, making it very appealing for large databases. If the data doesn't need to be updated often, the access time may make this function more favorable than other non-comparison sorting based sorts.\nLike ProxmapSort, bucket sort generally operates on a list of n numeric inputs between zero and some maximum key or value M and divides the value range into n buckets each of size M/n. If each bucket is sorted using insertion sort, ProxmapSort and bucket sort can be shown to run in predicted linear time.[1][original research?] However, the performance of this sort degrades with clustering (or too few buckets with too many keys); if many values occur close together, they will all fall into a single bucket and performance will be severely diminished. This behavior also holds for ProxmapSort: if the buckets are too large, its performance will degrade severely.", 
    "dbpedia_url": "http://dbpedia.org/resource/Proxmap_sort", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Proxmap_sort\n"
}