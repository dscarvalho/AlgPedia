{
    "about": "Finite-difference time-domain or Yee's method (named after the Chinese American applied mathematician Kane S. Yee, born 1934) is a numerical analysis technique used for modeling computational electrodynamics (finding approximate solutions to the associated system of differential equations). Since it is a time-domain method, FDTD solutions can cover a wide frequency range with a single simulation run, and treat nonlinear material properties in a natural way.", 
    "classification": "Computational Physics", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Finite-difference_time-domain_method\n", 
    "full_text": "Finite-difference time-domain or Yee's method (named after the Chinese American applied mathematician Kane S. Yee, born 1934) is a numerical analysis technique used for modeling computational electrodynamics (finding approximate solutions to the associated system of differential equations). Since it is a time-domain method, FDTD solutions can cover a wide frequency range with a single simulation run, and treat nonlinear material properties in a natural way.\nThe FDTD method belongs in the general class of grid-based differential numerical modeling methods (finite difference methods). The time-dependent Maxwell's equations (in partial differential form) are discretized using central-difference approximations to the space and time partial derivatives. The resulting finite-difference equations are solved in either software or hardware in a leapfrog manner: the electric field vector components in a volume of space are solved at a given instant in time; then the magnetic field vector components in the same spatial volume are solved at the next instant in time; and the process is repeated over and over again until the desired transient or steady-state electromagnetic field behavior is fully evolved.\n\n\nFinite difference schemes for time-dependent PDEs have been employed for many years in computational fluid dynamics problems,[1] including the idea of using centered finite difference operators on staggered grids in space and time to achieve second-order accuracy.[1] The novelty of Kane Yee's FDTD scheme, presented in his seminal 1966 paper,[2] was to apply centered finite difference operators on staggered grids in space and time for each electric and magnetic vector field component in Maxwell's curl equations. The descriptor \"Finite-difference time-domain\" and its corresponding \"FDTD\" acronym were originated by Allen Taflove in 1980.[3] Since about 1990, FDTD techniques have emerged as primary means to computationally model many scientific and engineering problems dealing with electromagnetic wave interactions with material structures. Current FDTD modeling applications range from near-DC (ultralow-frequency geophysics involving the entire Earth-ionosphere waveguide) through microwaves (radar signature technology, antennas, wireless communications devices, digital interconnects, biomedical imaging/treatment) to visible light (photonic crystals, nanoplasmonics, solitons, and biophotonics).[4] In 2006, an estimated 2,000 FDTD-related publications appeared in the science and engineering literature (see Popularity). As of 2013, there are at least 25 commercial/proprietary FDTD software vendors; 13 free-software/open-source-software FDTD projects; and 2 freeware/closed-source FDTD projects, some not for commercial use (see External links).\nAn appreciation of the basis, technical development, and possible future of FDTD numerical techniques for Maxwell\u2019s equations can be developed by first considering their history. The following lists some of the key publications in this area.\nWhen Maxwell's differential equations are examined, it can be seen that the change in the E-field in time (the time derivative) is dependent on the change in the H-field across space (the curl). This results in the basic FDTD time-stepping relation that, at any point in space, the updated value of the E-field in time is dependent on the stored value of the E-field and the numerical curl of the local distribution of the H-field in space.[2]\nThe H-field is time-stepped in a similar manner. At any point in space, the updated value of the H-field in time is dependent on the stored value of the H-field and the numerical curl of the local distribution of the E-field in space. Iterating the E-field and H-field updates results in a marching-in-time process wherein sampled-data analogs of the continuous electromagnetic waves under consideration propagate in a numerical grid stored in the computer memory.\nThis description holds true for 1-D, 2-D, and 3-D FDTD techniques. When multiple dimensions are considered, calculating the numerical curl can become complicated. Kane Yee's seminal 1966 paper proposed spatially staggering the vector components of the E-field and H-field about rectangular unit cells of a Cartesian computational grid so that each E-field vector component is located midway between a pair of H-field vector components, and conversely.[2] This scheme, now known as a Yee lattice, has proven to be very robust, and remains at the core of many current FDTD software constructs.\nFurthermore, Yee proposed a leapfrog scheme for marching in time wherein the E-field and H-field updates are staggered so that E-field updates are conducted midway during each time-step between successive H-field updates, and conversely.[2] On the plus side, this explicit time-stepping scheme avoids the need to solve simultaneous equations, and furthermore yields dissipation-free numerical wave propagation. On the minus side, this scheme mandates an upper bound on the time-step to ensure numerical stability.[9] As a result, certain classes of simulations can require many thousands of time-steps for completion.\nTo implement an FDTD solution of Maxwell's equations, a computational domain must first be established. The computational domain is simply the physical region over which the simulation will be performed. The E and H fields are determined at every point in space within that computational domain. The material of each cell within the computational domain must be specified. Typically, the material is either free-space (air), metal, or dielectric. Any material can be used as long as the permeability, permittivity, and conductivity are specified.\nThe permittivity of dispersive materials in tabular form cannot be directly substituted into the FDTD scheme. Instead, it can be approximated using multiple Debye, Drude, Lorentz or critical point terms. This approximation can be obtained using open fitting programs[68] and does not necessarily have physical meaning.\nOnce the computational domain and the grid materials are established, a source is specified. The source can be current on a wire, applied electric field or impinging plane wave. In the last case FDTD can be used to simulate light scattering from arbitrary shaped objects, planar periodic structures at various incident angles,[69][70] and photonic band structure of infinite periodic structures.[71][72]\nSince the E and H fields are determined directly, the output of the simulation is usually the E or H field at a point or a series of points within the computational domain. The simulation evolves the E and H fields forward in time.\nProcessing may be done on the E and H fields returned by the simulation. Data processing may also occur while the simulation is ongoing.\nWhile the FDTD technique computes electromagnetic fields within a compact spatial region, scattered and/or radiated far fields can be obtained via near-to-far-field transformations.[14]\nEvery modeling technique has strengths and weaknesses, and the FDTD method is no different.\nThe most commonly used grid truncation techniques for open-region FDTD modeling problems are the Mur absorbing boundary condition (ABC),[13] the Liao ABC,[16] and various perfectly matched layer (PML) formulations.[4][42][46] The Mur and Liao techniques are simpler than PML. However, PML (which is technically an absorbing region rather than a boundary condition per se) can provide orders-of-magnitude lower reflections. The PML concept was introduced by J.-P. Berenger in a seminal 1994 paper in the Journal of Computational Physics.[42] Since 1994, Berenger's original split-field implementation has been modified and extended to the uniaxial PML (UPML), the convolutional PML (CPML), and the higher-order PML. The latter two PML formulations have increased ability to absorb evanescent waves, and therefore can in principle be placed closer to a simulated scattering or radiating structure than Berenger's original formulation.\nTo reduce undesired numerical reflection from the PML additional back absorbing layers technique can be used.[74]\n\nNotwithstanding both the general increase in academic publication throughput during the same period and the overall expansion of interest in all Computational electromagnetics (CEM) techniques, there are seven primary reasons for the tremendous expansion of interest in FDTD computational solution approaches for Maxwell\u2019s equations:\nTaflove has argued that these factors combine to suggest that FDTD will remain one of the dominant computational electrodynamics techniques (as well as potentially other multiphysics problems).[4]\nThere are hundreds of simulation tools that implement FDTD algorithms, many optimized to run on parallel-processing clusters.\nFrederick Moxley suggests further applications with computational quantum mechanics and simulations.[76]\nThe following article in Nature Milestones: Photons illustrates the historical significance of the FDTD method as related to Maxwell's equations:\nAllen Taflove's interview, \"Numerical Solution,\" in the January 2015 focus issue of Nature Photonics honoring the 150th anniversary of the publication of Maxwell's equations. This interview touches on how the development of FDTD ties into the century and one-half history of Maxwell's theory of electrodynamics:\nThe following university-level textbooks provide a good general introduction to the FDTD method:\nFree software/Open-source software FDTD projects:\nFreeware/Closed source FDTD projects (some not for commercial use):", 
    "name": "Finite Difference Time Domain Method"
}