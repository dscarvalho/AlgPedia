{
    "about": "In computer science, an exponential search (also called doubling search or galloping search)[1] is an algorithm, created by Jon Bentley and Andrew Chi-Chih Yao in 1976, for searching sorted, unbounded/infinite lists.[2] There are numerous ways to implement this with the most common being to determine a range that the search key resides in and performing a binary search within that range. This takes O(log\u00a0i) where i is the position of the search key in the list, if the search key is in the list, or the position where the search key should be, if the search key is not in the list.", 
    "name": "Exponential Search", 
    "classification": "Search Algorithms", 
    "full_text": "In computer science, an exponential search (also called doubling search or galloping search)[1] is an algorithm, created by Jon Bentley and Andrew Chi-Chih Yao in 1976, for searching sorted, unbounded/infinite lists.[2] There are numerous ways to implement this with the most common being to determine a range that the search key resides in and performing a binary search within that range. This takes O(log\u00a0i) where i is the position of the search key in the list, if the search key is in the list, or the position where the search key should be, if the search key is not in the list.\nExponential search can also be used to search in bounded lists. Exponential search can even out-perform more traditional searches for bounded lists, such as binary search, when the element being searched for is near the beginning of the array. This is because exponential search will run in O(log\u00a0i) time, where i is the index of the element being searched for in the list, whereas binary search would run in O(log\u00a0n) time, where n is the number of elements in the list.\n\n\nExponential search allows for searching through a sorted, unbounded list for a specified input value (the search \"key\"). The algorithm consists of two stages. The first stage determines a range in which the search key would reside if it were in the list. In the second stage, a binary search is performed on this range. In the first stage, assuming that the list is sorted in ascending order, the algorithm looks for the first exponent, j, where the value 2j is greater than the search key. This value, 2j becomes the upper bound for the binary search with the previous power of 2, 2j - 1, being the lower bound for the binary search.[3]\nIn each step, the algorithm compares the search key value with the key value at the current search index. If the element at the current index is smaller than the search key, the algorithm repeats, skipping to the next search index by doubling it, calculating the next power of 2.[3] If the element at the current index is larger than the search key, the algorithm now knows that the search key, if it is contained in the list at all, is located in the interval formed by the previous search index, 2j - 1, and the current search index, 2j. The binary search is then performed with the result of either a failure, if the search key is not in the list, or the position of the search key in the list.\nThe first stage of the algorithm takes O(log\u00a0i) time, where i is the index where the search key would be in the list. This is because, in determining the upper bound for the binary search, the while loop is executed exactly \n\n\n\n\u2308\nlog\n\u2061\n(\ni\n)\n\u2309\n\n\n{\\displaystyle \\lceil \\log(i)\\rceil }\n\n times. Since the list is sorted, after doubling the search index \n\n\n\n\u2308\nlog\n\u2061\n(\ni\n)\n\u2309\n\n\n{\\displaystyle \\lceil \\log(i)\\rceil }\n\n times, the algorithm will be at a search index that is greater than or equal to i as \n\n\n\n\n2\n\n\u2308\nlog\n\u2061\n(\ni\n)\n\u2309\n\n\n\u2265\ni\n\n\n{\\displaystyle 2^{\\lceil \\log(i)\\rceil }\\geq i}\n\n. As such, the first stage of the algorithm takes O(log\u00a0i) time.\nThe second part of the algorithm also takes O(log\u00a0i) time. As the second stage is simply a binary search, it takes O(log\u00a0n) where n is the size of the interval being searched. The size of this interval would be 2j - 2j - 1 where, as seen above, j = log\u00a0i. This means that the size of the interval being searched is 2log i - 2log i - 1 = 2log i - 1. This gives us a run time of log\u00a0(2log i - 1) = log\u00a0(i) - 1 = O(log\u00a0i).\nThis gives the algorithm a total runtime, calculated by summing the runtimes of the two stages, of O(log\u00a0i) + O(log\u00a0i) = 2 O(log\u00a0i) = O(log\u00a0i).\nBentley and Yao suggested several variations for exponential search.[2] These variations consist of performing a binary search, as opposed to a unary search, when determining the upper bound for the binary search in the second stage of the algorithm. This splits the first stage of the algorithm into two parts, making the algorithm a three-stage algorithm overall. The new first stage determines a value \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n, much like before, such that \n\n\n\n\n2\n\n\nj\n\u2032\n\n\n\n\n\n{\\displaystyle 2^{j'}}\n\n is larger than the search key and \n\n\n\n\n2\n\n\nj\n\u2032\n\n\n/\n\n2\n\n\n\n\n{\\displaystyle 2^{j'/2}}\n\n is lower than the search key. Previously, \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n was determined in a unary fashion by calculating the next power of 2 (i.e., adding 1 to j). In the variation, it is proposed that \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n is doubled instead (e.g., jumping from 22 to 24 as opposed to 23). The first \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n such that \n\n\n\n\n2\n\n\nj\n\u2032\n\n\n\n\n\n{\\displaystyle 2^{j'}}\n\n is greater than the search key forms a much rougher upper bound than before. Once this \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n is found, the algorithm moves to its second stage and a binary search is performed on the interval formed by \n\n\n\n\nj\n\u2032\n\n\n/\n\n2\n\n\n{\\displaystyle j'/2}\n\n and \n\n\n\n\nj\n\u2032\n\n\n\n{\\displaystyle j'}\n\n, giving the more accurate upper bound exponent j. From here, the third stage of the algorithm performs the binary search on the interval 2j - 1 and 2j, as before. The performance of this variation is \n\n\n\n\u230a\nlog\n\u2061\ni\n\u230b\n+\n2\n\u230a\nlog\n\u2061\n(\n\u230a\nlog\n\u2061\ni\n\u230b\n+\n1\n)\n\u230b\n+\n1\n\n\n{\\displaystyle \\lfloor \\log i\\rfloor +2\\lfloor \\log(\\lfloor \\log i\\rfloor +1)\\rfloor +1}\n\n = O(log\u00a0i).\nBentley and Yao generalize this variation into one where any number, k, of binary searches is performed during the first stage of the algorithm, giving the k-nested binary search variation. The asymptotic runtime does not change for the variations, running in O(log\u00a0i) time, as with the original exponential search algorithm.\nAlso, a data structure with a tight version of the dynamic finger property can be given when the above result of the k-nested binary search is used on a sorted array.[4] Using this, the number of comparisons done during a search is log\u00a0(d) + log\u00a0log\u00a0(d) + ... + O(log\u00a0*d), where d is the difference in rank between the last element that was accessed and the current element being accessed.", 
    "dbpedia_url": "http://dbpedia.org/resource/Exponential_search", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Exponential_search\n"
}