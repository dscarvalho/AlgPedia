{
    "about": "In graph theory, the graph bandwidth problem is to label the n vertices vi of a graph G with distinct integers f(vi) so that the quantity \n\n\n\nmax\n{\n\n\n|\n\nf\n(\n\nv\n\ni\n\n\n)\n\u2212\nf\n(\n\nv\n\nj\n\n\n)\n\n|\n\n:\n\nv\n\ni\n\n\n\nv\n\nj\n\n\n\u2208\nE\n\n}\n\n\n{\\displaystyle \\max\\{\\,|f(v_{i})-f(v_{j})|:v_{i}v_{j}\\in E\\,\\}}\n\n is minimized (E is the edge set of G).[1] The problem may be visualized as placing the vertices of a graph at distinct integer points along the x-axis so that the length of the longest edge is minimized. Such placement is called linear graph arrangement, linear graph layout or linear graph placement.[2]", 
    "name": "Graph Bandwidth", 
    "classification": "Graph Algorithms", 
    "full_text": "In graph theory, the graph bandwidth problem is to label the n vertices vi of a graph G with distinct integers f(vi) so that the quantity \n\n\n\nmax\n{\n\n\n|\n\nf\n(\n\nv\n\ni\n\n\n)\n\u2212\nf\n(\n\nv\n\nj\n\n\n)\n\n|\n\n:\n\nv\n\ni\n\n\n\nv\n\nj\n\n\n\u2208\nE\n\n}\n\n\n{\\displaystyle \\max\\{\\,|f(v_{i})-f(v_{j})|:v_{i}v_{j}\\in E\\,\\}}\n\n is minimized (E is the edge set of G).[1] The problem may be visualized as placing the vertices of a graph at distinct integer points along the x-axis so that the length of the longest edge is minimized. Such placement is called linear graph arrangement, linear graph layout or linear graph placement.[2]\nThe weighted graph bandwidth problem is a generalization wherein the edges are assigned weights wij and the cost function to be minimized is \n\n\n\nmax\n{\n\n\nw\n\ni\nj\n\n\n\n|\n\nf\n(\n\nv\n\ni\n\n\n)\n\u2212\nf\n(\n\nv\n\nj\n\n\n)\n\n|\n\n:\n\nv\n\ni\n\n\n\nv\n\nj\n\n\n\u2208\nE\n\n}\n\n\n{\\displaystyle \\max\\{\\,w_{ij}|f(v_{i})-f(v_{j})|:v_{i}v_{j}\\in E\\,\\}}\n\n.\nIn terms of matrices, the (unweighted) graph bandwidth is the bandwidth of the symmetric matrix which is the adjacency matrix of the graph. The bandwidth may also be defined as one less than the maximum clique size in a proper interval supergraph of the given graph, chosen to minimize its clique size (Kaplan & Shamir 1996).\n\n\nFor several families of graphs, the bandwidth \n\n\n\n\u03c6\n(\nG\n)\n\n\n{\\displaystyle \\varphi (G)}\n\n is given by an explicit formula.\nThe bandwidth of a path graph Pn on n vertices is\u00a01, and for a complete graph Km we have \n\n\n\n\u03c6\n(\n\nK\n\nn\n\n\n)\n=\nn\n\u2212\n1\n\n\n{\\displaystyle \\varphi (K_{n})=n-1}\n\n. For the complete bipartite graph Km,n,\nwhich was proved by Chv\u00e1tal.[3] As a special case of this formula, the star graph \n\n\n\n\nS\n\nk\n\n\n=\n\nK\n\nk\n,\n1\n\n\n\n\n{\\displaystyle S_{k}=K_{k,1}}\n\n on k\u00a0+\u00a01 vertices has bandwidth \n\n\n\n\u03c6\n(\n\nS\n\nk\n\n\n)\n=\n\u230a\n(\nk\n\u2212\n1\n)\n\n/\n\n2\n\u230b\n+\n1\n\n\n{\\displaystyle \\varphi (S_{k})=\\lfloor (k-1)/2\\rfloor +1}\n\n.\nFor the hypercube graph \n\n\n\n\nQ\n\nn\n\n\n\n\n{\\displaystyle Q_{n}}\n\n on \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n vertices the bandwidth was determined by Harper (1966) to be\nChvat\u00e1lov\u00e1 showed[4] that the bandwidth of the m\u00a0\u00d7\u00a0n square grid graph \n\n\n\n\nP\n\nm\n\n\n\u00d7\n\nP\n\nn\n\n\n\n\n{\\displaystyle P_{m}\\times P_{n}}\n\n, that is, the Cartesian product of two path graphs on \n\n\n\nm\n\n\n{\\displaystyle m}\n\n and \n\n\n\nn\n\n\n{\\displaystyle n}\n\n vertices, is equal to\u00a0min{m,n}.\nThe bandwidth of a graph can be bounded in terms of various other graph parameters. For instance, letting \u03c7(G) denote the chromatic number of G,\nletting diam(G) denote the diameter of G, the following inequalities hold:[5]\nwhere \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the number of vertices in \n\n\n\nG\n\n\n{\\displaystyle G}\n\n.\nIf a graph G has bandwidth k, then its pathwidth is at most k (Kaplan & Shamir 1996), and its tree-depth is at most k\u00a0log(n/k) (Gruber 2012). In contrast, as noted in the previous section, the star graph Sk, a structurally very simple example of a tree, has comparatively large bandwidth. Observe that the pathwidth of Sk is\u00a01, and its tree-depth is\u00a02.\nSome graph families of bounded degree have sublinear bandwidth: Chung (1988) proved that if T is a tree of maximum degree at most \u2206, then\nMore generally, for planar graphs of bounded maximum degree at most \u2206, a similar bound holds (cf. B\u00f6ttcher et al. 2010):\nBoth the unweighted and weighted versions are special cases of the quadratic bottleneck assignment problem. The bandwidth problem is NP-hard, even for some special cases.[6] Regarding the existence of efficient approximation algorithms, it is known that the bandwidth is NP-hard to approximate within any constant, and this even holds when the input graphs are restricted to caterpillar trees (Dubey, Feige & Unger 2010). For the case of dense graphs, a 3-approximation algorithm was designed by Karpinski, Wirtgen & Zelikovsky (1997). On the other hand, a number of polynomially-solvable special cases are known.[2] A heuristic algorithm for obtaining linear graph layouts of low bandwidth is the Cuthill\u2013McKee algorithm. Fast multilevel algorithm for graph bandwidth computation was proposed in.[7]\nThe interest in this problem comes from some application areas.\nOne area is sparse matrix/band matrix handling, and general algorithms from this area, such as Cuthill\u2013McKee algorithm, may be applied to find approximate solutions for the graph bandwidth problem.\nAnother application domain is in electronic design automation. In standard cell design methodology, typically standard cells have the same height, and their placement is arranged in a number of rows. In this context, graph bandwidth problem models the problem of placement of a set of standard cells in a singe row with the goal of minimizing the maximal propagation delay (which is assumed to be proportional to wire length).", 
    "dbpedia_url": "http://dbpedia.org/resource/Graph_bandwidth", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Graph_bandwidth\n"
}