{
    "about": "The quantum algorithm for linear systems of equations, designed by Aram Harrow, Avinatan Hassidim, and Seth Lloyd, is a quantum algorithm for solving linear systems formulated in 2009. The algorithm estimates the result of a scalar measurement on the solution vector to a given linear system of equations.[1]", 
    "name": "Quantum Algorithm For Linear Systems Of Equations", 
    "classification": "Quantum Algorithms", 
    "full_text": "The quantum algorithm for linear systems of equations, designed by Aram Harrow, Avinatan Hassidim, and Seth Lloyd, is a quantum algorithm for solving linear systems formulated in 2009. The algorithm estimates the result of a scalar measurement on the solution vector to a given linear system of equations.[1]\nThe algorithm is one of the main fundamental algorithms expected to provide a speedup over their classical counterparts, along with Shor's factoring algorithm, Grover's search algorithm and quantum simulation. Provided the linear system is a sparse and has a low condition number \n\n\n\n\u03ba\n\n\n{\\displaystyle \\kappa }\n\n, and that the user is interested in the result of a scalar measurement on the solution vector, instead of the values of the solution vector itself, then the algorithm has a runtime of \n\n\n\nO\n(\nlog\n\u2061\n(\nN\n)\n\n\u03ba\n\n2\n\n\n)\n\n\n{\\displaystyle O(\\log(N)\\kappa ^{2})}\n\n, where \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is the number of variables in the linear system. This offers an exponential speedup over the fastest classical algorithm, which runs in \n\n\n\nO\n(\nN\n\u03ba\n)\n\n\n{\\displaystyle O(N\\kappa )}\n\n (or \n\n\n\nO\n(\nN\n\n\n\u03ba\n\n\n)\n\n\n{\\displaystyle O(N{\\sqrt {\\kappa }})}\n\n for positive semidefinite matrices).\nAn implementation of the quantum algorithm for linear systems of equations was first demonstrated in 2013 by Cai et al., Barz et al.and Pan et al. in parallel. The demonstrations consisted of simple linear equations on specially designed quantum devices.[2][3] [4]\nDue to the prevalence of linear systems in virtually all areas of science and engineering, the quantum algorithm for linear systems of equations has the potential for widespread applicability.[5]\n\n\nThe problem we are trying to solve is: given a Hermitian \n\n\n\nN\n\u00d7\nN\n\n\n{\\displaystyle N\\times N}\n\n matrix \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and a unit vector \n\n\n\n\n\nb\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {b}}}\n\n, find the solution vector \n\n\n\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}}\n\n satisfying \n\n\n\nA\n\n\nx\n\u2192\n\n\n=\n\n\nb\n\u2192\n\n\n\n\n{\\displaystyle A{\\overrightarrow {x}}={\\overrightarrow {b}}}\n\n. This algorithm assumes that the user is not interested in the values of \n\n\n\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}}\n\n itself, but rather the result of applying some operator \n\n\n\nM\n\n\n{\\displaystyle M}\n\n onto x, \n\n\n\n\u27e8\nx\n\n|\n\nM\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle \\langle x|M|x\\rangle }\n\n.\nFirst, the algorithm represents the vector \n\n\n\n\n\nb\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {b}}}\n\n as a quantum state of the form:\nNext, Hamiltonian simulation techniques are used to apply the unitary operator \n\n\n\n\ne\n\ni\nA\nt\n\n\n\n\n{\\displaystyle e^{iAt}}\n\n to \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n for a superposition of different times \n\n\n\nt\n\n\n{\\displaystyle t}\n\n. The ability to decompose \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n into the eigenbasis of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and to find the corresponding eigenvalues \n\n\n\n\n\u03bb\n\nj\n\n\n\n\n{\\displaystyle \\lambda _{j}}\n\n is facilitated by the use of quantum phase estimation.\nThe state of the system after this decomposition is approximately:\nwhere \n\n\n\n\nu\n\nj\n\n\n\n\n{\\displaystyle u_{j}}\n\n is the eigenvector basis of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n, and \n\n\n\n\n|\n\nb\n\u27e9\n=\n\n\u2211\n\nj\n\n\n=\n\n\n1\n\n\nN\n\n\n\n\u03b2\n\nj\n\n\n\n|\n\n\nu\n\nj\n\n\n\u27e9\n\n\n{\\displaystyle |b\\rangle =\\sum _{j{\\mathop {=}}1}^{N}\\beta _{j}|u_{j}\\rangle }\n\n.\nWe would then like to perform the linear map taking \n\n\n\n\n|\n\n\n\u03bb\n\nj\n\n\n\u27e9\n\n\n{\\displaystyle |\\lambda _{j}\\rangle }\n\n to \n\n\n\nC\n\n\u03bb\n\nj\n\n\n\u2212\n1\n\n\n\n|\n\n\n\u03bb\n\nj\n\n\n\u27e9\n\n\n{\\displaystyle C\\lambda _{j}^{-1}|\\lambda _{j}\\rangle }\n\n, where \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is a normalizing constant. The linear mapping operation is not unitary and thus will require a number of repetitions as it has some probability of failing. After it succeeds, we uncompute the \n\n\n\n\n|\n\n\n\u03bb\n\nj\n\n\n\u27e9\n\n\n{\\displaystyle |\\lambda _{j}\\rangle }\n\n register and are left with a state proportional to:\nWhere \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n is a quantum-mechanical representation of the desired solution vector\u00a0x. To read out all components of x would require the procedure be repeated at least N times. However, it is often the case that one is not interested in \n\n\n\nx\n\n\n{\\displaystyle x}\n\n itself, but rather some expectation value of a linear operator M acting on\u00a0x. By mapping M to a quantum-mechanical operator and performing the quantum measurement corresponding to M, we obtain an estimate of the expectation value \n\n\n\n\u27e8\nx\n\n|\n\nM\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle \\langle x|M|x\\rangle }\n\n. This allows for a wide variety of features of the vector x to be extracted including normalization, weights in different parts of the state space, and moments without actually computing all the values of the solution vector\u00a0x.\nFirstly, the algorithm requires that the matrix \n\n\n\nA\n\n\n{\\displaystyle A}\n\n be Hermitian so that it can be converted into a unitary operator. In the case where \n\n\n\nA\n\n\n{\\displaystyle A}\n\n is not Hermitian, define\nAs \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is Hermitian, the algorithm can now be used to solve \n\n\n\nC\ny\n=\n\n\n[\n\n\n\nb\n\n\n\n\n0\n\n\n\n]\n\n\n.\n\n\n{\\displaystyle Cy={\\begin{bmatrix}b\\\\0\\end{bmatrix}}.}\n\n to obtain \n\n\n\ny\n=\n\n\n[\n\n\n\n0\n\n\n\n\nx\n\n\n\n]\n\n\n\n\n{\\displaystyle y={\\begin{bmatrix}0\\\\x\\end{bmatrix}}}\n\n.\nSecondly, The algorithm requires an efficient procedure to prepare \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n, the quantum representation of b. It is assumed that there exists some linear operator \n\n\n\nB\n\n\n{\\displaystyle B}\n\n that can take some arbitrary quantum state \n\n\n\n\n|\n\n\ni\nn\ni\nt\ni\na\nl\n\n\u27e9\n\n\n{\\displaystyle |\\mathrm {initial} \\rangle }\n\n to \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n efficiently or that this algorithm is a subroutine in a larger algorithm and is given \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n as input. Any error in the preparation of state \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n is ignored.\nFinally, the algorithm assumes that the state \n\n\n\n\n|\n\n\n\u03c8\n\n0\n\n\n\u27e9\n\n\n{\\displaystyle |\\psi _{0}\\rangle }\n\n can be prepared efficiently. Where\nfor some large \n\n\n\nT\n\n\n{\\displaystyle T}\n\n. The coefficients of \n\n\n\n\n|\n\n\n\u03c8\n\n0\n\n\n\u27e9\n\n\n{\\displaystyle |\\psi _{0}\\rangle }\n\n are chosen to minimize a certain quadratic loss function which induces error in the \n\n\n\n\nU\n\n\ni\nn\nv\ne\nr\nt\n\n\n\n\n\n{\\displaystyle U_{\\mathrm {invert} }}\n\n subroutine described below.\nPhase estimation is used to transform the Hermitian matrix \n\n\n\nA\n\n\n{\\displaystyle A}\n\n into a unitary operator, which can then be applied at will. This is possible if A is s-sparse and efficiently row computable, meaning it has at most s nonzero entries per row and given a row index these entries can be computed in time\u00a0O(s). Under these assumptions, quantum phase estimation allows \n\n\n\n\ne\n\ni\nA\nt\n\n\n\n\n{\\displaystyle e^{iAt}}\n\n to be simulated in time \n\n\n\nO\n(\nlog\n\u2061\n(\nN\n)\n\ns\n\n2\n\n\nt\n)\n\n\n{\\displaystyle O(\\log(N)s^{2}t)}\n\n.\nThe key subroutine to the algorithm, denoted \n\n\n\n\nU\n\n\ni\nn\nv\ne\nr\nt\n\n\n\n\n\n{\\displaystyle U_{\\mathrm {invert} }}\n\n, is defined as follows:\n1. Prepare \n\n\n\n\n|\n\n\n\u03c8\n\n0\n\n\n\n\u27e9\n\nC\n\n\n\n\n{\\displaystyle |\\psi _{0}\\rangle ^{C}}\n\n on register C\n2. Apply the conditional Hamiltonian evolution (sum)\n3. Apply the Fourier transform to the register\u00a0C. Denote the resulting basis states with \n\n\n\n\n|\n\nk\n\u27e9\n\n\n{\\displaystyle |k\\rangle }\n\n for k\u00a0=\u00a00,\u00a0...,\u00a0T\u00a0\u2212\u00a01. Define \n\n\n\n\n\u03bb\n\nk\n\n\n:=\n2\n\u03c0\nk\n\n/\n\n\nt\n\n0\n\n\n\n\n{\\displaystyle \\lambda _{k}:=2\\pi k/t_{0}}\n\n.\n4. Adjoin a three-dimensional register S in the state\n5. Reverse steps 1\u20133, uncomputing any garbage produced along the way.\nwhere functions f, g, are filter functions. The states 'nothing', 'well' and 'ill' are used to instruct the loop body on how to proceed; 'nothing' indicates that the desired matrix inversion has not yet taken place, 'well' indicates that the inversion has taken place and the loop should halt, and 'ill' indicates that part of \n\n\n\n\n|\n\nb\n\u27e9\n\n\n{\\displaystyle |b\\rangle }\n\n is in the ill-conditioned subspace of A and the algorithm will not be able to produce the desired inversion.\nThe body of the algorithm follows the amplitude amplification procedure: starting with \n\n\n\n\nU\n\n\ni\nn\nv\ne\nr\nt\n\n\n\nB\n\n|\n\n\ni\nn\ni\nt\ni\na\nl\n\n\u27e9\n\n\n{\\displaystyle U_{\\mathrm {invert} }B|\\mathrm {initial} \\rangle }\n\n, the following operation is repeatedly applied:\nwhere\nand\nAfter each repetition, \n\n\n\nS\n\n\n{\\displaystyle S}\n\n is measured and will produce a value of 'nothing', 'well', or 'ill' as described above. This loop is repeated until \n\n\n\nS\n\n\n{\\displaystyle S}\n\n is measured, which occurs with a probability \n\n\n\np\n\n\n{\\displaystyle p}\n\n. Rather than repeating \n\n\n\n\n\n1\np\n\n\n\n\n{\\displaystyle {\\frac {1}{p}}}\n\n times to minimize error, amplitude amplification is used to achieve the same error resilience using only \n\n\n\nO\n\n(\n\n\n1\n\np\n\n\n\n)\n\n\n\n{\\displaystyle O\\left({\\frac {1}{\\sqrt {p}}}\\right)}\n\n repetitions.\nAfter successfully measuring 'well' on \n\n\n\nS\n\n\n{\\displaystyle S}\n\n the system will be in a state proportional to:\nFinally, we perform the quantum-mechanical operator corresponding to M and obtain an estimate of the value of \n\n\n\n\u27e8\nx\n\n|\n\nM\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle \\langle x|M|x\\rangle }\n\n.\nThe best classical algorithm which produces the actual solution vector \n\n\n\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}}\n\n is Gaussian elimination, which runs in \n\n\n\nO\n(\n\nN\n\n3\n\n\n)\n\n\n{\\displaystyle O(N^{3})}\n\n time.\nIf A is s-sparse and positive semi-definite, then the Conjugate Gradient method can be used to find the solution vector \n\n\n\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}}\n\n can be found in \n\n\n\nO\n(\nN\ns\n\u03ba\n)\n\n\n{\\displaystyle O(Ns\\kappa )}\n\n time by minimizing the quadratic function \n\n\n\n\n|\n\nA\n\n\nx\n\u2192\n\n\n\u2212\n\n\nb\n\u2192\n\n\n\n\n|\n\n\n2\n\n\n\n\n{\\displaystyle |A{\\overrightarrow {x}}-{\\overrightarrow {b}}|^{2}}\n\n.\nWhen only a summary statistic of the solution vector \n\n\n\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}}\n\n is needed, as is the case for the quantum algorithm for linear systems of equations, a classical computer can find an estimate of \n\n\n\n\n\n\nx\n\u2192\n\n\n\n\u2020\n\n\nM\n\n\nx\n\u2192\n\n\n\n\n{\\displaystyle {\\overrightarrow {x}}^{\\dagger }M{\\overrightarrow {x}}}\n\n in \n\n\n\nO\n(\nN\n\n\n\u03ba\n\n\n)\n\n\n{\\displaystyle O(N{\\sqrt {\\kappa }})}\n\n.\nThe quantum algorithm for solving linear systems of equations originally proposed by Harrow et al. was shown to be \n\n\n\nO\n(\n\n\u03ba\n\n2\n\n\nlog\n\u2061\nN\n)\n\n\n{\\displaystyle O(\\kappa ^{2}\\log N)}\n\n. The runtime of this algorithm was subsequently improved to \n\n\n\nO\n(\n\u03ba\n\nlog\n\n3\n\n\n\u2061\n\u03ba\nlog\n\u2061\nN\n)\n\n\n{\\displaystyle O(\\kappa \\log ^{3}\\kappa \\log N)}\n\n by Andris Ambainis.[6]\nAn important factor in the performance of the matrix inversion algorithm is the condition number of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n \n\n\n\n\u03ba\n\n\n{\\displaystyle \\kappa }\n\n, which represents the ratio of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n's largest and smallest eigenvalues. As the condition number increases, the ease with which the solution vector can be found using gradient descent methods such as the conjugate gradient method decreases, as \n\n\n\nA\n\n\n{\\displaystyle A}\n\n becomes closer to a matrix which cannot be inverted and the solution vector becomes less stable. This algorithm assumes that all elements of the matrix \n\n\n\nA\n\n\n{\\displaystyle A}\n\n lie between \n\n\n\n\n\n1\n\u03ba\n\n\n\n\n{\\displaystyle {\\frac {1}{\\kappa }}}\n\n and 1, in which case the claimed run-time proportional to \n\n\n\n\n\u03ba\n\n2\n\n\n\n\n{\\displaystyle \\kappa ^{2}}\n\n will be achieved. Therefore, the speedup over classical algorithms is increased further when \n\n\n\n\u03ba\n\n\n{\\displaystyle \\kappa }\n\n is a \n\n\n\n\np\no\nl\ny\n\n(\nlog\n\u2061\n(\nN\n)\n)\n\n\n{\\displaystyle \\mathrm {poly} (\\log(N))}\n\n.[1]\nIf the run-time of the algorithm were made poly-logarithmic in \n\n\n\n\u03ba\n\n\n{\\displaystyle \\kappa }\n\n then problems solvable on n qubits could be solved in poly(n) time, causing the complexity class BQP to be equal to PSPACE.[1]\nPerforming the phase estimation, which is the dominant source of error, is done by simulating \n\n\n\n\ne\n\ni\nA\nt\n\n\n\n\n{\\displaystyle e^{iAt}}\n\n. Assuming that \n\n\n\nA\n\n\n{\\displaystyle A}\n\n is s-sparse, this can be done with an error bounded by a constant \n\n\n\n\u03b5\n\n\n{\\displaystyle \\varepsilon }\n\n, which will translate to the additive error achieved in the output state \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n.\nThe phase estimation step errs by \n\n\n\nO\n\n(\n\n\n1\n\nt\n\n0\n\n\n\n\n)\n\n\n\n{\\displaystyle O\\left({\\frac {1}{t_{0}}}\\right)}\n\n in estimating \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n, which translates into a relative error of \n\n\n\nO\n\n(\n\n\n1\n\n\u03bb\n\nt\n\n0\n\n\n\n\n\n)\n\n\n\n{\\displaystyle O\\left({\\frac {1}{\\lambda t_{0}}}\\right)}\n\n in \n\n\n\n\n\u03bb\n\n\u2212\n1\n\n\n\n\n{\\displaystyle \\lambda ^{-1}}\n\n. If \n\n\n\n\u03bb\n\u2265\n1\n\n/\n\n\u03ba\n\n\n{\\displaystyle \\lambda \\geq 1/\\kappa }\n\n, taking \n\n\n\n\nt\n\n0\n\n\n=\nO\n(\n\u03ba\n\u03b5\n)\n\n\n{\\displaystyle t_{0}=O(\\kappa \\varepsilon )}\n\n induces a final error of \n\n\n\n\u03b5\n\n\n{\\displaystyle \\varepsilon }\n\n. This requires that the overall run-time efficiency be increased proportional to \n\n\n\nO\n\n(\n\n\n1\n\u03b5\n\n\n)\n\n\n\n{\\displaystyle O\\left({\\frac {1}{\\varepsilon }}\\right)}\n\n to minimize error.\nWhile there does not yet exist a quantum computer that can truly offer a speedup over a classical computer, implementation of a \"proof of concept\" remains an important milestone in the development of a new quantum algorithm. Demonstrating the quantum algorithm for linear systems of equations remained a challenge for years after its proposal until 2013 when it was demonstrated by Cai et al., Barz et al. and Pan et al. in parallel.\nPublished in Physical Review Letters 110, 230501 (2013), Cai et al. reported an experimental demonstration of the simplest meaningful instance of this algorithm, that is, solving 2*2 linear equations for various input vectors. The quantum circuit is optimized and compiled into a linear optical network with four photonic quantum bits (qubits) and four controlled logic gates, which is used to coherently implement every subroutine for this algorithm. For various input vectors, the quantum computer gives solutions for the linear equations with reasonably high precision, ranging from fidelities of 0.825 to 0.993.[7]\nOn February 5, 2013, Barz et al. demonstrated the quantum algorithm for linear systems of equations on a photonic quantum computing architecture. This implementation used two consecutive entangling gates on the same pair of polarization-encoded qubits. Two separately controlled NOT gates were realized where the successful operation of the first was heralded by a measurement of two ancillary photons. Barz et al. found that the fidelity in the obtained output state ranged from 64.7% to 98.1% due to the influence of higher-order emissions from spontaneous parametric down-conversion.[3]\nOn February 8, 2013 Pan et al. reported a proof-of-concept experimental demonstration of the quantum algorithm using a 4-qubit nuclear magnetic resonance quantum information processor. The implementation was tested using simple linear systems of only 2 variables. Across three experiments they obtain the solution vector with over 96% fidelity.[4]\nQuantum computers are devices that harness quantum mechanics to perform computations in ways that classical computers cannot. For certain problems, quantum algorithms supply exponential speedups over their classical counterparts, the most famous example being Shor's factoring algorithm. Few such exponential speedups are known, and those that are (such as the use of quantum computers to simulate other quantum systems) have so far found limited use outside the domain of quantum mechanics. This algorithm provides an exponentially faster method of estimating features of the solution of a set of linear equations, which is a problem ubiquitous in science and engineering, both on its own and as a subroutine in more complex problems.\nDominic Berry proposed a new algorithm for solving linear time dependent differential equations as an extension of the quantum algorithm for solving linear systems of equations. Berry provides an efficient algorithm for solving the full-time evolution under sparse linear differential equations on a quantum computer.[8]\nWiebe et al. provide a new quantum algorithm to determine the quality of a least-squares fit in which a continuous function is used to approximate a set of discrete points by extending the quantum algorithm for linear systems of equations. As the amount of discrete points increases, the time required to produce a least-squares fit using even a quantum computer running a quantum state tomography algorithm becomes very large. Wiebe et al. find that in many cases, their algorithm can efficiently find a concise approximation of the data points, eliminating the need for the higher-complexity tomography algorithm.[9]\nMachine learning is the study of systems that can identify trends in data. Tasks in machine learning frequently involve manipulating and classifying a large volume of data in high-dimensional vector spaces. The runtime of classical machine learning algorithms is limited by a polynomial dependence on both the volume of data and the dimensions of the space. Quantum computers are capable of manipulating high-dimensional vectors using tensor product spaces are thus the perfect platform for machine learning algorithms.[10]\nThe quantum algorithm for linear systems of equations has been applied to a support vector machine, which is an optimized linear or non-linear binary classifier. A support vector machine can be used for supervised machine learning, in which training set of already classified data is available, or unsupervised machine learning, in which all data given to the system is unclassified. Rebentrost et al. show that a quantum support vector machine can be used for big data classification and achieve an exponential speedup over classical computers.[11]", 
    "dbpedia_url": "http://dbpedia.org/resource/Quantum_algorithm_for_linear_systems_of_equations", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Quantum_algorithm_for_linear_systems_of_equations\n"
}