{
    "about": "In computational mathematics, computer algebra, also called symbolic computation or algebraic computation, is a scientific area that refers to the study and development of algorithms and software for manipulating mathematical expressions and other mathematical objects. Although, properly speaking, computer algebra should be a subfield of scientific computing, they are generally considered as distinct fields because scientific computing is usually based on numerical computation with approximate floating point numbers, while symbolic computation emphasizes exact computation with expressions containing variables that have no given value and are manipulated as symbols, hence the name symbolic computation.", 
    "name": "Symbolic Computation", 
    "classification": "Computer Algebra", 
    "full_text": "In computational mathematics, computer algebra, also called symbolic computation or algebraic computation, is a scientific area that refers to the study and development of algorithms and software for manipulating mathematical expressions and other mathematical objects. Although, properly speaking, computer algebra should be a subfield of scientific computing, they are generally considered as distinct fields because scientific computing is usually based on numerical computation with approximate floating point numbers, while symbolic computation emphasizes exact computation with expressions containing variables that have no given value and are manipulated as symbols, hence the name symbolic computation.\nSoftware applications that perform symbolic calculations are called computer algebra systems, with the term system alluding to the complexity of the main applications that include, at least, a method to represent mathematical data in a computer, a user programming language (usually different from the language used for the implementation), a dedicated memory manager, a user interface for the input/output of mathematical expressions, a large set of routines to perform usual operations, like simplification of expressions, differentiation using chain rule, polynomial factorization, indefinite integration, etc.\nAt the beginning of computer algebra, circa 1970, when the long-known algorithms were first put on computers, they turned out to be highly inefficient.[1] Therefore, a large part of the work of the researchers in the field consisted in revisiting classical algebra in order to make it effective and to discover efficient algorithms to implement this effectiveness. A typical example of this kind of work is the computation of polynomial greatest common divisors, which is required to simplify fractions. Surprisingly, the classical Euclid's algorithm turned out to be inefficient for polynomials over infinite fields, and thus new algorithms needed to be developed. The same was also true for the classical algorithms from linear algebra.\nComputer algebra is widely used to experiment in mathematics and to design the formulas that are used in numerical programs. It is also used for complete scientific computations, when purely numerical methods fail, like in public key cryptography or for some non-linear problems.\n\n\nSome authors distinguish computer algebra from symbolic computation using the latter name to refer to kinds of symbolic computation other than the computation with mathematical formulas. Some authors use symbolic computation for the computer science aspect of the subject and \"computer algebra\" for the mathematical aspect.[2] In some languages the name of the field is not a direct translation of its English name. Typically, it is called calcul formel in French, which means \"formal computation\". This name reflects the ties this field has with formal methods.\nSymbolic computation has also been referred to, in the past, as symbolic manipulation, algebraic manipulation, symbolic processing, symbolic mathematics, or symbolic algebra, but these terms, which also refer to non-computational manipulation, are no more in use for referring to computer algebra.\nThere is no learned society that is specific to computer algebra, but this function is assumed by the special interest group of the Association for Computing Machinery named SIGSAM (Special Interest Group on Symbolic and Algebraic Manipulation).[3]\nThere are several annual conferences on computer algebra, the premier being ISSAC (International Symposium on Symbolic and Algebraic Computation), which is regularly sponsored by SIGSAM.[4]\nThere are several journals specializing in computer algebra, the top one being Journal of Symbolic Computation founded in 1985 by Bruno Buchberger.[5] There are also several other journals that regularly publish articles in computer algebra.[6]\nAs numerical software are highly efficient for approximate numerical computation, it is common, in computer algebra, to emphasize on exact computation with exactly represented data. Such an exact representation implies that, even when the size of the output is small, the intermediate data generated during a computation may grow in an unpredictable way. This behavior is called expression swell. To obviate this problem, various methods are used in the representation of the data, as well as in the algorithms that manipulate them.\nThe usual numbers systems used in numerical computation are either the floating point numbers and the integers of a fixed bounded size, that are improperly called integers by most programming languages. None is convenient for computer algebra, because of the expression swell.\nTherefore, the basic numbers used in computer algebra are the integers of the mathematicians, commonly represented by an unbounded signed sequence of digits in some base of numeration, usually the largest base allowed by the machine word. These integers allow to define the rational numbers, which are irreducible fractions of two integers.\nProgramming an efficient implementation of the arithmetic operations is a hard task. Therefore, most free computer algebra systems and some commercial ones, like Maple (software), use the GMP library, which is thus a de facto standard.\nExcept for numbers and variables, every mathematical expression may be viewed as the symbol of an operator followed by a sequence of operands. In computer algebra software, the expressions are usually represented in this way. This representation is very flexible, and many things, that seem not to be mathematical expressions at first glance, may be represented and manipulated as such. For example, an equation is an expression with \u201c=\u201d as an operator, a matrix may be represented as an expression with \u201cmatrix\u201d as an operator and its rows as operands.\nEven programs may be considered and represented as expressions with operator \u201cprocedure\u201d and, at least, two operands, the list of parameters and the body, which is itself an expression with \u201cbody\u201d as an operator and a sequence of instructions as operands. Conversely, any mathematical expression may be viewed as a program. For example, the expression a + b may be viewed as a program for the addition, with a and b as parameters. Executing this program consists in evaluating the expression for given values of a and b; if they do not have any value\u2014that is they are indeterminates\u2014, the result of the evaluation is simply its input.\nThis process of delayed evaluation is fundamental in computer algebra. For example, the operator \u201c=\u201d of the equations is also, in most computer algebra systems, the name of the program of the equality test: normally, the evaluation of an equation results in an equation, but, when an equality test is needed,\u2014either explicitly asked by the user through an \u201cevaluation to a Boolean\u201d command, or automatically started by the system in the case of a test inside a program\u2014then the evaluation to a boolean 0 or 1 is executed.\nAs the size of the operands of an expression is unpredictable and may change during a working session, the sequence of the operands is usually represented as a sequence of either pointers (like in Macsyma) or entries in a hash table (like in Maple).\nThe raw application of the basic rules of differentiation with respect to x on the expression \n\n\n\n\na\n\nx\n\n\n\n\n{\\displaystyle a^{x}}\n\n gives the result \n\n\n\nx\n\u22c5\n\na\n\nx\n\u2212\n1\n\n\n\u22c5\n0\n+\n\na\n\nx\n\n\n\u22c5\n\n(\n1\n\u22c5\nlog\n\u2061\na\n+\nx\n\u22c5\n\n\n0\na\n\n\n)\n\n.\n\n\n{\\displaystyle x\\cdot a^{x-1}\\cdot 0+a^{x}\\cdot \\left(1\\cdot \\log a+x\\cdot {\\frac {0}{a}}\\right).}\n\n Such a complicated expression is clearly not acceptable, and a procedure of simplification is needed as soon as one works with general expressions.\nThis simplification is normally done through rewriting rules. There are several classes of rewriting rules that have to be considered. The simplest consists in the rewriting rules that always reduce the size of the expression, like E \u2212 E \u2192 0 or sin(0) \u2192 0. They are systematically applied in the computer algebra systems.\nThe first difficulty occurs with associative operations like addition and multiplication. The standard way to deal with associativity is to consider that addition and multiplication have an arbitrary number of operands, that is that a + b + c is represented as \"+\"(a, b, c). Thus a + (b + c) and (a + b) + c are both simplified to \"+\"(a, b, c), which is displayed a + b + c. What about a \u2212 b + c? To deal with this problem, the simplest way is to rewrite systematically \u2212E, E \u2212 F, E/F as, respectively, (\u22121)\u22c5E, E + (\u22121)\u22c5F, E\u22c5F\u22121. In other words, in the internal representation of the expressions, there is no subtraction nor division nor unary minus, outside the representation of the numbers.\nA second difficulty occurs with the commutativity of addition and multiplication. The problem is to recognize quickly the like terms in order to combine or canceling them. In fact, the method for finding like terms, consisting of testing every pair of terms, is too costly for being practicable with very long sums and products. For solving this problem, Macsyma sorts the operands of sums and products with a function of comparison that is designed in order that like terms are in consecutive places, and thus easily detected. In Maple, the hash function is designed for generating collisions when like terms are entered, allowing to combine them as soon as they are introduced. This design of the hash function allows also to recognize immediately the expressions or subexpressions that appear several times in a computation and to store them only once. This allows not only to save some memory space, but also to speed up computation, by avoiding repetition of the same operations on several identical expressions.\nSome rewriting rules sometimes increase and sometimes decrease the size of the expressions to which they are applied. This is the case of distributivity or trigonometric identities. For example, the distributivity law allows rewriting \n\n\n\n(\nx\n+\n1\n\n)\n\n4\n\n\n\u2192\n\nx\n\n4\n\n\n+\n4\n\nx\n\n3\n\n\n+\n6\n\nx\n\n2\n\n\n+\n4\nx\n+\n1\n\n\n{\\displaystyle (x+1)^{4}\\rightarrow x^{4}+4x^{3}+6x^{2}+4x+1}\n\n and \n\n\n\n(\nx\n\u2212\n1\n)\n(\n\nx\n\n4\n\n\n+\n\nx\n\n3\n\n\n+\n\nx\n\n2\n\n\n+\nx\n+\n1\n)\n\u2192\n\nx\n\n5\n\n\n\u2212\n1.\n\n\n{\\displaystyle (x-1)(x^{4}+x^{3}+x^{2}+x+1)\\rightarrow x^{5}-1.}\n\n As there is no way to make a good general choice of applying or not such a rewriting rule, such rewritings are done only when explicitly asked by the user. For the distributivity, the computer function that apply this rewriting rule is generally called \"expand\". The reverse rewriting rule, called \"factor\", requires a non-trivial algorithm, which is thus a key function in computer algebra systems (see Polynomial factorization).\nIn this section we consider some fundamental mathematical questions that arise as soon as one wants to manipulate mathematical expressions in a computer. We consider mainly the case of the multivariate rational fractions. This is not a real restriction, because, as soon as the irrational functions appearing in an expression are simplified, they are usually considered as new indeterminates. For example, \n\n\n\n(\nsin\n\u2061\n(\nx\n+\ny\n\n)\n\n2\n\n\n+\nlog\n\u2061\n(\n\nz\n\n2\n\n\n\u2212\n5\n)\n\n)\n\n3\n\n\n\n\n{\\displaystyle (\\sin(x+y)^{2}+\\log(z^{2}-5))^{3}}\n\n is viewed as a polynomial in \n\n\n\nsin\n\u2061\n(\nx\n+\ny\n)\n\n\n{\\displaystyle \\sin(x+y)}\n\n and \n\n\n\nlog\n\u2061\n(\n\nz\n\n2\n\n\n\u2212\n5\n)\n\n\n{\\displaystyle \\log(z^{2}-5)}\n\n\nThere are two notions of equality for mathematical expressions. The syntactic equality is the equality of the expressions which means that they are written (or represented in a computer) in the same way. As trivial, it is rarely considered by mathematicians, but it is the only equality that is easy to test with a program. The semantic equality is when two expressions represent the same mathematical object, like in \n\n\n\n(\nx\n+\ny\n\n)\n\n2\n\n\n=\n\nx\n\n2\n\n\n+\n2\nx\ny\n+\n\ny\n\n2\n\n\n.\n\n\n{\\displaystyle (x+y)^{2}=x^{2}+2xy+y^{2}.}\n\n\nIt is known from Richardson's theorem that there may not exist an algorithm that decides if two expressions representing numbers are semantically equal, if exponentials and logarithms are allowed in the expressions. Therefore, (semantical) equality may be tested only on some classes of expressions such as the polynomials and the rational fractions.\nTo test the equality of two expressions, instead to design a specific algorithm, it is usual to put them in some canonical form or to put their difference in a normal form and to test the syntactic equality of the result.\nUnlike in usual mathematics, \"canonical form\" and \"normal form\" are not synonymous in computer algebra. A canonical form is such that two expressions in canonical form are semantically equal if and only if they are syntactically equal, while a normal form is such that an expression in normal form is semantically zero only if it is syntactically zero. In other words, zero has a unique representation by expressions in normal form.\nNormal forms are usually preferred in computer algebra for several reasons. Firstly, canonical forms may be more costly to compute than normal forms. For example, to put a polynomial in canonical form, one has to expand by distributivity every product, while it is not necessary with a normal form (see below). Secondly, It may be the case, like for expressions involving radicals, that a canonical form, if it exists, depends on some arbitrary choices and that these choices may be different for two expressions that have been computed independently. This may make impracticable the use of a canonical form.\nFor a detailed definition of the subject:\nFor textbooks devoted to the subject:", 
    "dbpedia_url": "http://dbpedia.org/resource/Symbolic_computation", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Symbolic_computation\n"
}