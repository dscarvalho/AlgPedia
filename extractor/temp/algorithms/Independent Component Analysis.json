{
    "about": "In signal processing, independent component analysis (ICA) is a computational method for separating a multivariate signal into additive subcomponents. This is done by assuming that the subcomponents are non-Gaussian signals and that they are statistically independent from each other. ICA is a special case of blind source separation. A common example application is the \"cocktail party problem\" of listening in on one person's speech in a noisy room.", 
    "name": "Independent Component Analysis", 
    "classification": "Signal Processing", 
    "full_text": "In signal processing, independent component analysis (ICA) is a computational method for separating a multivariate signal into additive subcomponents. This is done by assuming that the subcomponents are non-Gaussian signals and that they are statistically independent from each other. ICA is a special case of blind source separation. A common example application is the \"cocktail party problem\" of listening in on one person's speech in a noisy room.\n\n\nIndependent component analysis attempts to decompose a multivariate signal into independent non-Gaussian signals. As an example, sound is usually a signal that is composed of the numerical addition, at each time t, of signals from several sources. The question then is whether it is possible to separate these contributing sources from the observed total signal. When the statistical independence assumption is correct, blind ICA separation of a mixed signal gives very good results.[citation needed] It is also used for signals that are not supposed to be generated by a mixing for analysis purposes.\nA simple application of ICA is the \"cocktail party problem\", where the underlying speech signals are separated from a sample data consisting of people talking simultaneously in a room. Usually the problem is simplified by assuming no time delays or echoes.\nAn important note to consider is that if N sources are present, at least N observations (e.g. microphones) are needed to recover the original signals. This constitutes the square case (J\u00a0=\u00a0D, where D is the input dimension of the data and J is the dimension of the model). Other cases of underdetermined (J\u00a0>\u00a0D) and overdetermined (J\u00a0<\u00a0D) have been investigated.\nThat the ICA separation of mixed signals gives very good results is based on two assumptions and three effects of mixing source signals. Two assumptions:\nThree effects of mixing source signals:\nThose principles contribute to the basic establishment of ICA. If the signals we happen to extract from a set of mixtures are independent like sources signals, or have non-Gaussian histograms like source signals, or have low complexity like source signals, then they must be source signals.[1][2]\nICA finds the independent components (also called factors, latent variables or sources) by maximizing the statistical independence of the estimated components. We may choose one of many ways to define a proxy for independence, and this choice governs the form of the ICA algorithm. The two broadest definitions of independence for ICA are\nThe Minimization-of-Mutual information (MMI) family of ICA algorithms uses measures like Kullback-Leibler Divergence and maximum entropy. The non-Gaussianity family of ICA algorithms, motivated by the central limit theorem, uses kurtosis and negentropy.\nTypical algorithms for ICA use centering (subtract the mean to create a zero mean signal), whitening (usually with the eigenvalue decomposition), and dimensionality reduction as preprocessing steps in order to simplify and reduce the complexity of the problem for the actual iterative algorithm. Whitening and dimension reduction can be achieved with principal component analysis or singular value decomposition. Whitening ensures that all dimensions are treated equally a priori before the algorithm is run. Well-known algorithms for ICA include infomax, FastICA, JADE, and kernel-independent component analysis, among others. In general, ICA cannot identify the actual number of source signals, a uniquely correct ordering of the source signals, nor the proper scaling (including sign) of the source signals.\nICA is important to blind signal separation and has many practical applications. It is closely related to (or even a special case of) the search for a factorial code of the data, i.e., a new vector-valued representation of each data vector such that it gets uniquely encoded by the resulting code vector (loss-free coding), but the code components are statistically independent.\nLinear independent component analysis can be divided into noiseless and noisy cases, where noiseless ICA is a special case of noisy ICA. Nonlinear ICA should be considered as a separate case.\nThe data are represented by the random vector \n\n\n\nx\n=\n(\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nm\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle x=(x_{1},\\ldots ,x_{m})^{T}}\n\n and the components as the random vector \n\n\n\ns\n=\n(\n\ns\n\n1\n\n\n,\n\u2026\n,\n\ns\n\nn\n\n\n\n)\n\nT\n\n\n.\n\n\n{\\displaystyle s=(s_{1},\\ldots ,s_{n})^{T}.}\n\n The task is to transform the observed data \n\n\n\nx\n,\n\n\n{\\displaystyle x,}\n\n using a linear static transformation W as \n\n\n\ns\n=\nW\nx\n\n\n\n{\\displaystyle s=Wx\\,}\n\n into maximally independent components \n\n\n\ns\n\n\n{\\displaystyle s}\n\n measured by some function \n\n\n\nF\n(\n\ns\n\n1\n\n\n,\n\u2026\n,\n\ns\n\nn\n\n\n)\n\n\n{\\displaystyle F(s_{1},\\ldots ,s_{n})}\n\n of independence.\nThe components \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n of the observed random vector \n\n\n\nx\n=\n(\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nm\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle x=(x_{1},\\ldots ,x_{m})^{T}}\n\n are generated as a sum of the independent components \n\n\n\n\ns\n\nk\n\n\n\n\n{\\displaystyle s_{k}}\n\n, \n\n\n\nk\n=\n1\n,\n\u2026\n,\nn\n\n\n{\\displaystyle k=1,\\ldots ,n}\n\n:\n\n\n\n\n\nx\n\ni\n\n\n=\n\na\n\ni\n,\n1\n\n\n\ns\n\n1\n\n\n+\n\u22ef\n+\n\na\n\ni\n,\nk\n\n\n\ns\n\nk\n\n\n+\n\u22ef\n+\n\na\n\ni\n,\nn\n\n\n\ns\n\nn\n\n\n\n\n{\\displaystyle x_{i}=a_{i,1}s_{1}+\\cdots +a_{i,k}s_{k}+\\cdots +a_{i,n}s_{n}}\n\n\nweighted by the mixing weights \n\n\n\n\na\n\ni\n,\nk\n\n\n\n\n{\\displaystyle a_{i,k}}\n\n.\nThe same generative model can be written in vectorial form as \n\n\n\nx\n=\n\n\u2211\n\nk\n=\n1\n\n\nn\n\n\n\ns\n\nk\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle x=\\sum _{k=1}^{n}s_{k}a_{k}}\n\n, where the observed random vector \n\n\n\nx\n\n\n{\\displaystyle x}\n\n is represented by the basis vectors \n\n\n\n\na\n\nk\n\n\n=\n(\n\na\n\n1\n,\nk\n\n\n,\n\u2026\n,\n\na\n\nm\n,\nk\n\n\n)\n\n\n{\\displaystyle a_{k}=(a_{1,k},\\ldots ,a_{m,k})}\n\n. The basis vectors \n\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle a_{k}}\n\n form the columns of the mixing matrix \n\n\n\nA\n=\n(\n\na\n\n1\n\n\n,\n\u2026\n,\n\na\n\nn\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle A=(a_{1},\\ldots ,a_{n})^{T}}\n\n and the generative formula can be written as \n\n\n\nx\n=\nA\ns\n\n\n{\\displaystyle x=As}\n\n, where \n\n\n\ns\n=\n(\n\ns\n\n1\n\n\n,\n\u2026\n,\n\ns\n\nn\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle s=(s_{1},\\ldots ,s_{n})^{T}}\n\n.\nGiven the model and realizations (samples) \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nN\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{N}}\n\n of the random vector \n\n\n\nx\n\n\n{\\displaystyle x}\n\n, the task is to estimate both the mixing matrix \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and the sources \n\n\n\ns\n\n\n{\\displaystyle s}\n\n. This is done by adaptively calculating the \n\n\n\nw\n\n\n{\\displaystyle w}\n\n vectors and setting up a cost function which either maximizes the nongaussianity of the calculated \n\n\n\n\ns\n\nk\n\n\n=\n(\n\nw\n\nT\n\n\n\u2217\nx\n)\n\n\n{\\displaystyle s_{k}=(w^{T}*x)}\n\n or minimizes the mutual information. In some cases, a priori knowledge of the probability distributions of the sources can be used in the cost function.\nThe original sources \n\n\n\ns\n\n\n{\\displaystyle s}\n\n can be recovered by multiplying the observed signals \n\n\n\nx\n\n\n{\\displaystyle x}\n\n with the inverse of the mixing matrix \n\n\n\nW\n=\n\nA\n\n\u2212\n1\n\n\n\n\n{\\displaystyle W=A^{-1}}\n\n, also known as the unmixing matrix. Here it is assumed that the mixing matrix is square (\n\n\n\nn\n=\nm\n\n\n{\\displaystyle n=m}\n\n). If the number of basis vectors is greater than the dimensionality of the observed vectors, \n\n\n\nn\n>\nm\n\n\n{\\displaystyle n>m}\n\n, the task is overcomplete but is still solvable with the pseudo inverse.\nWith the added assumption of zero-mean and uncorrelated Gaussian noise \n\n\n\nn\n\u223c\nN\n(\n0\n,\ndiag\n\u2061\n(\n\u03a3\n)\n)\n\n\n{\\displaystyle n\\sim N(0,\\operatorname {diag} (\\Sigma ))}\n\n, the ICA model takes the form \n\n\n\nx\n=\nA\ns\n+\nn\n\n\n{\\displaystyle x=As+n}\n\n.\nThe mixing of the sources does not need to be linear. Using a nonlinear mixing function \n\n\n\nf\n(\n\u22c5\n\n|\n\n\u03b8\n)\n\n\n{\\displaystyle f(\\cdot |\\theta )}\n\n with parameters \n\n\n\n\u03b8\n\n\n{\\displaystyle \\theta }\n\n the nonlinear ICA model is \n\n\n\nx\n=\nf\n(\ns\n\n|\n\n\u03b8\n)\n+\nn\n\n\n{\\displaystyle x=f(s|\\theta )+n}\n\n.\nThe independent components are identifiable up to a permutation and scaling of the sources. This identifiability requires that:\nA special variant of ICA is Binary ICA in which both signal sources and monitors are in binary form and observations from monitors are disjunctive mixtures of binary independent sources. The problem was shown to have applications in many domains including medical diagnosis, multi-cluster assignment, network tomography and internet resource management.\nLet \n\n\n\n\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\u2026\n,\n\nx\n\nm\n\n\n\n\n\n{\\displaystyle {x_{1},x_{2},\\ldots ,x_{m}}}\n\n be the set of binary variables from \n\n\n\nm\n\n\n{\\displaystyle m}\n\n monitors and \n\n\n\n\n\ny\n\n1\n\n\n,\n\ny\n\n2\n\n\n,\n\u2026\n,\n\ny\n\nn\n\n\n\n\n\n{\\displaystyle {y_{1},y_{2},\\ldots ,y_{n}}}\n\n be the set of binary variables from \n\n\n\nn\n\n\n{\\displaystyle n}\n\n sources. Source-monitor connections are represented by the (unknown) mixing matrix \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, where \n\n\n\n\ng\n\ni\nj\n\n\n=\n1\n\n\n{\\displaystyle g_{ij}=1}\n\n indicates that signal from the i-th source can be observed by the j-th monitor. The system works as follows: at any time, if a source \n\n\n\ni\n\n\n{\\displaystyle i}\n\n is active (\n\n\n\n\ny\n\ni\n\n\n=\n1\n\n\n{\\displaystyle y_{i}=1}\n\n) and it is connected to the monitor \n\n\n\nj\n\n\n{\\displaystyle j}\n\n (\n\n\n\n\ng\n\ni\nj\n\n\n=\n1\n\n\n{\\displaystyle g_{ij}=1}\n\n) then the monitor \n\n\n\nj\n\n\n{\\displaystyle j}\n\n will observe some activity (\n\n\n\n\nx\n\nj\n\n\n=\n1\n\n\n{\\displaystyle x_{j}=1}\n\n). Formally we have:\nwhere \n\n\n\n\u2227\n\n\n{\\displaystyle \\wedge }\n\n is Boolean AND and \n\n\n\n\u2228\n\n\n{\\displaystyle \\vee }\n\n is Boolean OR. Note that noise is not explicitly modeled, rather, can be treated as independent sources.\nThe above problem can be heuristically solved [3] by assuming variables are continuous and running FastICA on binary observation data to get the mixing matrix \n\n\n\nG\n\n\n{\\displaystyle G}\n\n (real values), then apply round number techniques on \n\n\n\nG\n\n\n{\\displaystyle G}\n\n to obtain the binary values. This approach has been shown to produce a highly inaccurate result.[citation needed]\nAnother method is to use dynamic programming: recursively breaking the observation matrix \n\n\n\nX\n\n\n{\\displaystyle X}\n\n into its sub-matrices and run the inference algorithm on these sub-matrices. The key observation which leads to this algorithm is the sub-matrix \n\n\n\n\nX\n\n0\n\n\n\n\n{\\displaystyle X^{0}}\n\n of \n\n\n\nX\n\n\n{\\displaystyle X}\n\n where \n\n\n\n\nx\n\ni\nj\n\n\n=\n0\n,\n\u2200\nj\n\n\n{\\displaystyle x_{ij}=0,\\forall j}\n\n corresponds to the unbiased observation matrix of hidden components that do not have connection to the \n\n\n\ni\n\n\n{\\displaystyle i}\n\n-th monitor. Experimental results from [4] show that this approach is accurate under moderate noise levels.\nThe Generalized Binary ICA framework [5] introduces a broader problem formulation which does not necessitate any knowledge on the generative model. In other words, this method attempts to decompose a source into its independent components (as much as possible, and without losing any information) with no prior assumption on the way it was generated. Although this problem appears quite complex, it can be accurately solved with a branch and bound search tree algorithm or tightly upper bounded with a single multiplication of a matrix with a vector.\nSignal mixtures tend to have Gaussian probability density functions, and source signals tend to have non-Gaussian probability density functions. Each source signal can be extracted from a set of signal mixtures by taking the inner product of a weight vector and those signal mixtures where this inner product provides an orthogonal projection of the signal mixtures. The remaining challenge is finding such a weight vector. One type of method for doing so is projection pursuit.[7]\nProjection pursuit seeks one projection at a time such that the extracted signal is as non-Gaussian as possible. This contrasts with ICA, which typically extracts M signals simultaneously from M signal mixtures, which requires estimating a M \u00d7 M unmixing matrix. One practical advantage of projection pursuit over ICA is that fewer than M signals can be extracted if required, where each source signal is extracted from M signal mixtures using an M-element weight vector.\nWe can use kurtosis to recover the multiple source signal by finding the correct weight vectors with the use of projection pursuit.\nThe kurtosis of the probability density function of a signal, for a finite sample, is computed as\nwhere \n\n\n\n\n\ny\n\u00af\n\n\n\n\n{\\displaystyle \\mathbf {\\overline {y}} }\n\n is the sample mean of \n\n\n\n\ny\n\n\n\n{\\displaystyle \\mathbf {y} }\n\n, the extracted signals. The constant 3 ensures that Gaussian signals have zero kurtosis, Super-Gaussian signals have positive kurtosis, and Sub-Gaussian signals have negative kurtosis. The denominator is the variance of \n\n\n\n\ny\n\n\n\n{\\displaystyle \\mathbf {y} }\n\n, and ensures that the measured kurtosis takes account of signal variance. The goal of projection pursuit is to maximize the kurtosis, and make the extracted signal as non-normal as possible.\nUsing kurtosis as a measure of non-normality, we can now examine how the kurtosis of a signal \n\n\n\n\ny\n\n=\n\n\nw\n\n\nT\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {w} ^{T}\\mathbf {x} }\n\n extracted from a set of M mixtures \n\n\n\n\nx\n\n=\n(\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\u2026\n,\n\nx\n\nM\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle \\mathbf {x} =(x_{1},x_{2},\\ldots ,x_{M})^{T}}\n\n varies as the weight vector \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n is rotated around the origin. Given our assumption that each source signal \n\n\n\n\ns\n\n\n\n{\\displaystyle \\mathbf {s} }\n\n is super-gaussian we would expect:\nFor multiple source mixture signals, we can use kurtosis and Gram-Schmidt Orthogonalizaton (GSO) to recover the signals. Given M signal mixtures in an M-dimensional space, GSO project these data points onto an (M-1)-dimensional space by using the weight vector. We can guarantee the independence of the extracted signals with the use of GSO.\nIn order to find the correct value of \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n, we can use gradient descent method. We first of all whiten the data, and transform \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n into a new mixture \n\n\n\n\nz\n\n\n\n{\\displaystyle \\mathbf {z} }\n\n, which has unit variance, and \n\n\n\n\nz\n\n=\n(\n\nz\n\n1\n\n\n,\n\nz\n\n2\n\n\n,\n\u2026\n,\n\nz\n\nM\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle \\mathbf {z} =(z_{1},z_{2},\\ldots ,z_{M})^{T}}\n\n. This process can be achieved by applying Singular value decomposition to \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n,\nRescaling each vector \n\n\n\n\nU\n\ni\n\n\n=\n\nU\n\ni\n\n\n\n/\n\nE\n\u2061\n(\n\nU\n\ni\n\n\n2\n\n\n)\n\n\n{\\displaystyle U_{i}=U_{i}/\\operatorname {E} (U_{i}^{2})}\n\n, and let \n\n\n\n\nz\n\n=\n\nU\n\n\n\n{\\displaystyle \\mathbf {z} =\\mathbf {U} }\n\n. The signal extracted by a weighted vector \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n is \n\n\n\n\ny\n\n=\n\n\nw\n\n\nT\n\n\n\nz\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {w} ^{T}\\mathbf {z} }\n\n. If the weight vector w has unit length, that is \n\n\n\nE\n\u2061\n[\n(\n\n\nw\n\n\nT\n\n\n\nz\n\n\n)\n\n2\n\n\n]\n=\n1\n\n\n{\\displaystyle \\operatorname {E} [(\\mathbf {w} ^{T}\\mathbf {z} )^{2}]=1}\n\n, then the kurtosis can be written as:\nThe updating process for \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n is:\nwhere \n\n\n\n\u03b7\n\n\n{\\displaystyle \\eta }\n\n is a small constant to guarantee that \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n converge to the optimal solution. After each update, we normalized \n\n\n\n\n\nw\n\n\nn\ne\nw\n\n\n=\n\n\n\n\nw\n\n\nn\ne\nw\n\n\n\n\n|\n\n\n\nw\n\n\nn\ne\nw\n\n\n\n|\n\n\n\n\n\n\n{\\displaystyle \\mathbf {w} _{new}={\\frac {\\mathbf {w} _{new}}{|\\mathbf {w} _{new}|}}}\n\n, and set \n\n\n\n\n\nw\n\n\no\nl\nd\n\n\n=\n\n\nw\n\n\nn\ne\nw\n\n\n\n\n{\\displaystyle \\mathbf {w} _{old}=\\mathbf {w} _{new}}\n\n, and repeat the updating process till it converges. We can also use another algorithm to update the weight vector \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n.\nAnother approach is using negentropy[8] instead of kurtosis. Negentropy is a robust method for kurtosis, as kurtosis is very sensitive to outliers. The negentropy method are based on an important property of Gaussian distribution: a Gaussian variable has the largest entropy among all random variables of equal variance. This is also the reason why we want to find the most nongaussian variables. A simple proof can be found in Differential entropy.\ny is a Gaussian random variable of the same covariance matrix as x\nAn approximation for negentropy is\nA proof can be found on page 131 in the book Independent Component Analysis written by Aapo Hyv\u00e4rinen, Juha Karhunen, and Erkki Oja (They contribute great works to ICA)[9] This approximation also suffers the same problem as kurtosis (sensitive to outliers). Other approaches were developed.[10]\nA choice of \n\n\n\n\nG\n\n1\n\n\n\n\n{\\displaystyle G_{1}}\n\n and \n\n\n\n\nG\n\n2\n\n\n\n\n{\\displaystyle G_{2}}\n\n are\nICA is essentially a multivariate, parallel version of projection pursuit. Whereas projection pursuit extracts a series of signals one at a time from a set of M signal mixtures, ICA extracts M signals in parallel. This tends to make ICA more robust than projection pursuit.[11]\nThe projection pursuit method uses Gram-Schmidt orthogonalizaton to ensure the independence of the extracted signal, while ICA use infomax and maximum likelihood estimate to ensure the independence of the extracted signal. The Non-Normality of the extracted signal is achieved by assigning an appropriate model, or prior, for the signal.\nThe process of ICA based on infomax in short is: given a set of signal mixtures \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n and a set of identical independent model cumulative distribution functions(cdfs) \n\n\n\ng\n\n\n{\\displaystyle g}\n\n, we seek the unmixing matrix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n which maximizes the joint entropy of the signals \n\n\n\n\nY\n\n=\ng\n(\n\ny\n\n)\n\n\n{\\displaystyle \\mathbf {Y} =g(\\mathbf {y} )}\n\n, where \n\n\n\n\ny\n\n=\n\nW\nx\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {Wx} }\n\n are the signals extracted by \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n. Given the optimal \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n, the signals \n\n\n\n\nY\n\n\n\n{\\displaystyle \\mathbf {Y} }\n\n have maximum entropy and are therefore independent, which ensures that the extracted signals \n\n\n\n\ny\n\n=\n\ng\n\n\u2212\n1\n\n\n(\n\nY\n\n)\n\n\n{\\displaystyle \\mathbf {y} =g^{-1}(\\mathbf {Y} )}\n\n are also independent. \n\n\n\ng\n\n\n{\\displaystyle g}\n\n is an invertible function, and is the signal model. Note that if the source signal model probability density function \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n matches the probability density function of the extracted signal \n\n\n\n\np\n\n\ny\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {y} }}\n\n, then maximizing the joint entropy of \n\n\n\nY\n\n\n{\\displaystyle Y}\n\n also maximizes the amount of mutual information between \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n and \n\n\n\n\nY\n\n\n\n{\\displaystyle \\mathbf {Y} }\n\n. For this reason, using entropy to extract independent signals is known as infomax.\nConsider the entropy of the vector variable \n\n\n\n\nY\n\n=\ng\n(\n\ny\n\n)\n\n\n{\\displaystyle \\mathbf {Y} =g(\\mathbf {y} )}\n\n, where \n\n\n\n\ny\n\n=\n\nW\nx\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {Wx} }\n\n is the set of signals extracted by the unmixing matrix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n. For a finite set of values sampled from a distribution with pdf \n\n\n\n\np\n\n\ny\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {y} }}\n\n, the entropy of \n\n\n\n\nY\n\n\n\n{\\displaystyle \\mathbf {Y} }\n\n can be estimated as:\nThe joint pdf \n\n\n\n\np\n\n\nY\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {Y} }}\n\n can be shown to be related to the joint pdf \n\n\n\n\np\n\n\ny\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {y} }}\n\n of the extracted signals by the multivariate form:\nwhere \n\n\n\n\nJ\n\n=\n\n\n\n\u2202\n\nY\n\n\n\n\u2202\n\ny\n\n\n\n\n\n\n{\\displaystyle \\mathbf {J} ={\\frac {\\partial \\mathbf {Y} }{\\partial \\mathbf {y} }}}\n\n is the Jacobian matrix. We have \n\n\n\n\n|\n\n\nJ\n\n\n|\n\n=\n\ng\n\u2032\n\n(\n\ny\n\n)\n\n\n{\\displaystyle |\\mathbf {J} |=g'(\\mathbf {y} )}\n\n, and \n\n\n\n\ng\n\u2032\n\n\n\n{\\displaystyle g'}\n\n is the pdf assumed for source signals \n\n\n\n\ng\n\u2032\n\n=\n\np\n\ns\n\n\n\n\n{\\displaystyle g'=p_{s}}\n\n, therefore,\ntherefore,\nWe know that when \n\n\n\n\np\n\n\ny\n\n\n\n=\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{\\mathbf {y} }=p_{s}}\n\n, \n\n\n\n\np\n\n\nY\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {Y} }}\n\n is of uniform distribution, and \n\n\n\nH\n(\n\n\nY\n\n\n)\n\n\n{\\displaystyle H({\\mathbf {Y} })}\n\n is maximized. Since\nwhere \n\n\n\n\n|\n\n\nW\n\n\n|\n\n\n\n{\\displaystyle |\\mathbf {W} |}\n\n is the absolute value of the determinant of the unmixing matix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n. Therefore,\nso,\nsince \n\n\n\nH\n(\n\nx\n\n)\n=\n\u2212\n\n\n1\nN\n\n\n\n\u2211\n\nt\n=\n1\n\n\nN\n\n\nln\n\u2061\n\np\n\n\nx\n\n\n\n(\n\n\nx\n\n\nt\n\n\n)\n\n\n{\\displaystyle H(\\mathbf {x} )=-{\\frac {1}{N}}\\sum _{t=1}^{N}\\ln p_{\\mathbf {x} }(\\mathbf {x} ^{t})}\n\n, and maximizing \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n does not affect \n\n\n\n\nH\n\n\nx\n\n\n\n\n\n{\\displaystyle H_{\\mathbf {x} }}\n\n, so we can maximize the function\nto achieve the independence of extracted signal.\nIf there are M marginal pdfs of the model joint pdf \n\n\n\n\np\n\n\ns\n\n\n\n\n\n{\\displaystyle p_{\\mathbf {s} }}\n\n are independent and use the commonly super-gaussian model pdf for the source signals \n\n\n\n\np\n\n\ns\n\n\n\n=\n(\n1\n\u2212\ntanh\n\u2061\n(\n\ns\n\n\n)\n\n2\n\n\n)\n\n\n{\\displaystyle p_{\\mathbf {s} }=(1-\\tanh(\\mathbf {s} )^{2})}\n\n, then we have\nIn the sum, given an observed signal mixture \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n, the corresponding set of extracted signals \n\n\n\n\ny\n\n\n\n{\\displaystyle \\mathbf {y} }\n\n and source signal model \n\n\n\n\np\n\n\ns\n\n\n\n=\n\ng\n\u2032\n\n\n\n{\\displaystyle p_{\\mathbf {s} }=g'}\n\n, we can find the optimal unmixing matrix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n, and make the extracted signals independent and non-gaussian. Like the projection pursuit situation, we can use gradient descent method to find the optimal solution of the unmixing matrix.\nMaximum likelihood estimation (MLE) is a standard statistical tool for finding parameter values (e.g. the unmixing matrix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n) that provide the best fit of some data (e.g., the extracted signals \n\n\n\ny\n\n\n{\\displaystyle y}\n\n) to a given a model (e.g., the assumed joint probability density function (pdf) \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n of source signals).[11]\nThe ML \"model\" includes a specification of a pdf, which in this case is the pdf \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n of the unknown source signals \n\n\n\ns\n\n\n{\\displaystyle s}\n\n. Using ML ICA, the objective is to find an unmixing matrix that yields extracted signals \n\n\n\ny\n=\n\nW\n\nx\n\n\n{\\displaystyle y=\\mathbf {W} x}\n\n with a joint pdf as similar as possible to the joint pdf \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n of the unknown source signals \n\n\n\ns\n\n\n{\\displaystyle s}\n\n.\nMLE is thus based on the assumption that if the model pdf \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n and the model parameters \n\n\n\n\nA\n\n\n\n{\\displaystyle \\mathbf {A} }\n\n are correct then a high probability should be obtained for the data \n\n\n\nx\n\n\n{\\displaystyle x}\n\n that were actually observed. Conversely, if \n\n\n\n\nA\n\n\n\n{\\displaystyle \\mathbf {A} }\n\n is far from the correct parameter values then a low probability of the observed data would be expected.\nUsing MLE, we call the probability of the observed data for a given set of model parameter values (e.g., a pdf \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n and a matrix \n\n\n\n\nA\n\n\n\n{\\displaystyle \\mathbf {A} }\n\n) the likelihood of the model parameter values given the observed data.\nWe define a likelihood function \n\n\n\n\nL\n(\nW\n)\n\n\n\n{\\displaystyle \\mathbf {L(W)} }\n\n of \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n:\n\n\n\n\n\nL\n(\nW\n)\n\n=\n\np\n\ns\n\n\n(\n\nW\n\nx\n)\n\n|\n\ndet\n\nW\n\n\n|\n\n.\n\n\n{\\displaystyle \\mathbf {L(W)} =p_{s}(\\mathbf {W} x)|\\det \\mathbf {W} |.}\n\n\nThis equals to the probability density at \n\n\n\nx\n\n\n{\\displaystyle x}\n\n, since \n\n\n\ns\n=\n\nW\n\nx\n\n\n{\\displaystyle s=\\mathbf {W} x}\n\n.\nThus, if we wish to find a \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n that is most likely to have generated the observed mixtures \n\n\n\nx\n\n\n{\\displaystyle x}\n\n from the unknown source signals \n\n\n\ns\n\n\n{\\displaystyle s}\n\n with pdf \n\n\n\n\np\n\ns\n\n\n\n\n{\\displaystyle p_{s}}\n\n then we need only find that \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n which maximizes the likelihood \n\n\n\n\nL\n(\nW\n)\n\n\n\n{\\displaystyle \\mathbf {L(W)} }\n\n. The unmixing matrix that maximizes equation is known as the MLE of the optimal unmixing matrix.\nIt is common practice to use the log likelihood, because this is easier to evaluate. As the logarithm is a monotonic function, the \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n that maximizes the function \n\n\n\n\nL\n(\nW\n)\n\n\n\n{\\displaystyle \\mathbf {L(W)} }\n\n also maximizes its logarithm \n\n\n\nln\n\u2061\n\nL\n(\nW\n)\n\n\n\n{\\displaystyle \\ln \\mathbf {L(W)} }\n\n. This allows us to take the logarithm of equation above, which yields the log likelihood function\n\n\n\n\nln\n\u2061\n\nL\n(\nW\n)\n\n=\n\n\u2211\n\ni\n\n\n\n\u2211\n\nt\n\n\nln\n\u2061\n\np\n\ns\n\n\n(\n\nw\n\ni\n\n\nT\n\n\n\nx\n\nt\n\n\n)\n+\nN\nln\n\u2061\n\n|\n\ndet\n\nW\n\n\n|\n\n\n\n{\\displaystyle \\ln \\mathbf {L(W)} =\\sum _{i}\\sum _{t}\\ln p_{s}(w_{i}^{T}x_{t})+N\\ln |\\det \\mathbf {W} |}\n\n\nIf we substitute a commonly used high-Kurtosis model pdf for the source signals \n\n\n\n\np\n\ns\n\n\n=\n(\n1\n\u2212\ntanh\n\u2061\n(\ns\n\n)\n\n2\n\n\n)\n\n\n{\\displaystyle p_{s}=(1-\\tanh(s)^{2})}\n\n then we have\n\n\n\n\nln\n\u2061\n\nL\n(\nW\n)\n\n=\n\n\n1\nN\n\n\n\n\u2211\n\ni\n\n\nM\n\n\n\n\u2211\n\nt\n\n\nN\n\n\nln\n\u2061\n(\n1\n\u2212\ntanh\n\u2061\n(\n\nw\n\ni\n\n\nT\n\n\n\nx\n\nt\n\n\n\n)\n\n2\n\n\n)\n+\nln\n\u2061\n\n|\n\ndet\n\nW\n\n\n|\n\n\n\n{\\displaystyle \\ln \\mathbf {L(W)} ={1 \\over N}\\sum _{i}^{M}\\sum _{t}^{N}\\ln(1-\\tanh(w_{i}^{T}x_{t})^{2})+\\ln |\\det \\mathbf {W} |}\n\n\nThis matrix \n\n\n\n\nW\n\n\n\n{\\displaystyle \\mathbf {W} }\n\n that maximizes this function is the maximum likelihood estimation.\nThe early general framework for independent component analysis was introduced by Jeanny H\u00e9rault and Bernard Ans from 1984,[12] then rejoined by Christian Jutten from 1985[13][14][15] and was most clearly stated by Pierre Comon in 1994.[16] In 1995, Tony Bell and Terry Sejnowski introduced a fast and efficient ICA algorithm based on infomax, a principle introduced by Ralph Linsker in 1987.\nThere are many algorithms available in the literature which do ICA. A largely used one, including in industrial applications, is the FastICA algorithm, developed by Aapo Hyv\u00e4rinen and Erkki Oja, which uses the kurtosis as cost function. Other examples are rather related to blind source separation where a more general approach is used. For example, one can drop the independence assumption and separate mutually correlated signals, thus, statistically \"dependent\" signals. Sepp Hochreiter and J\u00fcrgen Schmidhuber showed how to obtain non-linear ICA or source separation as a by-product of regularization (1999). Their method does not require a priori knowledge about the number of independent sources.\nICA can be extended to analyze non-physical signals. For instance, ICA has been applied to discover discussion topics on a bag of news list archives.\nSome ICA applications are listed below:[1]", 
    "dbpedia_url": "http://dbpedia.org/resource/Independent_component_analysis", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Independent_component_analysis\n"
}