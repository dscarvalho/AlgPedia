{
    "about": "A knight's tour is a sequence of moves of a knight on a chessboard such that the knight visits every square only once. If the knight ends on a square that is one knight's move from the beginning square (so that it could tour the board again immediately, following the same path), the tour is closed, otherwise it is open.", 
    "name": "Knight'S Tour", 
    "classification": "Graph Algorithms", 
    "full_text": "A knight's tour is a sequence of moves of a knight on a chessboard such that the knight visits every square only once. If the knight ends on a square that is one knight's move from the beginning square (so that it could tour the board again immediately, following the same path), the tour is closed, otherwise it is open.\nThe knight's tour problem is the mathematical problem of finding a knight's tour. Creating a program to find a knight's tour is a common problem given to computer science students.[1] Variations of the knight's tour problem involve chessboards of different sizes than the usual 8 \u00d7 8, as well as irregular (non-rectangular) boards.\n\n\nThe knight's tour problem is an instance of the more general Hamiltonian path problem in graph theory. The problem of finding a closed knight's tour is similarly an instance of the Hamiltonian cycle problem. Unlike the general Hamiltonian path problem, the knight's tour problem can be solved in linear time.[2]\nThe earliest known reference to the knight's tour problem dates back to the 9th century AD. In Rudra\u1e6da's Kavyalankara[3] (5.15), a Sanskrit work on Poetics, the pattern of a knight's tour on a half-board has been presented as an elaborate poetic figure (\"citra-ala\u1e45k\u0101ra\") called the \"turagapadabandha\" or 'arrangement in the steps of a horse.' The same verse in four lines of eight syllables each can be read from left to right or by following the path of the knight on tour. Since the Indic writing systems used for Sanskrit are syllabic, each syllable can be thought of as representing a square on a chess board. Rudrata's example is as follows:\n\u0938\u0947 \u0928\u093e \u0932\u0940 \u0932\u0940 \u0932\u0940 \u0928\u093e \u0928\u093e \u0928\u093e \u0932\u0940\n\u0932\u0940 \u0928\u093e \u0928\u093e \u0928\u093e \u0928\u093e \u0932\u0940 \u0932\u0940 \u0932\u0940 \u0932\u0940\n\u0928 \u0932\u0940 \u0928\u093e \u0932\u0940 \u0932\u0940 \u0932\u0947 \u0928\u093e \u0932\u0940 \u0928\u093e\n\u0932\u0940 \u0932\u0940 \u0932\u0940 \u0928\u093e \u0928\u093e \u0928\u093e \u0928\u093e \u0928\u093e \u0932\u0940\nse n\u0101 l\u012b l\u012b l\u012b n\u0101 n\u0101 l\u012b\nl\u012b n\u0101 n\u0101 n\u0101 n\u0101 l\u012b l\u012b l\u012b\nna l\u012b n\u0101 l\u012b le n\u0101 l\u012b n\u0101\nl\u012b l\u012b l\u012b n\u0101 n\u0101 n\u0101 n\u0101 l\u012b\nFor example, the first line can be read from left to right or by moving from the first square to second line, third syllable (2.3) and then to 1.5 to 2.7 to 4.8 to 3.6 to 4.4 to 3.2.\nOne of the first mathematicians to investigate the knight's tour was Leonhard Euler. The first procedure for completing the Knight's Tour was Warnsdorf's rule, first described in 1823 by H. C. von Warnsdorf.\nIn the 20th century, the Oulipo group of writers used it among many others. The most notable example is the 10 \u00d7 10 Knight's Tour which sets the order of the chapters in Georges Perec's novel Life: A User's Manual. The sixth game of the 2010 World Chess Championship between Viswanathan Anand and Veselin Topalov saw Anand making 13 consecutive knight moves (albeit using both knights); online commentors jested that Anand was trying to solve the Knight's Tour problem during the game.\nSchwenk[4] proved that for any m \u00d7 n board with m \u2264 n, a closed knight's tour is always possible unless one or more of these three conditions are met:\nCull et al. and Conrad et al. proved that on any rectangular board whose smaller dimension is at least 5, there is a (possibly open) knight's tour.[2][5]\nOn an 8 \u00d7 8 board, there are exactly 26,534,728,821,064 directed closed tours (i.e. two tours along the same path that travel in opposite directions are counted separately, as are rotations and reflections).[6][7][8] The number of undirected closed tours is half this number, since every tour can be traced in reverse. There are 9,862 undirected closed tours on a 6 \u00d7 6 board.[9]\nThe number of directed open tours on an \n\n\n\nn\n\u00d7\nn\n\n\n{\\displaystyle n\\times n}\n\n board for n = 1, 2, \u2026 are:\nThere are quite a number of ways to find a knight's tour on a given board with a computer. Some of these methods are algorithms while others are heuristics.\nA brute-force search for a knight's tour is impractical on all but the smallest boards;[10] for example, on an 8x8 board there are approximately 4\u00d71051 possible move sequences,[11] and it is well beyond the capacity of modern computers (or networks of computers) to perform operations on such a large set. However, the size of this number gives a misleading impression of the difficulty of the problem, which can be solved \"by using human insight and ingenuity ... without much difficulty.\"[10]\nBy dividing the board into smaller pieces, constructing tours on each piece, and patching the pieces together, one can construct tours on most rectangular boards in polynomial time.[5][12]\nThe Knight's Tour problem also lends itself to being solved by a neural network implementation.[13] The network is set up such that every legal knight's move is represented by a neuron, and each neuron is initialized randomly to be either \"active\" or \"inactive\" (output of 1 or 0), with 1 implying that the neuron is part of the final solution. Each neuron also has a state function (described below) which is initialized to 0.\nWhen the network is allowed to run, each neuron can change its state and output based on the states and outputs of its neighbors (those exactly one knight's move away) according to the following transition rules:\nwhere \n\n\n\nt\n\n\n{\\displaystyle t}\n\n represents discrete intervals of time, \n\n\n\nU\n(\n\nN\n\ni\n,\nj\n\n\n)\n\n\n{\\displaystyle U(N_{i,j})}\n\n is the state of the neuron connecting square \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to square \n\n\n\nj\n\n\n{\\displaystyle j}\n\n, \n\n\n\nV\n(\n\nN\n\ni\n,\nj\n\n\n)\n\n\n{\\displaystyle V(N_{i,j})}\n\n is the output of the neuron from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n, and \n\n\n\nG\n(\n\nN\n\ni\n,\nj\n\n\n)\n\n\n{\\displaystyle G(N_{i,j})}\n\n is the set of neighbors of the neuron.\nAlthough divergent cases are possible, the network should eventually converge, which occurs when no neuron changes its state from time \n\n\n\nt\n\n\n{\\displaystyle t}\n\n to \n\n\n\nt\n+\n1\n\n\n{\\displaystyle t+1}\n\n. When the network converges, either the network encodes a knight's tour or a series of two or more independent circuits within the same board.\nWarnsdorf's rule is a heuristic for finding a knight's tour. The knight is moved so that it always proceeds to the square from which the knight will have the fewest onward moves. When calculating the number of onward moves for each candidate square, we do not count moves that revisit any square already visited. It is, of course, possible to have two or more choices for which the number of onward moves is equal; there are various methods for breaking such ties, including one devised by Pohl [14] and another by Squirrel and Cull.[15]\nThis rule may also more generally be applied to any graph. In graph-theoretic terms, each move is made to the adjacent vertex with the least degree. Although the Hamiltonian path problem is NP-hard in general, on many graphs that occur in practice this heuristic is able to successfully locate a solution in linear time.[14] The knight's tour is a special case.[16]\nThe heuristic was first described in \"Des R\u00f6sselsprungs einfachste und allgemeinste L\u00f6sung\" by H. C. von Warnsdorf in 1823.[16] A computer program that finds a knight's tour for any starting position using Warnsdorf's rule was written by Gordon Horsington and published in 1984 in the book Century/Acorn User Book of Computer Puzzles.[17]", 
    "dbpedia_url": "http://dbpedia.org/resource/Knight's_tour", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Knight's_tour\n"
}