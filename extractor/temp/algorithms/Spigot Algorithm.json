{
    "about": "A spigot algorithm is an algorithm for computing the value of a mathematical constant such as \u03c0 or e which generates output digits left to right, with limited intermediate storage.", 
    "name": "Spigot Algorithm", 
    "classification": "Computer Arithmetic Algorithms", 
    "full_text": "A spigot algorithm is an algorithm for computing the value of a mathematical constant such as \u03c0 or e which generates output digits left to right, with limited intermediate storage.\nThe name comes from a \"spigot\", meaning a tap or valve controlling the flow of a liquid.\nInterest in such algorithms was spurred in the early days of computational mathematics by extreme constraints on memory, and an algorithm for calculating the digits of e appears in a paper by Sale in 1968.[1] The name \"Spigot algorithm\" appears to have been coined by Stanley Rabinowitz and Stan Wagon,[2] whose algorithm for calculating the digits of \u03c0 is sometimes referred to as \"the spigot algorithm for \u03c0\".\nThe spigot algorithm of Rabinowitz and Wagon is bounded, in the sense that the number of required digits must be specified in advance. Jeremy Gibbons (2004)[3] uses the term \"streaming algorithm\" to mean one which can be run indefinitely, without a prior bound. A further refinement is an algorithm which can compute a single arbitrary digit, without first computing the preceding digits: an example is the Bailey-Borwein-Plouffe formula, a digit extraction algorithm for \u03c0 which produces hexadecimal digits.\nThis example illustrates the working of a spigot algorithm by calculating the binary digits of the natural logarithm of 2 (sequence A068426 in the OEIS) using the identity\nTo start calculating binary digits from, say, the 8th place we multiply this identity by 27(since 7 = 8 - 1):\nWe then divide the infinite sum into a \"head\", in which the exponents of 2 are greater than or equal to zero, and a \"tail\", in which the exponents of 2 are negative:\nWe are only interested in the fractional part of this value, so we can replace each of the summands in the \"head\" by\nCalculating each of these terms and adding them to a running total where we again only keep the fractional part, we have:\nWe add a few terms in the \"tail\", noting that the error introduced by truncating the sum is less than the final term:\nAdding the \"head\" and the first few terms of the \"tail\" together we get:\nso the 8th to 11th binary digits in the binary expansion of ln(2) are 1, 0, 1, 1. Note that we have not calculated the values of the first seven binary digits \u2013 indeed, all information about them has been intentionally discarded by using modular arithmetic in the \"head\" sum.\nThe same approach can be used to calculate digits of the binary expansion of ln(2) starting from an arbitrary nth position. The number of terms in the \"head\" sum increases linearly with n, but the complexity of each term only increases with the logarithm of n if an efficient method of modular exponentiation is used. The precision of calculations and intermediate results and the number of terms taken from the \"tail\" sum are all independent of n, and only depend on the number of binary digits that are being calculated \u2013 single precision arithmetic can be used to calculate around 12 binary digits, regardless of the starting position.", 
    "dbpedia_url": "http://dbpedia.org/resource/Spigot_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Spigot_algorithm\n"
}