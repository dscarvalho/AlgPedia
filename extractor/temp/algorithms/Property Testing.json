{
    "about": "In computer science, a property testing algorithm for a decision problem is an algorithm whose query complexity to its input is much smaller than the instance size of the problem. Typically property testing algorithms are used to decide if some mathematical object (such as a graph or a boolean function) has a \"global\" property, or is \"far\" from having this property, using only a small number of \"local\" queries to the object.", 
    "name": "Property Testing", 
    "classification": "Approximation Algorithms", 
    "full_text": "In computer science, a property testing algorithm for a decision problem is an algorithm whose query complexity to its input is much smaller than the instance size of the problem. Typically property testing algorithms are used to decide if some mathematical object (such as a graph or a boolean function) has a \"global\" property, or is \"far\" from having this property, using only a small number of \"local\" queries to the object.\nFor example, the following promise problem admits an algorithm whose query complexity is independent of the instance size (for an arbitrary constant \u03b5 > 0):\nProperty testing algorithms are important in the theory of probabilistically checkable proofs.\nFormally, a property testing algorithm with query complexity q(n) and proximity parameter \u03b5 for a decision problem L is a randomized algorithm that, on input x (an instance of L) makes at most q(|x|) queries to x and behaves as follows:\nHere, \"x is \u03b5-far from L\" means that the Hamming distance between x and any string in L is at least \u03b5|x|.\nA property testing algorithm is said to have one-sided error if it satisfies the stronger condition that the accepting probability for instances x \u2208 L is 1 instead of \u2154.\nA property testing algorithm is said be non-adaptive if it performs all its queries before it \"observes\" any answers to previous queries. Such an algorithm can be viewed as operating in the following manner. First the algorithm receives its input. Before looking at the input, using its internal randomness, the algorithm decides which symbols of the input are to be queried. Next, the algorithm observes these symbols. Finally, without making any additional queries (but possibly using its randomness), the algorithm decides whether to accept or reject the input.\nThe main efficiency parameter of a property testing algorithm is its query complexity, which is the maximum number of input symbols inspected over all inputs of a given length (and all random choices made by the algorithm). One is interested in designing algorithms whose query complexity is as small as possible. In many cases the running time of property testing algorithms is sublinear in the instance length. Typically, the goal is first to make the query complexity as small as possible as a function of the instance size n, and then study the dependency on the proximity parameter \u03b5.\nUnlike other complexity-theoretic settings, the asymptotic query complexity of property testing algorithms is affected dramatically by the representation of instances. For example, when \u03b5 = 0.01, the problem of testing bipartiteness of dense graphs (which are represented by their adjacency matrix) admits an algorithm of constant query complexity. In contrast, sparse graphs on n vertices (which are represented by their adjacency list) require property testing algorithms of query complexity \n\n\n\n\u03a9\n(\n\n\nn\n\n\n)\n\n\n{\\displaystyle \\Omega ({\\sqrt {n}})}\n\n.\nThe query complexity of property testing algorithms grows as the proximity parameter \u03b5 becomes smaller for all non-trivial properties. This dependence on \u03b5 is necessary as a change of fewer than \u03b5 symbols in the input cannot be detected with constant probability using fewer than O(1/\u03b5) queries. Many interesting properties of dense graphs can be tested using query complexity that depends only on \u03b5 and not on the graph size n. However, the query complexity can grow enormously fast as a function of \u03b5. For example, for a long time the best known algorithm for testing if a graph does not contain any triangle had a query complexity which is a tower function of poly(1/\u03b5), and only in 2010 this has been improved to a tower function of log(1/\u03b5). One of the reasons for this enormous growth in bounds is that many of the positive results for property testing of graphs are established using the Szemer\u00e9di regularity lemma, which also has tower-type bounds in its conclusions.", 
    "dbpedia_url": "http://dbpedia.org/resource/Property_testing", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Property_testing\n"
}