{
    "about": "In computer science, bogosort[1][2] (also permutation sort, stupid sort,[3] slowsort,[4] shotgun sort or monkey sort) is a highly ineffective sorting algorithm based on the generate and test paradigm. The algorithm successively generates permutations of its input until it finds one that is sorted. It is not useful for sorting, but may be used for educational purposes, to contrast it with other more realistic algorithms.", 
    "name": "Bogosort", 
    "classification": "Sorting Algorithms", 
    "full_text": "In computer science, bogosort[1][2] (also permutation sort, stupid sort,[3] slowsort,[4] shotgun sort or monkey sort) is a highly ineffective sorting algorithm based on the generate and test paradigm. The algorithm successively generates permutations of its input until it finds one that is sorted. It is not useful for sorting, but may be used for educational purposes, to contrast it with other more realistic algorithms.\nTwo versions of the algorithm exist: a deterministic version that enumerates all permutations until it hits a sorted one,[2][4] and a randomized version that randomly permutes its input. An analogy for the working of the latter version is to sort a deck of cards by throwing the deck into the air, picking the cards up at random, and repeating the process until the deck is sorted. Its name comes from the word bogus.[5]\n\n\nThe following is a description of the randomized algorithm in pseudocode:\nHere is a code example with shuffle in Standard ML:\nIf all elements to be sorted are distinct, the expected number of comparisons performed in the average case by randomized bogosort is asymptotically equivalent to \n\n\n\n(\ne\n\u2212\n1\n)\nn\n!\n\n\n{\\displaystyle (e-1)n!}\n\n, and the expected number of swaps in the average case equals \n\n\n\n(\nn\n\u2212\n1\n)\nn\n!\n\n\n{\\displaystyle (n-1)n!}\n\n.[1] The expected number of swaps grows faster than the expected number of comparisons, because if the elements are not in order, this will usually be discovered after only a few comparisons, no matter how many elements there are; but the work of shuffling the collection is proportional to its size. In the worst case, the number of comparisons and swaps are both unbounded, for the same reason that a tossed coin might turn up heads any number of times in a row.\nThe best case occurs if the list as given is already sorted; in this case the expected number of comparisons is \n\n\n\nn\n\u2212\n1\n\n\n{\\displaystyle n-1}\n\n, and no swaps at all are carried out.[1]\nFor any collection of fixed size, the expected running time of the algorithm is finite for much the same reason that the infinite monkey theorem holds: there is some probability of getting the right permutation, so given an unbounded number of tries it will almost surely eventually be chosen.", 
    "dbpedia_url": "http://dbpedia.org/resource/Bogosort", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Bogosort\n"
}