{
    "about": "Heterogeneous Earliest Finish Time (or HEFT) is a heuristic to schedule a set of dependent tasks onto a network of heterogeneous workers taking communication time into account.[1] For inputs HEFT takes a set of tasks, represented as a directed acyclic graph, a set of workers, the times to execute each task on each worker, and the times to communicate the results from each job to each of its children between each pair of workers. It descends from list scheduling algorithms.", 
    "name": "Heterogeneous Earliest Finish Time", 
    "classification": "Scheduling Algorithms", 
    "full_text": "Heterogeneous Earliest Finish Time (or HEFT) is a heuristic to schedule a set of dependent tasks onto a network of heterogeneous workers taking communication time into account.[1] For inputs HEFT takes a set of tasks, represented as a directed acyclic graph, a set of workers, the times to execute each task on each worker, and the times to communicate the results from each job to each of its children between each pair of workers. It descends from list scheduling algorithms.\n\n\nHEFT executes in two phases.\nIn the first phase each task is given a priority. The priority of each task \n\n\n\n\nn\n\ni\n\n\n\n\n{\\displaystyle n_{i}}\n\n is usually designated to be its \"upward rank\" which is defined recursively as follows\n\n\n\n\nr\na\nn\n\nk\n\nu\n\n\n(\n\nn\n\ni\n\n\n)\n=\n\n\n\nw\n\ni\n\n\n\u00af\n\n\n+\n\nmax\n\n\nn\n\nj\n\n\n\u2208\ns\nu\nc\nc\n(\n\nn\n\ni\n\n\n)\n\n\n(\n\n\n\nc\n\ni\n,\nj\n\n\n\u00af\n\n\n+\nr\na\nn\n\nk\n\nu\n\n\n(\n\nn\n\nj\n\n\n)\n)\n\n\n{\\displaystyle rank_{u}(n_{i})={\\overline {w_{i}}}+\\max _{n_{j}\\in succ(n_{i})}({\\overline {c_{i,j}}}+rank_{u}(n_{j}))}\n\n\nwhere \n\n\n\n\nn\n\ni\n\n\n\n\n{\\displaystyle n_{i}}\n\n represents the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n task, \n\n\n\n\n\n\nw\n\ni\n\n\n\u00af\n\n\n\n\n{\\displaystyle {\\overline {w_{i}}}}\n\n is an average computation cost of job i among all the workers, \n\n\n\ns\nu\nc\nc\n(\n\nn\n\ni\n\n\n)\n\n\n{\\displaystyle succ(n_{i})}\n\n is the set of all jobs that immediately depend on task \n\n\n\n\nn\n\ni\n\n\n\n\n{\\displaystyle n_{i}}\n\n, and \n\n\n\n\n\n\nc\n\ni\n,\nj\n\n\n\u00af\n\n\n\n\n{\\displaystyle {\\overline {c_{i,j}}}}\n\n is the average communication cost of the variables transferred between jobs \n\n\n\n\nn\n\ni\n\n\n\n\n{\\displaystyle n_{i}}\n\n and \n\n\n\n\nn\n\nj\n\n\n\n\n{\\displaystyle n_{j}}\n\n between all pairs of workers. Note that the computation of \n\n\n\nr\na\nn\n\nk\n\nu\n\n\n(\n\nn\n\ni\n\n\n)\n\n\n{\\displaystyle rank_{u}(n_{i})}\n\n depends on the computation of the rank of all its children. The upward rank is meant to represent the expected distance of any task from the end of the computation. For averaged quantities like \n\n\n\n\n\n\nw\n\ni\n\n\n\u00af\n\n\n\n\n{\\displaystyle {\\overline {w_{i}}}}\n\n different averages may provide different results.[2]\nIn the second phase tasks are assigned to workers. Now that all tasks are prioritized we consider and schedule each one, starting with the highest priority. The task with the highest priority for which all dependent tasks have finished is scheduled on the worker which will result in the earliest finish time of that task. This finish time depends on the communication time to send all necessary inputs to the worker, the computation time of the task on the worker, and the time when that processor becomes available (it may be busy with another task).\nHEFT is well respected among heuristic algorithms for this problem. However in complex situations it can easily fail to find the optimal scheduling. HEFT is essentially a greedy algorithm and incapable of making short-term sacrifices for long term benefits.\nA Python implementation of HEFT is available on github", 
    "dbpedia_url": "http://dbpedia.org/resource/Heterogeneous_Earliest_Finish_Time", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Heterogeneous_Earliest_Finish_Time\n"
}