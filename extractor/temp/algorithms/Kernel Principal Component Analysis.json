{
    "about": "In the field of multivariate statistics, kernel principal component analysis (kernel PCA) [1] is an extension of principal component analysis (PCA) using techniques of kernel methods. Using a kernel, the originally linear operations of PCA are performed in a reproducing kernel Hilbert space.", 
    "name": "Kernel Principal Component Analysis", 
    "classification": "Signal Processing", 
    "full_text": "In the field of multivariate statistics, kernel principal component analysis (kernel PCA) [1] is an extension of principal component analysis (PCA) using techniques of kernel methods. Using a kernel, the originally linear operations of PCA are performed in a reproducing kernel Hilbert space.\n\n\nRecall that conventional PCA operates on zero-centered data; that is,\nIt operates by diagonalizing the covariance matrix,\nin other words, it gives an eigendecomposition of the covariance matrix:\nwhich can be rewritten as\n(See also: Covariance matrix as a linear operator)\nTo understand the utility of kernel PCA, particularly for clustering, observe that, while N points cannot in general be linearly separated in \n\n\n\nd\n<\nN\n\n\n{\\displaystyle d<N}\n\n dimensions, they can almost always be linearly separated in \n\n\n\nd\n\u2265\nN\n\n\n{\\displaystyle d\\geq N}\n\n dimensions. That is, given N points, \n\n\n\n\n\nx\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {x} _{i}}\n\n, if we map them to an N-dimensional space with\nit is easy to construct a hyperplane that divides the points into arbitrary clusters. Of course, this \n\n\n\n\u03a6\n\n\n{\\displaystyle \\Phi }\n\n creates linearly independent vectors, so there is no covariance on which to perform eigendecomposition explicitly as we would in linear PCA.\nInstead, in kernel PCA, a non-trivial, arbitrary \n\n\n\n\u03a6\n\n\n{\\displaystyle \\Phi }\n\n function is 'chosen' that is never calculated explicitly, allowing the possibility to use very-high-dimensional \n\n\n\n\u03a6\n\n\n{\\displaystyle \\Phi }\n\n's if we never have to actually evaluate the data in that space. Since we generally try to avoid working in the \n\n\n\n\u03a6\n\n\n{\\displaystyle \\Phi }\n\n-space, which we will call the 'feature space', we can create the N-by-N kernel\nwhich represents the inner product space (see Gramian matrix) of the otherwise intractable feature space. The dual form that arises in the creation of a kernel allows us to mathematically formulate a version of PCA in which we never actually solve the eigenvectors and eigenvalues of the covariance matrix in the \n\n\n\n\u03a6\n(\n\nx\n\n)\n\n\n{\\displaystyle \\Phi (\\mathbf {x} )}\n\n-space (see Kernel trick). The N-elements in each column of K represent the dot product of one point of the transformed data with respect to all the transformed points (N points). Some well-known kernels are shown in the example below.\nBecause we are never working directly in the feature space, the kernel-formulation of PCA is restricted in that it computes not the principal components themselves, but the projections of our data onto those components. To evaluate the projection from a point in the feature space \n\n\n\n\u03a6\n(\n\nx\n\n)\n\n\n{\\displaystyle \\Phi (\\mathbf {x} )}\n\n onto the kth principal component \n\n\n\n\nV\n\nk\n\n\n\n\n{\\displaystyle V^{k}}\n\n (where superscript k means the component k, not powers of k)\nWe note that \n\n\n\n\u03a6\n(\n\n\nx\n\ni\n\n\n\n\n)\n\nT\n\n\n\u03a6\n(\n\nx\n\n)\n\n\n{\\displaystyle \\Phi (\\mathbf {x_{i}} )^{T}\\Phi (\\mathbf {x} )}\n\n denotes dot product, which is simply the elements of the kernel \n\n\n\nK\n\n\n{\\displaystyle K}\n\n. It seems all that's left is to calculate and normalize the \n\n\n\n\n\n\na\n\ni\n\n\n\n\nk\n\n\n\n\n{\\displaystyle \\mathbf {a_{i}} ^{k}}\n\n, which can be done by solving the eigenvector equation\nwhere N is the number of data points in the set, and \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n and \n\n\n\n\na\n\n\n\n{\\displaystyle \\mathbf {a} }\n\n are the eigenvalues and eigenvectors of K. Then to normalize the eigenvectors \n\n\n\n\n\na\n\n\nk\n\n\n\n\n{\\displaystyle \\mathbf {a} ^{k}}\n\n's, we require that\nCare must be taken regarding the fact that, whether or not \n\n\n\nx\n\n\n{\\displaystyle x}\n\n has zero-mean in its original space, it is not guaranteed to be centered in the feature space (which we never compute explicitly). Since centered data is required to perform an effective principal component analysis, we 'centralize' K to become \n\n\n\n\nK\n\u2032\n\n\n\n{\\displaystyle K'}\n\n\nwhere \n\n\n\n\n\n1\n\nN\n\n\n\n\n\n{\\displaystyle \\mathbf {1_{N}} }\n\n denotes a N-by-N matrix for which each element takes value \n\n\n\n1\n\n/\n\nN\n\n\n{\\displaystyle 1/N}\n\n. We use \n\n\n\n\nK\n\u2032\n\n\n\n{\\displaystyle K'}\n\n to perform the kernel PCA algorithm described above.\nOne caveat of kernel PCA should be illustrated here. In linear PCA, we can use the eigenvalues to rank the eigenvectors based on how much of the variation of the data is captured by each principal component. This is useful for data dimensionality reduction and it could also be applied to KPCA. However, in practice there are cases that all variations of the data are same. This is typically caused by a wrong choice of kernel scale.\nIn practice, a large data set leads to a large K, and storing K may become a problem. One way to deal with this is to perform clustering on the dataset, and populate the kernel with the means of those clusters. Since even this method may yield a relatively large K, it is common to compute only the top P eigenvalues and eigenvectors of K.\nConsider three concentric clouds of points (shown); we wish to use kernel PCA to identify these groups. The color of the points is not part of the algorithm, but only there to show how the data groups together before and after the transformation.\nFirst, consider the kernel\nApplying this to kernel PCA yields the next image.\nNow consider a Gaussian kernel:\nThat is, this kernel is a measure of closeness, equal to 1 when the points coincide and equal to 0 at infinity.\nNote in particular that the first principal component is enough to distinguish the three different groups, which is impossible using only linear PCA, because linear PCA operates only in the given (in this case two-dimensional) space, in which these concentric point clouds are not linearly separable.\nKernel PCA has been demonstrated to be useful for novelty detection,[3] and image de-noising.[4]", 
    "dbpedia_url": "http://dbpedia.org/resource/Kernel_principal_component_analysis", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Kernel_principal_component_analysis\n"
}