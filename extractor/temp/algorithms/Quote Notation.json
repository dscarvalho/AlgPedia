{
    "about": "Quote notation is a number system for representing rational numbers which was designed to be attractive for use in computer architecture. In a typical computer architecture, the representation and manipulation of rational numbers is a complex topic. In quote notation, arithmetic operations take particularly simple, consistent forms, and can produce exact answers with no roundoff error.", 
    "name": "Quote Notation", 
    "classification": "Computer Arithmetic Algorithms", 
    "full_text": "Quote notation is a number system for representing rational numbers which was designed to be attractive for use in computer architecture. In a typical computer architecture, the representation and manipulation of rational numbers is a complex topic. In quote notation, arithmetic operations take particularly simple, consistent forms, and can produce exact answers with no roundoff error.\nQuote notation\u2019s arithmetic algorithms work with a typical right-to-left direction, in which the addition, subtraction, and multiplication algorithms have the same complexity for natural numbers, and division is easier than a typical division algorithm.\nThe notation was invented by Eric Hehner of the University of Toronto and Nigel Horspool, then at McGill University, and published in the SIAM Journal on Computing, v.8, n.2, May 1979, pp.\u00a0124\u2013134. The construction of this system follows the approach of Kurt Hensel's p-adic numbers.\n\n\nA rational number is represented in quote notation as a sequence of digits with a quote mark and radix point. For example, 12'3.4 is in quote notation.\nThe radix point may come before the quote mark, as in 12.3'4, or at the same place, as in 12!3. When the radix point and the quote coincide, an exclamation point (!) is used.\nThe radix point has its usual function; moving it left divides by the base; moving it right multiplies by the base. When the radix point is at the right end, the multiplicative factor is 1, and the point can be omitted. Scientific notation may be used as an alternative to the radix point.\nOne can think of the quote mark as saying that the digits to its left are repeated indefinitely to the left. For example, we can think of 12'34 as the infinite sequence ...1212121234 . If this repeated sequence is all 0s, both the zeros and the quote mark can be omitted.\nThe natural numbers are generally written in the way one usually expects to see them, but they can also be written using an explicit quote, an explicit radix point, or redundant zeros on either end. For example, the integer two can be written as 2 or 2. or 0'2 or 0'2. or even 000'02.000, and the integer zero can be written as 0 or 0' or 0. or 0!. In the last example, the exclamation point represents the quote and radix point at the same position.\nNegative integers begin with the digit one less than the base. For example, in decimal, minus three is written as 9'7. Numbers beginning with any other repeating sequence are not integers. For example, 6'7 is the fraction one third, and 7'6 is minus one and seven-ninths.\nTo convert quote notation into standard notation, the following algorithm can be used.\nThen the number represented by \n\n\n\n\nx\n\u2032\n\ny\n\n\n{\\displaystyle x'y}\n\n is given by \n\n\n\ny\n\u2212\nx\nz\n\n/\n\nw\n\n\n{\\displaystyle y-xz/w}\n\n.\nAs an example, we will take 12'345 and convert it to a standard notation.\nThen our standard notation follows,\nIf the leading digit is less than the first digit after the quote, the number is positive. For example, 123'45 is positive because 1 is less than 4. If the leading digit is more than the first digit after the quote, the number is negative. For example, 54'3 is negative because 5 is more than 3 .\nIf the quote comes at the end, just append a zero after the radix point. For example, 592' = 592!0, which is negative because 5 is more than 0. And 59.2' = 59.2'0 which is also negative.\nIf the leading digit equals the first digit after the quote, then either the number is 0!0 = 0, or the representation can be shortened by rolling the repetition to the right. For example, 23'25 = 32'5 which is positive because 3 is less than 5.\nIn binary, if it starts with 1 it is negative, and if it starts with 0 it is nonnegative, assuming the repetition has been rolled to the right as far as possible.\nIn our usual sign-and-magnitude notation, to add the two integers 25 and \u221237, one first compares signs, and determines that the addition will be performed by subtracting the magnitudes. Then one compares the magnitudes to determine which will be subtracted from which, and to determine the sign of the result. In our usual fraction notation, to add 2/3 + 4/5 requires finding a common denominator, multiplying each numerator by the new factors in this common denominator, then adding the numerators, then dividing the numerator and denominator by any factors they have in common.\nIn quote notation, to add, just add. There are no sign or magnitude comparisons, and no common denominators. Addition is the same as for natural numbers. Here are some examples.\nIn our usual sign-and-magnitude notation, subtraction involves sign comparison and magnitude comparison, and may require adding or subtracting the magnitudes, just like addition. In our usual fraction notation, subtraction requires finding a common denominator, multiplying, subtracting, and reducing to lowest terms, just like addition.\nIn quote notation, to subtract, just subtract. There are no sign or magnitude comparisons, and no common denominators. When a minuend digit is less than the corresponding subtrahend digit, do not borrow from the minuend digit to its left; instead, carry (add one) to the subtrahend digit to its left. Here are some examples.\nMultiplication is the same as for natural numbers. To recognize the repetition in the answer, it helps to add the partial results pairwise. Here are some examples.\nTo someone who is unfamiliar with quote notation, 592' is unfamiliar, and translation to \u221216/27 is helpful. To someone who normally uses quote notation, \u221216/27 is a formula with a negation and a division operation; performing those operations yields the answer 592' .\nThe commonly used division algorithm produces digits from left-to-right, which is opposite to addition, subtraction, and multiplication. This makes further arithmetic difficult. For example, how do we add 1.234234234234... + 5.67676767...\u00a0? Usually we use a finite number of digits and accept an approximate answer with roundoff error. The commonly used division algorithm also produces duplicate representations; for example, 0.499999... and 0.5 represent the same number. In decimal, there is a kind of guess for each digit, which is seen to be right or wrong as the calculation progresses.\nIn quote notation, division produces digits from right-to-left, the same as all other arithmetic algorithms; therefore further arithmetic is easy. Quote arithmetic is exact, with no error. Each rational number has a unique representation (if the repetition is expressed as simply as possible, and we have no meaningless 0s at the right end after a radix point). Each digit is determined by a \"division table\", which is the inverse of part of the multiplication table; there is no \"guessing\". Here is an example.\nDivision works when the divisor and the base have no factors in common except 1. In the previous example, 27 has factors 1, 3, and 27. The base is 10, which has factors 1, 2, 5, and 10. So division worked. When there are factors in common, they must be removed. For example, to divide 4 by 15, first multiply both 4 and 15 by 2:\nAny 0s at the end of the divisor just tell where the radix point goes in the result. So now divide 8 by 3.\nRemoving common factors is annoying, and it is unnecessary if the base is a prime number. Computers use base 2, which is a prime number, so division always works. And the division tables are trivial. The only questions are: what times 1 ends in 0? and: what times 1 ends in 1. Thus the rightmost bits in the differences are the bits in the answer. For example, one divided by three, which is 1/11, proceeds as follows.\nTo negate, complement each digit, and then add 1. For example, in decimal, to negate 12'345, complement and get 87'654, and then add 1 to get 87'655. In binary, flip the bits, then add 1 (same as 2's complement). For example, to negate 01'1, which is one-third, flip the bits to get 10'0, then add 1 to get 10'1, and roll right to shorten it to 01' which is minus one-third.", 
    "dbpedia_url": "http://dbpedia.org/resource/Quote_notation", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Quote_notation\n"
}