{
    "about": "Adaptive Replacement Cache (ARC) is a page replacement algorithm with better performance[1] than LRU (least recently used) developed[2] at the IBM Almaden Research Center. This is accomplished by keeping track of both frequently used and recently used pages plus a recent eviction history for both. In 2006, IBM was granted a patent for the adaptive replacement cache policy.", 
    "name": "Adaptive Replacement Cache", 
    "classification": "Memory Management Algorithms", 
    "full_text": "Adaptive Replacement Cache (ARC) is a page replacement algorithm with better performance[1] than LRU (least recently used) developed[2] at the IBM Almaden Research Center. This is accomplished by keeping track of both frequently used and recently used pages plus a recent eviction history for both. In 2006, IBM was granted a patent for the adaptive replacement cache policy.\n\n\nBasic LRU maintains an ordered list (the cache directory) of resource entries in the cache, with the sort order based on the time of most recent access. New entries are added at the top of the list, after the bottom entry has been evicted. Cache hits move to the top, pushing all other entries down.\nARC improves the basic LRU strategy by splitting the cache directory into two lists, T1 and T2, for recently and frequently referenced entries. In turn, each of these is extended with a ghost list (B1 or B2), which is attached to the bottom of the two lists. These ghost lists act as scorecards by keeping track of the history of recently evicted cache entries, and the algorithm uses ghost hits to adapt to recent change in resource usage. Note that the ghost lists only contain metadata (keys for the entries) and not the resource data itself, i.e. as an entry is evicted into a ghost list its data is discarded. The combined cache directory is organised in four LRU lists:\nT1 and B1 together are referred to as L1, a combined history of recent single references. Similarly, L2 is the combination of T2 and B2.\nThe whole cache directory can be visualised in a single line:\nThe inner [ ] brackets indicate actual cache, which although fixed in size, can move freely across the B1 and B2 history.\nL1 is now displayed from right to left, starting at the top, indicated by the ! marker. ^ indicates the target size for T1, and may be equal to, smaller than, or larger than the actual size (as indicated by !).\nEntries (re-)entering the cache (T1,T2) will cause ! to move towards the target marker ^. If no free space exists in the cache, this marker also determines whether either T1 or T2 will evict an entry.\nARC is currently deployed in IBM's DS6000/DS8000 storage controllers.\nSun Microsystems's scalable file system ZFS uses a variant[3] of ARC as an alternative to the traditional Solaris filesystem page cache in virtual memory. It has been modified to allow for locked pages that are currently in use and cannot be vacated.\nPostgreSQL used ARC in its buffer manager for a brief time (version 8.0.0), but quickly replaced it with another algorithm, citing concerns over an IBM patent on ARC.[4]", 
    "dbpedia_url": "http://dbpedia.org/resource/Adaptive_replacement_cache", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Adaptive_replacement_cache\n"
}