{
    "about": "Constructing skill trees (CST) is a hierarchical reinforcement learning algorithm which can build skill trees from a set of sample solution trajectories obtained from demonstration. CST uses an incremental MAP(maximum a posteriori ) change point detection algorithm to segment each demonstration trajectory into skills and integrate the results into a skill tree. CST was introduced by George Konidaris, Scott Kuindersma, Andrew Barto and Roderic Grupen in 2010.", 
    "name": "Constructing Skill Trees", 
    "classification": "Machine Learning Algorithms", 
    "full_text": "Constructing skill trees (CST) is a hierarchical reinforcement learning algorithm which can build skill trees from a set of sample solution trajectories obtained from demonstration. CST uses an incremental MAP(maximum a posteriori ) change point detection algorithm to segment each demonstration trajectory into skills and integrate the results into a skill tree. CST was introduced by George Konidaris, Scott Kuindersma, Andrew Barto and Roderic Grupen in 2010.\n\n\nCST consists of mainly three parts;change point detection, alignment and merging. The main focus of CST is online change-point detection. The change-point detection algorithm is used to segment data into skills and uses the sum of discounted reward \n\n\n\n\nR\n\nt\n\n\n\n\n\n\n{\\displaystyle R_{t}^{}}\n\n as the target regression variable. Each skill is assigned an appropriate abstraction. A particle filter is used to control the computational complexity of CST.\nThe change point detection algorithm is implemented as follows. The data for times \n\n\n\nt\n\u2208\nT\n\n\n{\\displaystyle t\\in T}\n\n and models Q with prior \n\n\n\np\n(\nq\n\u2208\nQ\n)\n\n\n{\\displaystyle p(q\\in Q)}\n\n are given. The algorithm is assumed to be able to fit a segment from time \n\n\n\nj\n+\n1\n\n\n{\\displaystyle j+1}\n\n to \n\n\n\nt\n\n\n{\\displaystyle t}\n\n using model \n\n\n\nq\n\n\n{\\displaystyle q}\n\n with the fit probability \n\n\n\nP\n(\nj\n,\nt\n,\nq\n\n)\n\n\n\n\n\n\n\n{\\displaystyle P(j,t,q)_{}^{}}\n\n. A linear regression model with Gaussian noise is used to compute \n\n\n\nP\n(\nj\n,\nt\n,\nq\n\n)\n\n\n\n\n\n\n\n{\\displaystyle P(j,t,q)_{}^{}}\n\n. The Gaussian noise prior has mean zero, and variance which follows \n\n\n\nI\nn\nv\ne\nr\ns\ne\nG\na\nm\nm\na\n(\n\n\nv\n2\n\n\n,\n\n\nu\n2\n\n\n)\n\n\n{\\displaystyle InverseGamma({\\frac {v}{2}},{\\frac {u}{2}})}\n\n. The prior for each weight follows \n\n\n\nN\no\nr\nm\na\n\nl\n\n\n\n\n\n(\n0\n,\n\n\u03c3\n\n2\n\n\n\u03b4\n)\n\n\n{\\displaystyle Normal_{}^{}(0,\\sigma ^{2}\\delta )}\n\n.\nThe fit probability \n\n\n\nP\n(\nj\n,\nt\n,\nq\n\n)\n\n\n\n\n\n\n\n{\\displaystyle P(j,t,q)_{}^{}}\n\n is computed by the following equation.\n\n\n\n\nP\n(\nj\n,\nt\n,\nq\n)\n=\n\n\n\n\u03c0\n\n\u2212\n\n\nn\n2\n\n\n\n\n\n\u03b4\n\nm\n\n\n\n\n\n\n|\n(\nA\n+\nD\n\n)\n\n\u2212\n1\n\n\n|\n\n\n\n1\n2\n\n\n\n\n\n\nu\n\n\nv\n2\n\n\n\n\n(\ny\n+\nu\n\n)\n\n\n\nu\n+\nv\n\n2\n\n\n\n\n\n\n\n\n\n\u0393\n(\n\n\n\nn\n+\nv\n\n2\n\n\n)\n\n\n\u0393\n(\n\n\nv\n2\n\n\n)\n\n\n\n\n\n{\\displaystyle P(j,t,q)={\\frac {\\pi ^{-{\\frac {n}{2}}}}{\\delta ^{m}}}\\left|(A+D)^{-1}\\right|^{\\frac {1}{2}}{\\frac {u^{\\frac {v}{2}}}{(y+u)^{\\frac {u+v}{2}}}}{\\frac {\\Gamma ({\\frac {n+v}{2}})}{\\Gamma ({\\frac {v}{2}})}}}\n\n\nThen, CST compute the probability of the changepoint at time j with model q, \n\n\n\n\nP\n\nt\n\n\n\n\n(\nj\n,\nq\n)\n\n\n{\\displaystyle P_{t}^{}(j,q)}\n\n and \n\n\n\n\nP\n\nj\n\n\nM\nA\nP\n\n\n\n\n{\\displaystyle P_{j}^{MAP}}\n\n using a Viterbi algorithm.\n\n\n\n\n\nP\n\nt\n\n\n(\nj\n,\nq\n)\n=\n(\n1\n\u2212\nG\n(\nt\n\u2212\nj\n\u2212\n1\n)\n)\nP\n(\nj\n,\nt\n,\nq\n)\np\n(\nq\n)\n\nP\n\nj\n\n\nM\nA\nP\n\n\n\n\n{\\displaystyle P_{t}(j,q)=(1-G(t-j-1))P(j,t,q)p(q)P_{j}^{MAP}}\n\n\n\n\n\n\n\nP\n\nj\n\n\nM\nA\nP\n\n\n=\n\nmax\n\ni\n,\nq\n\n\n\n\n\n\nP\n\nj\n\n\n(\ni\n,\nq\n)\ng\n(\nj\n\u2212\ni\n)\n\n\n1\n\u2212\nG\n(\nj\n\u2212\ni\n\u2212\n1\n)\n\n\n\n,\n\u2200\nj\n<\nt\n\n\n{\\displaystyle P_{j}^{MAP}=\\max _{i,q}{\\frac {P_{j}(i,q)g(j-i)}{1-G(j-i-1)}},\\forall j<t}\n\n\nThe descriptions of the parameters and variables are as follows;\n\n\n\n\nA\n=\n\n\u2211\n\ni\n=\nj\n\n\nt\n\n\n\u03a6\n(\n\nx\n\ni\n\n\n)\n\u03a6\n(\n\nx\n\ni\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle A=\\sum _{i=j}^{t}\\Phi (x_{i})\\Phi (x_{i})^{T}}\n\n\n\n\n\n\n\u03a6\n(\n\nx\n\ni\n\n\n\n)\n\n\n\n\n\n\n\n{\\displaystyle \\Phi (x_{i})_{}^{}}\n\n: a vector of m basis functions evaluated at state \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n\n\n\n\n\ny\n=\n(\n\n\u2211\n\ni\n=\nj\n\n\nt\n\n\n\nR\n\ni\n\n\n2\n\n\n)\n\u2212\n\nb\n\nT\n\n\n(\nA\n+\nD\n\n)\n\n\u2212\n1\n\n\nb\n\n\n{\\displaystyle y=(\\sum _{i=j}^{t}R_{i}^{2})-b^{T}(A+D)^{-1}b}\n\n\n\n\n\n\nb\n=\n\n\u2211\n\ni\n=\nj\n\n\nt\n\n\n\nR\n\ni\n\n\n\u03a6\n(\n\nx\n\ni\n\n\n)\n\n\n{\\displaystyle b=\\sum _{i=j}^{t}R_{i}\\Phi (x_{i})}\n\n\n\n\n\n\n\nR\n\ni\n\n\n=\n\n\u2211\n\nj\n=\ni\n\n\nT\n\n\n\n\u03b3\n\nj\n\u2212\ni\n\n\n\nr\n\nj\n\n\n\n\n{\\displaystyle R_{i}=\\sum _{j=i}^{T}\\gamma ^{j-i}r_{j}}\n\n\n\n\n\n\n\n\u0393\n\n\n\n\n\n\n\n{\\displaystyle \\Gamma _{}^{}}\n\n: Gamma function\n\n\n\n\n\nn\n\n\n\n\n\n=\nt\n\u2212\nj\n\n\n{\\displaystyle n_{}^{}=t-j}\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n{\\displaystyle m_{}^{}}\n\n: The number of basis functions q has.\n\n\n\n\n\nD\n\n\n\n\n\n\n\n{\\displaystyle D_{}^{}}\n\n: an m by m matrix with \n\n\n\n\n\u03b4\n\n\u2212\n1\n\n\n\n\n{\\displaystyle \\delta ^{-1}}\n\n on the diagonal and zeros else where\nThe skill length \n\n\n\nl\n\n\n{\\displaystyle l}\n\n is assumed to follow a Geometric distribution with parameter p\n\n\n\n\n\ng\n\n\n\n\n\n(\nl\n)\n=\n(\n1\n\u2212\np\n\n)\n\nl\n\u2212\n1\n\n\np\n\n\n{\\displaystyle g_{}^{}(l)=(1-p)^{l-1}p}\n\n\n\n\n\n\n\nG\n\n\n\n\n\n(\nl\n)\n=\n(\n1\n\u2212\n(\n1\n\u2212\np\n\n)\n\nl\n\n\n)\n\n\n{\\displaystyle G_{}^{}(l)=(1-(1-p)^{l})}\n\n\n\n\n\n\n\np\n\n\n\n\n\n=\n\n\n1\nk\n\n\n\n\n{\\displaystyle p_{}^{}={\\frac {1}{k}}}\n\n\n\n\n\n\n\nk\n\n\n\n\n\n:\n\n\n{\\displaystyle k_{}^{}:}\n\nExpected skill length\nUsing the method above, CST can segment data into a skill chain. The time complexity of the change point detection is \n\n\n\nO\n(\nN\nL\n)\n\n\n{\\displaystyle O(NL)}\n\n and storage size is \n\n\n\nO\n(\nN\nc\n)\n\n\n{\\displaystyle O(Nc)}\n\n, where \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is the number of particles, \n\n\n\nL\n\n\n{\\displaystyle L}\n\n is the time of computing \n\n\n\nP\n(\nj\n,\nt\n,\nq\n)\n\n\n{\\displaystyle P(j,t,q)}\n\n, and there are \n\n\n\nO\n(\nc\n)\n\n\n{\\displaystyle O(c)}\n\n change points.\nNext step is alignment. CST needs to align the component skills because the change-point does not occur in the exactly same places. Thus, when segmenting second trajectory after segmenting the first trajectory, it has a bias on the location of change point in the second trajectory. This bias follows a mixture of gaussians.\nThe last step is merging. CST merges skill chains into a skill tree. CST merges a pair of trajectory segments by allocating the same skill. All trajectories have the same goal and it merges two chains by starting at their final segments. If two segments are statistically similar, it merges them. This procedure is repeated until it fails to merge a pair of skill segments. \n\n\n\nP\n(\nj\n,\nt\n,\nq\n)\n\n\n{\\displaystyle P(j,t,q)}\n\n are used to determine whether a pair of trajectories are modeled better as one skill or as two different skills.\nThe following pseudocode describes the change point detection algorithm:\nCTS assume that the demonstrated skills form a tree, the domain reward function is known and the best model for merging a pair of skills is the model selected for representing both individually.\nCTS is much faster learning algorithm than skill chaining. CTS can be applied to learning higher dimensional policies. Even unsuccessful episode can improve skills. Skills acquired using agent-centric features can be used for other problems.\nCST has been used to acquire skills from human demonstration in the PinBall domain. It has been also used to acquire skills from human demonstration on a mobile manipulator.", 
    "dbpedia_url": "http://dbpedia.org/resource/Constructing_skill_trees", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Constructing_skill_trees\n"
}