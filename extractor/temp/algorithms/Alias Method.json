{
    "about": "In computing, the alias method is a family of efficient algorithms for sampling from a discrete probability distribution, due to A. J. Walker.[1][2] That is, it returns integer values 1 \u2264 i \u2264 n according to some arbitrary probability distribution pi. The algorithms typically use O(n log n) or O(n) preprocessing time, after which random values can be drawn from the distribution in O(1) time.[3]", 
    "name": "Alias Method", 
    "classification": "Pseudorandom Number Generators", 
    "full_text": "In computing, the alias method is a family of efficient algorithms for sampling from a discrete probability distribution, due to A. J. Walker.[1][2] That is, it returns integer values 1 \u2264 i \u2264 n according to some arbitrary probability distribution pi. The algorithms typically use O(n log n) or O(n) preprocessing time, after which random values can be drawn from the distribution in O(1) time.[3]\n\n\nInternally, the algorithm consults two tables, a probability table Ui and an alias table Ki (for 1 \u2264 i \u2264 n). To generate a random outcome, a fair die is rolled to determine an index into the two tables. Based on the probability stored at that index, a biased coin is then flipped, and the outcome of the flip is used to choose between a result of i and Ki.[4]\nMore concretely, the algorithm operates as follows:\nAn alternative formulation of the probability table, proposed by Marsaglia et. al.[5] as the \u201csquare histogram\u201d method, uses the condition x < Vi in the third step (where Vi = (Ui + i \u2212 1)/n) instead of computing y.\nThe distribution may be padded with additional probabilities pi = 0 to increase n to a convenient value, such as a power of two.\nTo generate the table, first initialize Ui = npi. While doing this, divide the table entries into three categories:\nIf Ui = 1, the corresponding value Ki will never be consulted and is unimportant, but a value of Ki = i is sensible.\nAs long as not all table entries are exactly full, repeat the following steps:\nEach iteration moves at least one entry to the \u201cexactly full\u201d category (and the last moves two), so the procedure is guaranteed to terminate after at most n\u22121 iterations. Each iteration can be done in O(1) time, so the table can be set up in O(n) time.\nVose[3]:974 points out that floating-point rounding errors may cause the guarantee referred to in step 1 to be violated. If one category empties before the other, the remaining entries may have Ui set to 1 with negligible error.\nAs the lookup procedure is slightly faster if y < Ui (because Ki does not need to be consulted), one goal during table generation is to maximize the sum of the Ui. Doing this optimally turns out to be NP hard,[5]:6 but a \u201cRobin Hood\u201d heuristic comes reasonably close: rob from the richest and give to the poorest. That is, at each step choose the largest Ui and the smallest Uj. Because this requires sorting the Ui, it requires O(n log n) time.\nAlthough the alias method is very efficient if generating a uniform deviate is itself fast, there are cases where it is far from optimal in terms of random bit usage. This is because it uses a full-precision random variate x each time, even when only a few random bits are needed.\nOne case arises when the probabilities are particularly well balanced, so many Ui = 1 and Ki is not needed. Generating y is a waste of time. For example if p1 = p2 = \u200a1\u20442, then a 32-bit random variate x could be used to make 32 choices, but the alias method will only generate one.\nAnother case arises when the probabilities are strongly unbalanced, so many Ui \u2248 0. For example if p1 = 0.999 and p2 = 0.001, then the great majority of the time, only a few random bits are required to determine that case 1 applies.\nIn such cases, the table method described by Marsaglia et al.[5]:1\u20134 is more efficient.\nKnuth, Art of Computer Programming, Vol 2: Seminumerical Algorithms: Sect. 3.4.1.", 
    "dbpedia_url": "http://dbpedia.org/resource/Alias_method", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Alias_method\n"
}