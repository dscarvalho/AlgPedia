{
    "about": "A cryptographically secure pseudo-random number generator (CSPRNG) or cryptographic pseudo-random number generator (CPRNG)[1] is a pseudo-random number generator (PRNG) with properties that make it suitable for use in cryptography.", 
    "name": "Cryptographically Secure Pseudorandom Number Generator", 
    "classification": "Cryptographic Algorithms", 
    "full_text": "A cryptographically secure pseudo-random number generator (CSPRNG) or cryptographic pseudo-random number generator (CPRNG)[1] is a pseudo-random number generator (PRNG) with properties that make it suitable for use in cryptography.\nMany aspects of cryptography require random numbers, for example:\nThe \"quality\" of the randomness required for these applications varies. For example, creating a nonce in some protocols needs only uniqueness. On the other hand, generation of a master key requires a higher quality, such as more entropy. And in the case of one-time pads, the information-theoretic guarantee of perfect secrecy only holds if the key material comes from a true random source with high entropy.\nIdeally, the generation of random numbers in CSPRNGs uses entropy obtained from a high-quality source, generally the operating system's randomness API. However, unexpected correlations have been found in several such ostensibly independent processes. From an information-theoretic point of view, the amount of randomness, the entropy that can be generated, is equal to the entropy provided by the system. But sometimes, in practical situations, more random numbers are needed than there is entropy available. Also the processes to extract randomness from a running system are slow in actual practice. In such instances, a CSPRNG can sometimes be used. A CSPRNG can \"stretch\" the available entropy over more bits.\n\n\nThe requirements of an ordinary PRNG are also satisfied by a cryptographically secure PRNG, but the reverse is not true. CSPRNG requirements fall into two groups: first, that they pass statistical randomness tests; and secondly, that they hold up well under serious attack, even when part of their initial or running state becomes available to an attacker.[citation needed]\nMost PRNGs are not suitable for use as CSPRNGs and will fail on both counts. First, while most PRNGs outputs appear random to assorted statistical tests, they do not resist determined reverse engineering. Specialized statistical tests may be found specially tuned to such a PRNG that shows the random numbers not to be truly random. Second, for most PRNGs, when their state has been revealed, all past random numbers can be retrodicted, allowing an attacker to read all past messages, as well as future ones.\nCSPRNGs are designed explicitly to resist this type of cryptanalysis.\nIn the asymptotic setting, a family of deterministic polynomial time computable functions \n\n\n\n\nG\n\nk\n\n\n:\n{\n0\n,\n1\n\n}\n\nk\n\n\n\u2192\n{\n0\n,\n1\n\n}\n\np\n(\nk\n)\n\n\n\n\n{\\displaystyle G_{k}\\colon \\{0,1\\}^{k}\\to \\{0,1\\}^{p(k)}}\n\n for some polynomial \n\n\n\np\n\n\n{\\displaystyle p}\n\n, is a pseudorandom number generator (PRG), if it stretches the length of its input (\n\n\n\np\n(\nk\n)\n>\nk\n\n\n{\\displaystyle p(k)>k}\n\n for any \n\n\n\nk\n\n\n{\\displaystyle k}\n\n), and if its output is computationally indistinguishable from true randomess, i.e. for any probabilistic polynomial time algorithm \n\n\n\nA\n\n\n{\\displaystyle A}\n\n, which outputs 1 or 0 as a distinguisher,\nfor some negligible function \n\n\n\n\u03bc\n\n\n{\\displaystyle \\mu }\n\n.[3] (The notation \n\n\n\nx\n\u2190\nX\n\n\n{\\displaystyle x\\gets X}\n\n means that \n\n\n\nx\n\n\n{\\displaystyle x}\n\n is chosen uniformly at random from the set \n\n\n\nX\n\n\n{\\displaystyle X}\n\n.)\nThere is an equivalent characterization: For any function family \n\n\n\n\nG\n\nk\n\n\n:\n{\n0\n,\n1\n\n}\n\nk\n\n\n\u2192\n{\n0\n,\n1\n\n}\n\np\n(\nk\n)\n\n\n\n\n{\\displaystyle G_{k}\\colon \\{0,1\\}^{k}\\to \\{0,1\\}^{p(k)}}\n\n, \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is a PRG if and only if the next output bit of \n\n\n\nG\n\n\n{\\displaystyle G}\n\n cannot be predicted by a polynomial time algorithm.[4]\nA forward-secure PRG with block length \n\n\n\nt\n(\nk\n)\n\n\n{\\displaystyle t(k)}\n\n is a PRG \n\n\n\n\nG\n\nk\n\n\n:\n{\n0\n,\n1\n\n}\n\nk\n\n\n\u2192\n{\n0\n,\n1\n\n}\n\nk\n\n\n\u00d7\n{\n0\n,\n1\n\n}\n\nt\n(\nk\n)\n\n\n\n\n{\\displaystyle G_{k}\\colon \\{0,1\\}^{k}\\to \\{0,1\\}^{k}\\times \\{0,1\\}^{t(k)}}\n\n, where the input string \n\n\n\n\ns\n\ni\n\n\n\n\n{\\displaystyle s_{i}}\n\n with length \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is the current state at period \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, and the output (\n\n\n\n\ns\n\ni\n+\n1\n\n\n\n\n{\\displaystyle s_{i+1}}\n\n, \n\n\n\n\ny\n\ni\n\n\n\n\n{\\displaystyle y_{i}}\n\n) consists of the next state \n\n\n\n\ns\n\ni\n+\n1\n\n\n\n\n{\\displaystyle s_{i+1}}\n\n and the pseudorandom output block \n\n\n\n\ny\n\ni\n\n\n\n\n{\\displaystyle y_{i}}\n\n of period \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, such that it withstands state compromise extensions in the following sense. If the initial state \n\n\n\n\ns\n\n1\n\n\n\n\n{\\displaystyle s_{1}}\n\n is chosen uniformly at random from \n\n\n\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle \\{0,1\\}^{k}}\n\n, then for any \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, the sequence \n\n\n\n(\n\ny\n\n1\n\n\n,\n\ny\n\n2\n\n\n,\n\u2026\n,\n\ny\n\ni\n\n\n,\n\ns\n\ni\n+\n1\n\n\n)\n\n\n{\\displaystyle (y_{1},y_{2},\\dots ,y_{i},s_{i+1})}\n\n must be computationally indistinguishable from \n\n\n\n(\n\nr\n\n1\n\n\n,\n\nr\n\n2\n\n\n,\n\u2026\n,\n\nr\n\ni\n\n\n,\n\ns\n\ni\n+\n1\n\n\n)\n\n\n{\\displaystyle (r_{1},r_{2},\\dots ,r_{i},s_{i+1})}\n\n, in which the \n\n\n\n\nr\n\ni\n\n\n\n\n{\\displaystyle r_{i}}\n\n are chosen uniformly at random from \n\n\n\n{\n0\n,\n1\n\n}\n\nt\n(\nk\n)\n\n\n\n\n{\\displaystyle \\{0,1\\}^{t(k)}}\n\n.[5]\nAny PRG \n\n\n\nG\n:\n{\n0\n,\n1\n\n}\n\nk\n\n\n\u2192\n{\n0\n,\n1\n\n}\n\np\n(\nk\n)\n\n\n\n\n{\\displaystyle G\\colon \\{0,1\\}^{k}\\to \\{0,1\\}^{p(k)}}\n\n can be turned into a forward secure PRG with block length \n\n\n\np\n(\nk\n)\n\u2212\nk\n\n\n{\\displaystyle p(k)-k}\n\n by splitting its output into the next state and the actual output. This is done by setting \n\n\n\nG\n(\ns\n)\n=\n\nG\n\n0\n\n\n(\ns\n)\n\u2225\n\nG\n\n1\n\n\n(\ns\n)\n\n\n{\\displaystyle G(s)=G_{0}(s)\\Vert G_{1}(s)}\n\n, in which \n\n\n\n\n|\n\n\nG\n\n0\n\n\n(\ns\n)\n\n|\n\n=\n\n|\n\ns\n\n|\n\n=\nk\n\n\n{\\displaystyle |G_{0}(s)|=|s|=k}\n\n and \n\n\n\n\n|\n\n\nG\n\n1\n\n\n(\ns\n)\n\n|\n\n=\np\n(\nk\n)\n\u2212\nk\n\n\n{\\displaystyle |G_{1}(s)|=p(k)-k}\n\n; then \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is a forward secure PRG with \n\n\n\n\nG\n\n0\n\n\n\n\n{\\displaystyle G_{0}}\n\n as the next state and \n\n\n\n\nG\n\n1\n\n\n\n\n{\\displaystyle G_{1}}\n\n as the pseudorandom output block of the current period.\nSantha and Vazirani proved that several bit streams with weak randomness can be combined to produce a higher-quality quasi-random bit stream.[6] Even earlier, John von Neumann proved that a simple algorithm can remove a considerable amount of the bias in any bit stream[7] which should be applied to each bit stream before using any variation of the Santha-Vazirani design.\nIn the discussion below, CSPRNG designs are divided into three classes:\nThe last often introduce additional entropy when available and, strictly speaking, are not \"pure\" pseudorandom number generators, as their output is not completely determined by their initial state. This addition can prevent attacks even if the initial state is compromised.\nThere are a number of practical PRNGs that have been designed to be cryptographically secure, including\nSeveral CSPRNGs have been standardized. For example,\nA good reference is maintained by NIST.\nThere are also standards for statistical testing of new CSPRNG designs:\nThe Guardian and The New York Times have reported that the National Security Agency (NSA) inserted a PRNG into NIST SP 800-90A that had a backdoor which allows the NSA to readily decrypt material that was encrypted with the aid of Dual_EC_DRBG. Both papers report[18][19] that, as independent security experts long suspected,[20] the NSA has been introducing weaknesses into CSPRNG standard 800-90; this being confirmed for the first time by one of the top secret documents leaked to the Guardian by Edward Snowden. The NSA worked covertly to get its own version of the NIST draft security standard approved for worldwide use in 2006. The leaked document states that \"eventually, NSA became the sole editor.\" In spite of the known potential for a kleptographic backdoor and other known significant deficiencies with Dual_EC_DRBG, several companies such as RSA Security continued using Dual_EC_DRBG until the backdoor was confirmed in 2013.[21] RSA Security received a $10 million payment from the NSA to do so.[22]", 
    "dbpedia_url": "http://dbpedia.org/resource/Cryptographically_secure_pseudorandom_number_generator", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator\n"
}