{
    "about": "In computer science, cycle detection or cycle finding is the algorithmic problem of finding a cycle in a sequence of iterated function values.", 
    "name": "Cycle Detection", 
    "classification": "Combinatorial Algorithms", 
    "full_text": "In computer science, cycle detection or cycle finding is the algorithmic problem of finding a cycle in a sequence of iterated function values.\nFor any function f that maps a finite set S to itself, and any initial value x0 in S, the sequence of iterated function values\nmust eventually use the same value twice: there must be some pair of distinct indices i and j such that xi = xj. Once this happens, the sequence must continue periodically, by repeating the same sequence of values from xi to xj \u2212 1. Cycle detection is the problem of finding i and j, given f and x0.\nSeveral algorithms for finding cycles quickly and with little memory are known. Floyd's tortoise and the hare algorithm moves two pointers at different speeds through the sequence of values until they both point to equal values. Alternatively, Brent's algorithm is based on the idea of exponential search. Both Floyd's and Brent's algorithms use only a constant number of memory cells, and take a number of function evaluations that is proportional to the distance from the start of the sequence to the first repetition. Several other algorithms trade off larger amounts of memory for fewer function evaluations.\nThe applications of cycle detection include testing the quality of pseudorandom number generators and cryptographic hash functions, computational number theory algorithms, detection of infinite loops in computer programs and periodic configurations in cellular automata, and the automated shape analysis of linked list data structures.\n\n\nThe figure shows a function f that maps the set S = {0,1,2,3,4,5,6,7,8} to itself. If one starts from x0 = 2 and repeatedly applies f, one sees the sequence of values\nThe cycle in this value sequence is 6, 3, 1.\nLet S be any finite set, f be any function from S to itself, and x0 be any element of S. For any i > 0, let xi = f(xi \u2212 1). Let \u03bc be the smallest index such that the value x\u03bc reappears infinitely often within the sequence of values xi, and let \u03bb (the loop length) be the smallest positive integer such that x\u03bc = x\u03bb + \u03bc. The cycle detection problem is the task of finding \u03bb and\u00a0\u03bc.[1]\nOne can view the same problem graph-theoretically, by constructing a functional graph (that is, a directed graph in which each vertex has a single outgoing edge) the vertices of which are the elements of S and the edges of which map an element to the corresponding function value, as shown in the figure. The set of vertices reachable from starting vertex x0 form a subgraph with a shape resembling the Greek letter rho (\u03c1): a path of length \u03bc from x0 to a cycle of \u03bb vertices.[2]\nGenerally, f will not be specified as a table of values, the way it is shown in the figure above. Rather, a cycle detection algorithm may be given access either to the sequence of values xi, or to a subroutine for calculating f. The task is to find \u03bb and \u03bc while examining as few values from the sequence or performing as few subroutine calls as possible. Typically, also, the space complexity of an algorithm for the cycle detection problem is of importance: we wish to solve the problem while using an amount of memory significantly smaller than it would take to store the entire sequence.\nIn some applications, and in particular in Pollard's rho algorithm for integer factorization, the algorithm has much more limited access to S and to f. In Pollard's rho algorithm, for instance, S is the set of integers modulo an unknown prime factor of the number to be factorized, so even the size of S is unknown to the algorithm. To allow cycle detection algorithms to be used with such limited knowledge, they may be designed based on the following capabilities. Initially, the algorithm is assumed to have in its memory an object representing a pointer to the starting value x0. At any step, it may perform one of three actions: it may copy any pointer it has to another object in memory, it may apply f and replace any of its pointers by a pointer to the next object in the sequence, or it may apply a subroutine for determining whether two of its pointers represent equal values in the sequence. The equality test action may involve some nontrivial computation: for instance, in Pollard's rho algorithm, it is implemented by testing whether the difference between two stored values has a nontrivial greatest common divisor with the number to be factored.[2] In this context, by analogy to the pointer machine model of computation, an algorithm that only uses pointer copying, advancement within the sequence, and equality tests may be called a pointer algorithm.\nIf the input is given as a subroutine for calculating f, the cycle detection problem may be trivially solved using only \u03bb + \u03bc function applications, simply by computing the sequence of values xi and using a data structure such as a hash table to store these values and test whether each subsequent value has already been stored. However, the space complexity of this algorithm is proportional to \u03bb + \u03bc, unnecessarily large. Additionally, to implement this method as a pointer algorithm would require applying the equality test to each pair of values, resulting in quadratic time overall. Thus, research in this area has concentrated on two goals: using less space than this naive algorithm, and finding pointer algorithms that use fewer equality tests.\nFloyd's cycle-finding algorithm is a pointer algorithm that uses only two pointers, which move through the sequence at different speeds. It is also called the \"tortoise and the hare algorithm\", alluding to Aesop's fable of The Tortoise and the Hare.\nThe algorithm is named after Robert W. Floyd, who was credited with its invention by Donald Knuth.[3][4] However, the algorithm does not appear in Floyd's published work, and this may be a misattribution: Floyd describes algorithms for listing all simple cycles in a directed graph in a 1967 paper,[5] but this paper does not describe the cycle-finding problem in functional graphs that is the subject of this article. In fact, Knuth's statement (in 1969), attributing it to Floyd, without citation, is the first known appearance in print, and it thus may be a folk theorem, not attributable to a single individual.[6]\nThe key insight in the algorithm is that, for any integers i \u2265 \u03bc and k \u2265 0, xi = xi + k\u03bb, where \u03bb is the length of the loop to be found and \u03bc is the index of the first element of the cycle. In particular, i = k\u03bb \u2265 \u03bc, if and only if xi = x2i. Thus, the algorithm only needs to check for repeated values of this special form, one twice as far from the start of the sequence as the other, to find a period \u03bd of a repetition that is a multiple of \u03bb. Once \u03bd is found, the algorithm retraces the sequence from its start to find the first repeated value x\u03bc in the sequence, using the fact that \u03bb divides \u03bd and therefore that x\u03bc = x\u03bc + v. Finally, once the value of \u03bc is known it is trivial to find the length \u03bb of the shortest repeating cycle, by searching for the first position \u03bc + \u03bb for which x\u03bc + \u03bb = x\u03bc.\nThe algorithm thus maintains two pointers into the given sequence, one (the tortoise) at xi, and the other (the hare) at x2i. At each step of the algorithm, it increases i by one, moving the tortoise one step forward and the hare two steps forward in the sequence, and then compares the sequence values at these two pointers. The smallest value of i > 0 for which the tortoise and hare point to equal values is the desired value \u03bd.\nThe following Python code shows how this idea may be implemented as an algorithm.\nThis code only accesses the sequence by storing and copying pointers, function evaluations, and equality tests; therefore, it qualifies as a pointer algorithm. The algorithm uses O(\u03bb + \u03bc) operations of these types, and O(1) storage space.[7]\nRichard P. Brent described an alternative cycle detection algorithm that, like the tortoise and hare algorithm, requires only two pointers into the sequence.[8] However, it is based on a different principle: searching for the smallest power of two 2i that is larger than both \u03bb and \u03bc. For i = 0, 1, 2, ..., the algorithm compares x2i\u22121 with each subsequent sequence value up to the next power of two, stopping when it finds a match. It has two advantages compared to the tortoise and hare algorithm: it finds the correct length \u03bb of the cycle directly, rather than needing to search for it in a subsequent stage, and its steps involve only one evaluation of f rather than three.[9]\nThe following Python code shows how this technique works in more detail.\nLike the tortoise and hare algorithm, this is a pointer algorithm that uses O(\u03bb + \u03bc) tests and function evaluations and O(1) storage space. It is not difficult to show that the number of function evaluations can never be higher than for Floyd's algorithm. Brent claims that, on average, his cycle finding algorithm runs around 36% more quickly than Floyd's and that it speeds up the Pollard rho algorithm by around 24%. He also performs an average case analysis for a randomized version of the algorithm in which the sequence of indices traced by the slower of the two pointers is not the powers of two themselves, but rather a randomized multiple of the powers of two. Although his main intended application was in integer factorization algorithms, Brent also discusses applications in testing pseudorandom number generators.[8]\nA number of authors have studied techniques for cycle detection that use more memory than Floyd's and Brent's methods, but detect cycles more quickly. In general these methods store several previously-computed sequence values, and test whether each new value equals one of the previously-computed values. In order to do so quickly, they typically use a hash table or similar data structure for storing the previously-computed values, and therefore are not pointer algorithms: in particular, they usually cannot be applied to Pollard's rho algorithm. Where these methods differ is in how they determine which values to store. Following Nivasch,[10] we survey these techniques briefly.\nAny cycle detection algorithm that stores at most M values from the input sequence must perform at least \n\n\n\n(\n\u03bb\n+\n\u03bc\n)\n(\n1\n+\n\n\n1\n\nM\n\u2212\n1\n\n\n\n)\n\n\n{\\displaystyle (\\lambda +\\mu )(1+{\\frac {1}{M-1}})}\n\n function evaluations.[16][17]\nCycle detection has been used in many applications.", 
    "dbpedia_url": "http://dbpedia.org/resource/Cycle_detection", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Cycle_detection\n"
}