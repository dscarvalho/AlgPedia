{
    "about": "In computer science, double pushout graph rewriting or (DPO graph rewriting) refers to a mathematical framework for graph rewriting. It was introduced as one of the first algebraic approaches to graph rewriting in the article \"Graph-grammars: An algebraic approach\" (1973).[1] It has since been generalized to allow rewriting structures which are not graphs, and to handle negative application conditions,[2] among other extensions.", 
    "name": "Double Pushout Graph Rewriting", 
    "classification": "Graph Algorithms", 
    "full_text": "In computer science, double pushout graph rewriting or (DPO graph rewriting) refers to a mathematical framework for graph rewriting. It was introduced as one of the first algebraic approaches to graph rewriting in the article \"Graph-grammars: An algebraic approach\" (1973).[1] It has since been generalized to allow rewriting structures which are not graphs, and to handle negative application conditions,[2] among other extensions.\n\n\nA DPO graph transformation system (or graph grammar) consists of a finite graph, which is the starting state, and a finite or countable set of labeled spans in the category of finite graphs and graph homomorphisms, which serve as derivation rules. The rule spans are generally taken to be composed of monomorphisms, but the details can vary.[3]\nRewriting is performed in two steps: deletion and addition.\nAfter a match from the left hand side to \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is fixed, nodes and edges that are not in the right hand side are deleted. The right hand side is then glued in.\nGluing graphs is in fact a pushout construction in the category of graphs, and the deletion is the same as finding a pushout complement, hence the name.\nDouble pushout graph rewriting allows the specification of graph transformations by specifying a pattern of fixed size and composition to be found and replaced, where part of the pattern can be preserved. The application of a rule is potentially non-deterministic: several distinct matches can be possible. These can be non-overlapping, or share only preserved items, thus showing a kind of concurrency known as parallel independence,[4] or they may be incompatible, in which case either the applications can sometimes be executed sequentially, or one can even preclude the other.\nIt can be used as a language for software design and programming (usually a variant working on richer structures than graphs is chosen). Termination for DPO graph rewriting is undecidable because the Post correspondence problem can be reduced to it.[5]\nDPO graph rewriting can be viewed as a generalization of Petri nets.[4]\nAxioms have been sought to describe categories in which DPO rewriting will work. One possibility is the notion of an adhesive category, which also enjoys many closure properties. Related notions are HLR systems, quasi-adhesive categories and \n\n\n\n\n\nM\n\n\n\n\n{\\displaystyle {\\mathcal {M}}}\n\n-adhesive categories, adhesive HLR categories.[6]\nThe concepts of adhesive category and HLR system are related (an adhesive category with coproducts is a HLR system[7]).\nHypergraph, typed graph and attributed graph rewriting,[8] for example, can be handled because they can be cast as adhesive HLR systems.", 
    "dbpedia_url": "http://dbpedia.org/resource/Double_pushout_graph_rewriting", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Double_pushout_graph_rewriting\n"
}