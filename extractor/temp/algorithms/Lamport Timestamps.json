{
    "about": "The algorithm of Lamport timestamps is a simple algorithm used to determine the order of events in a distributed computer system. As different nodes or processes will typically not be perfectly synchronized, this algorithm is used to provide a partial ordering of events with minimal overhead, and conceptually provide a starting point for the more advanced vector clock method. They are named after their creator, Leslie Lamport.", 
    "name": "Lamport Timestamps", 
    "classification": "Distributed Algorithms", 
    "full_text": "The algorithm of Lamport timestamps is a simple algorithm used to determine the order of events in a distributed computer system. As different nodes or processes will typically not be perfectly synchronized, this algorithm is used to provide a partial ordering of events with minimal overhead, and conceptually provide a starting point for the more advanced vector clock method. They are named after their creator, Leslie Lamport.\nDistributed algorithms such as resource synchronization often depend on some method of ordering events to function. For example, consider a system with two processes and a disk. The processes send messages to each other, and also send messages to the disk requesting access. The disk grants access in the order the messages were sent. For example process A sends a message to the disk requesting write access, and then sends a read instruction message to process B. Process B receives the message, and as a result sends its own read request message to the disk. If there is a timing delay causing the disk to receive both messages at the same time, it can determine which message happened-before the other: (\n\n\n\nA\n\n\n{\\displaystyle A}\n\n happens-before \n\n\n\nB\n\n\n{\\displaystyle B}\n\n if one can get from \n\n\n\nA\n\n\n{\\displaystyle A}\n\n to \n\n\n\nB\n\n\n{\\displaystyle B}\n\n by a sequence of moves of two types: moving forward while remaining in the same process, and following a message from its sending to its reception.) A logical clock algorithm provides a mechanism to determine facts about the order of such events.\nLamport invented a simple mechanism by which the happened-before ordering can be captured numerically. A Lamport logical clock is an incrementing software counter maintained in each process.\nConceptually, this logical clock can be thought of as a clock that only has meaning in relation to messages moving between processes. When a process receives a message, it resynchronizes its logical clock with that sender. The above mentioned vector clock is a generalization of the idea into the context of an arbitrary number of parallel, independent processes.\n\n\nThe algorithm follows some simple rules:\nIn a Pseudocode format, the algorithm for sending:\nThe algorithm for receiving a message:\nFor every two different events \n\n\n\na\n\n\n{\\displaystyle a}\n\n and \n\n\n\nb\n\n\n{\\displaystyle b}\n\n occurring in the same process, and \n\n\n\nC\n(\nx\n)\n\n\n{\\displaystyle C(x)}\n\n being the timestamp for a certain event \n\n\n\nx\n\n\n{\\displaystyle x}\n\n, it is necessary that \n\n\n\nC\n(\na\n)\n\n\n{\\displaystyle C(a)}\n\n never equals \n\n\n\nC\n(\nb\n)\n\n\n{\\displaystyle C(b)}\n\n.\nTherefore it is necessary that:\nA Lamport clock may be used to create a partial causal ordering of events between processes. Given a logical clock following these rules, the following relation is true: if \n\n\n\na\n\u2192\nb\n\n\n{\\displaystyle a\\rightarrow b}\n\n then \n\n\n\nC\n(\na\n)\n<\nC\n(\nb\n)\n\n\n{\\displaystyle C(a)<C(b)}\n\n, where \n\n\n\n\u2192\n\n\n\n{\\displaystyle \\rightarrow \\,}\n\n means happened-before.\nThis relation only goes one way, and is called clock consistency condition: if one event comes before another, then that event's logical clock comes before the other's. The strong clock consistency condition, which is two way (if \n\n\n\nC\n(\na\n)\n<\nC\n(\nb\n)\n\n\n{\\displaystyle C(a)<C(b)}\n\n then \n\n\n\na\n\u2192\nb\n\n\n{\\displaystyle a\\rightarrow b}\n\n), can be obtained by other techniques such as vector clocks. Using only a simple Lamport clock, only a partial causal ordering can be inferred from the clock.\nHowever, via the contrapositive, it's true that \n\n\n\nC\n(\na\n)\n\u226e\nC\n(\nb\n)\n\n\n{\\displaystyle C(a)\\nless C(b)}\n\n implies \n\n\n\na\n\u219b\nb\n\n\n{\\displaystyle a\\nrightarrow b}\n\n. So, for example, if \n\n\n\nC\n(\na\n)\n\u2265\nC\n(\nb\n)\n\n\n{\\displaystyle C(a)\\geq C(b)}\n\n then \n\n\n\na\n\n\n{\\displaystyle a}\n\n cannot have happened-before \n\n\n\nb\n\n\n{\\displaystyle b}\n\n.\nAnother way of putting this is that \n\n\n\nC\n(\na\n)\n<\nC\n(\nb\n)\n\n\n{\\displaystyle C(a)<C(b)}\n\n means that \n\n\n\na\n\n\n{\\displaystyle a}\n\n may have happened-before \n\n\n\nb\n\n\n{\\displaystyle b}\n\n, or be incomparable with \n\n\n\nb\n\n\n{\\displaystyle b}\n\n in the happened-before ordering, but \n\n\n\na\n\n\n{\\displaystyle a}\n\n did not happen after \n\n\n\nb\n\n\n{\\displaystyle b}\n\n.\nNevertheless, Lamport timestamps can be used to create a total ordering of events in a distributed system by using some arbitrary mechanism to break ties (e.g. the ID of the process). The caveat is that this ordering is artifactual and cannot be depended on to imply a causal relationship.", 
    "dbpedia_url": "http://dbpedia.org/resource/Lamport_timestamps", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Lamport_timestamps\n"
}