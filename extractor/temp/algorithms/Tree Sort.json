{
    "about": "O(n\u00b2) (unbalanced)", 
    "name": "Tree Sort", 
    "classification": "Sorting Algorithms", 
    "full_text": "O(n\u00b2) (unbalanced)\nA tree sort is a sort algorithm that builds a binary search tree from the elements to be sorted, and then traverses the tree (in-order) so that the elements come out in sorted order. Its typical use is sorting elements adaptively: after each insertion, the set of elements seen so far is available in sorted order.\n\n\nAdding one item to a binary search tree is on average an O(log n) process (in big O notation), so adding n items is an O(n log n) process, making tree sort a 'fast sort'. But adding an item to an unbalanced binary tree needs O(n) time in the worst-case, when the tree resembles a linked list (degenerate tree), causing a worst case of O(n\u00b2) for this sorting algorithm. This worst case occurs when the algorithm operates on an already sorted set, or one that is nearly sorted. Expected O(n log n) time can however be achieved in this case by shuffling the array.\nThe worst-case behaviour can be improved upon by using a self-balancing binary search tree. Using such a tree, the algorithm has an O(n log n) worst-case performance, thus being degree-optimal for a comparison sort. However, trees require memory to be allocated on the heap, which is a significant performance hit when compared to quicksort and heapsort. When using a splay tree as the binary search tree, the resulting algorithm (called splaysort) has the additional property that it is an adaptive sort, meaning that its running time is faster than O(n log n) for inputs that are nearly sorted.\nThe following tree sort algorithm in pseudocode accepts a collection of comparable items and outputs the items in ascending order:\n\nIn a simple functional programming form, the algorithm (in Haskell) would look something like this:\nIn the above implementation, both the insertion algorithm and the retrieval algorithm have O(n\u00b2) worst-case scenarios.", 
    "dbpedia_url": "http://dbpedia.org/resource/Tree_sort", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Tree_sort\n"
}