{
    "about": "Similar to 1-D Digital signal processing in case of the Multidimensional signal processing[1] we have Efficient algorithms. The efficiency of an Algorithm can be evaluated by the amount of computational resources it takes to compute output or the quantity of interest. In this page, two of the very efficient algorithms for multidimensional signals are explained. For the sake of simplicity and description it is explained for 2-D Signals. However, same theory holds good for M-D signals. The exact computational savings for each algorithm is also mentioned.", 
    "name": "Fast Algorithms For Multidimensional Signals", 
    "classification": "Digital Signal Processing", 
    "full_text": "Similar to 1-D Digital signal processing in case of the Multidimensional signal processing[1] we have Efficient algorithms. The efficiency of an Algorithm can be evaluated by the amount of computational resources it takes to compute output or the quantity of interest. In this page, two of the very efficient algorithms for multidimensional signals are explained. For the sake of simplicity and description it is explained for 2-D Signals. However, same theory holds good for M-D signals. The exact computational savings for each algorithm is also mentioned.\n\n\nIn the case of digital systems, a mathematical expressions can be used to describe the input-output relationship and an algorithm can be used to implement this relationship. Similarly, algorithms can be developed to implement different transforms such as Digital filter, Fourier transform, Histogram, Image Enhancements and etc. Direct implementation [2] of these input-output relationships and transforms is not necessarily the most efficient way to implement those.\nWhen people began to compute such outputs from input through direct implementation, they began to look for more efficient ways. This wiki page aims at showcasing such efficient and fast algorithms for multidimensional signals and systems. A multidimensional (M-D) signal can be modeled as a function of M independent variables, where M is greater than or equal to 2. These signals may be categorized as continuous, discrete, or mixed. A continuous signal can be modeled as a function of independent variables which range over a continuum of values, example \u2013 an audio wave travelling in space, 3-D space waves measured at different times. A discrete signal, on the other hand, can be modeled as a function defined only on a set of points, such as the set of integers. An image is the simplest example of a 2-D discrete domain signal that is spatial in nature.\nIn the context of Fast Algorithms, let us consider the example below:\nWe need to compute A which is given by\nA = \u03b1\u03b3 + \u03b1\u03b4 + \u03b2\u03b3 + \u03b2\u03b4 where \u03b1,\u03b2,\u03b3 and \u03b4 are complex variables.\nTo compute A, we need 4 complex multiplications and 3 complex additions. The above equation can be written in its simplified form as\nA = (\u03b1 + \u03b2)(\u03b3 + \u03b4)\nThis form requires only 1 complex multiplication and 2 complex additions.\nThus the second way of computing A is much more efficient and fast compared to the first method of computing A. This is the motivation for the evolution of the fast algorithms in the digital signal processing Field. Consequently, many of the real-world applications make use of these efficient Algorithms for fast computations.\nThe simplest form of representing a Linear Shift Invariant system(LSI) is through its Impulse response. The output of such LSI discrete domain system is given by the convolution of its input signal and system\u2019s impulse response. This is mathematically represented as follows:\n\n\n\n\ny\n\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\n=\n\n\u2211\n\n\nl\n\n1\n\n\n=\n\u2212\n\u221e\n\n\n+\n\u221e\n\n\n\n\u2211\n\n\nl\n\n2\n\n\n=\n\u221e\n\n\n+\n\u221e\n\n\nx\n(\n\nl\n\n1\n\n\n,\n\nl\n\n2\n\n\n)\nh\n(\n\nn\n\n1\n\n\n\u2212\n\nl\n\n1\n\n\n,\n\nn\n\n2\n\n\n\u2212\n\nl\n\n2\n\n\n)\n\n\n{\\displaystyle y\\left(n_{1},n_{2}\\right)=\\sum _{l_{1}=-\\infty }^{+\\infty }\\sum _{l_{2}=\\infty }^{+\\infty }x(l_{1},l_{2})h(n_{1}-l_{1},n_{2}-l_{2})}\n\n\nwhere \n\n\n\nh\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\n\n{\\displaystyle h(n_{1},n_{2})}\n\n is the impulse response of the system.\n\nAccording to the equation above to obtain the Output value at a particular point ( say \n\n\n\ny\n(\n0\n,\n0\n)\n\n\n{\\displaystyle y(0,0)}\n\n) we need to multiply several values of the input \n\n\n\nx\n(\n\nl\n\n1\n\n\n,\n\nl\n\n2\n\n\n)\n\n\n{\\displaystyle x(l_{1},l_{2})}\n\n and Impulse Response \n\n\n\nh\n(\n\u2212\n\nl\n\n1\n\n\n,\n\u2212\n\nl\n\n2\n\n\n)\n\n\n{\\displaystyle h(-l_{1},-l_{2})}\n\n. Of course this is dependent on the Region of Support of the input as well as the impulse response. The key point here to be noted is that we need to perform so many complex multiplications and additions to obtain 1 output value.\nAssuming a 2-D input signal is of length \n\n\n\nM\n\u00d7\nM\n\n\n{\\displaystyle M\\times M}\n\n and the system's impulse response is of length \n\n\n\nN\n\u00d7\nN\n\n\n{\\displaystyle N\\times N}\n\n we need to perform \n\n\n\n\nM\n\n2\n\n\n\nN\n\n2\n\n\n\n\n{\\displaystyle M^{2}N^{2}}\n\n number of multiplications to obtain all output values. The output can be computed efficiently if one can exploit some characteristics of the system.\nWe encounter a similar scenario when we have to compute the discrete Fourier Transforms of a signal of interest.\nThe Direct Calculation of the 2-D DFT is simply the evaluation of the double Sum [3]\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\n\u2211\n\n\nn\n\n1\n\n\n=\n0\n\n\n\nN\n\n1\n\n\n\u2212\n1\n\n\n\n\u2211\n\n\nn\n\n2\n\n\n=\n0\n\n\n\nN\n\n2\n\n\n\u2212\n1\n\n\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\nW\n\n\nN\n\n1\n\n\n\n\n\nn\n\n1\n\n\n\nk\n\n1\n\n\n\n\n\nW\n\n\nN\n\n2\n\n\n\n\n\nn\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)=\\sum _{n_{1}=0}^{N_{1}-1}\\sum _{n_{2}=0}^{N_{2}-1}x(n_{1},n_{2})W_{N_{1}}^{n_{1}k_{1}}W_{N_{2}}^{n_{2}k_{2}}}\n\n \n\n\n\n\n\u00a0for\u00a0\n\n0\n\u2264\n\nk\n\n1\n\n\n\u2264\n\nN\n\n1\n\n\n\u2212\n1\n\n\u00a0and\u00a0\n\n0\n\u2264\n\nk\n\n2\n\n\n\u2264\n\nN\n\n2\n\n\n\u2212\n1\n\n\n{\\displaystyle {\\text{   for }}0\\leq k_{1}\\leq N_{1}-1{\\text{ and }}0\\leq k_{2}\\leq N_{2}-1}\n\n\n\n\n\n\n\n\u00a0where\u00a0\n\n\nW\n\nN\n\n\n\u2261\n\nexp\n\n\n(\n\u2212\nj\n\n\n\n2\n\u03c0\n\nN\n\n\n)\n\n\n\n{\\displaystyle {\\text{ where  }}W_{N}\\equiv {\\text{exp}}\\left(-j{\\frac {2\\pi }{N}}\\right)}\n\n\nThe total number of complex multiplications and complex additions needed to evaluate this 2-D DFT by direct calculation is \n\n\n\n\nN\n\n1\n\n\n2\n\n\n\nN\n\n2\n\n\n2\n\n\n\n\n{\\displaystyle N_{1}^{2}N_{2}^{2}}\n\n. This is a naive approach, however, we already know that an N-point 1-D DFT can be computed with far fewer than \n\n\n\n\nN\n\n2\n\n\n\n\n{\\displaystyle N^{2}}\n\n multiplications by using the Fast Fourier Transform (FFT) algorithm. As described in the next section we can develop Fast Fourier transforms for calculating 2-D or higher dimensional DFTs as well [3]\nThe DFT sum \n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)}\n\n in the previous equation can also be written in the following form\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\n\u2211\n\n\nn\n\n1\n\n\n=\n0\n\n\n\nN\n\n1\n\n\n\u2212\n1\n\n\n\n[\n\n\u2211\n\n\nn\n\n2\n\n\n=\n0\n\n\n\nN\n\n2\n\n\n\u2212\n1\n\n\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\nW\n\n\nN\n\n2\n\n\n\n\n\nn\n\n2\n\n\n\nk\n\n2\n\n\n\n\n]\n\n\nW\n\n\nN\n\n1\n\n\n\n\n\nn\n\n1\n\n\n\nk\n\n1\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)=\\sum _{n_{1}=0}^{N_{1}-1}\\left[\\sum _{n_{2}=0}^{N_{2}-1}x(n_{1},n_{2})W_{N_{2}}^{n_{2}k_{2}}\\right]W_{N_{1}}^{n_{1}k_{1}}}\n\n\nLet \n\n\n\nG\n\n(\n\nn\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n\n{\\displaystyle G\\left(n_{1},k_{2}\\right)}\n\n denote the quantity inside the brackets and is given by:\n\n\n\n\nG\n\n(\n\nn\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\n\u2211\n\n\nn\n\n2\n\n\n=\n0\n\n\n\nN\n\n2\n\n\n\u2212\n1\n\n\nx\n(\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n)\n\nW\n\n\nN\n\n2\n\n\n\n\n\nn\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle G\\left(n_{1},k_{2}\\right)=\\sum _{n_{2}=0}^{N_{2}-1}x(n_{1},n_{2})W_{N_{2}}^{n_{2}k_{2}}}\n\n\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\n\u2211\n\n\nn\n\n1\n\n\n=\n0\n\n\n\nN\n\n1\n\n\n\u2212\n1\n\n\nG\n\n(\n\nn\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\nW\n\n\nN\n\n1\n\n\n\n\n\nn\n\n1\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)=\\sum _{n_{1}=0}^{N_{1}-1}G\\left(n_{1},k_{2}\\right)W_{N_{1}}^{n_{1}k_{2}}}\n\n\nEmploying this method the DFT \n\n\n\nX\n\n\n{\\displaystyle X}\n\n can be computed as multiple 1-D DFTs. That is, each column of \n\n\n\nG\n\n\n{\\displaystyle G}\n\n can be considered as a 1-D DFT of the corresponding column of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n(\n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n = constant). And each row of \n\n\n\nX\n\n\n{\\displaystyle X}\n\n is the 1-DFT of the corresponding row of the \n\n\n\nG\n\n\n{\\displaystyle G}\n\n(\n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n = constant). Hence we are computing the 2-D DFT by decomposing it into Row and Column DFTs.\nThe same principle is employed for evaluating the M-D DFT of a M - dimensional signal.\nNow let's talk about the computational savings we get using this approach. It is observed that we require \n\n\n\n\nN\n\n1\n\n\n\nN\n\n2\n\n\n(\n\nN\n\n1\n\n\n+\n\nN\n\n2\n\n\n)\n\n\n{\\displaystyle N_{1}N_{2}(N_{1}+N_{2})}\n\n complex additions and multiplications. Further, if each of these 1-D DFT is computed using a 1-D FFT, the number of complex multiplications can be further reduced to \n\n\n\n\nN\n\n1\n\n\n\nN\n\n2\n\n\n\n\n\n\nlog\n\n2\n\n\n\u2061\n\nN\n\n1\n\n\n\nN\n\n2\n\n\n\n2\n\n\n\n\n{\\displaystyle N_{1}N_{2}{\\frac {\\log _{2}N_{1}N_{2}}{2}}}\n\n\nJust like the 1-D FFT, decimation in time can be achieved in the case of 2-D Signals. The 1-D DFT of a signal whose length is a power of 2, can be expressed in terms of two half-length DFTs, each of these can again be expressed as a combination of quarter length DFTs and so on.\nIn the case of 2-D signals we can express the \n\n\n\n(\n\nN\n\n1\n\n\n\n\u00a0x\u00a0\n\n\nN\n\n2\n\n\n)\n\n\n{\\displaystyle (N_{1}{\\text{ x }}N_{2})}\n\n DFT in terms of four \n\n\n\n\n\n\nN\n\n1\n\n\n2\n\n\n\n\u00a0x\u00a0\n\n\n\n\nN\n\n2\n\n\n2\n\n\n\n\n{\\displaystyle {\\frac {N_{1}}{2}}{\\text{ x }}{\\frac {N_{2}}{2}}}\n\n DFTs (assuming \n\n\n\n\nN\n\n1\n\n\n\n\n{\\displaystyle N_{1}}\n\n and \n\n\n\n\nN\n\n2\n\n\n\n\n{\\displaystyle N_{2}}\n\n are powers of 2). For the sake of simplicity let us assume that \n\n\n\n\nN\n\n1\n\n\n=\n\nN\n\n2\n\n\n=\nN\n\n\n{\\displaystyle N_{1}=N_{2}=N}\n\n. The DFT double sum can be decomposed into four separate summations, one over those samples of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n for which both \n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n and \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n are even, one for which \n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n is even and \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n is odd, one for which \n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n is odd and \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n is even and the last one for which \n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n and \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n are odd.\nThis is written as\u00a0:\nwhere\n\n\n\n\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2261\n\n\u2211\n\n\nm\n\n1\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\n\n\u2211\n\n\nm\n\n2\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\nx\n(\n2\n\nm\n\n1\n\n\n,\n2\n\nm\n\n2\n\n\n)\n\nW\n\nN\n\n\n2\n\nm\n\n1\n\n\n\nk\n\n1\n\n\n+\n2\n\nm\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle S_{00}(k_{1},k_{2})\\equiv \\sum _{m_{1}=0}^{N/2-1}\\sum _{m_{2}=0}^{N/2-1}x(2m_{1},2m_{2})W_{N}^{2m_{1}k_{1}+2m_{2}k_{2}}}\n\n\n\n\n\n\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2261\n\n\u2211\n\n\nm\n\n1\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\n\n\u2211\n\n\nm\n\n2\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\nx\n(\n2\n\nm\n\n1\n\n\n,\n2\n\nm\n\n2\n\n\n+\n1\n)\n\nW\n\nN\n\n\n2\n\nm\n\n1\n\n\n\nk\n\n1\n\n\n+\n2\n\nm\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle S_{01}(k_{1},k_{2})\\equiv \\sum _{m_{1}=0}^{N/2-1}\\sum _{m_{2}=0}^{N/2-1}x(2m_{1},2m_{2}+1)W_{N}^{2m_{1}k_{1}+2m_{2}k_{2}}}\n\n\n\n\n\n\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2261\n\n\u2211\n\n\nm\n\n1\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\n\n\u2211\n\n\nm\n\n2\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\nx\n(\n2\n\nm\n\n1\n\n\n+\n1\n,\n2\n\nm\n\n2\n\n\n)\n\nW\n\nN\n\n\n2\n\nm\n\n1\n\n\n\nk\n\n1\n\n\n+\n2\n\nm\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle S_{10}(k_{1},k_{2})\\equiv \\sum _{m_{1}=0}^{N/2-1}\\sum _{m_{2}=0}^{N/2-1}x(2m_{1}+1,2m_{2})W_{N}^{2m_{1}k_{1}+2m_{2}k_{2}}}\n\n\n\n\n\n\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2261\n\n\u2211\n\n\nm\n\n1\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\n\n\u2211\n\n\nm\n\n2\n\n\n=\n0\n\n\nN\n\n/\n\n2\n\u2212\n1\n\n\nx\n(\n2\n\nm\n\n1\n\n\n+\n1\n,\n2\n\nm\n\n2\n\n\n+\n1\n)\n\nW\n\nN\n\n\n2\n\nm\n\n1\n\n\n\nk\n\n1\n\n\n+\n2\n\nm\n\n2\n\n\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle S_{11}(k_{1},k_{2})\\equiv \\sum _{m_{1}=0}^{N/2-1}\\sum _{m_{2}=0}^{N/2-1}x(2m_{1}+1,2m_{2}+1)W_{N}^{2m_{1}k_{1}+2m_{2}k_{2}}}\n\n\nAll the arrays \n\n\n\n\nS\n\n00\n\n\n\nS\n\n01\n\n\n\nS\n\n10\n\n\n\n\n{\\displaystyle S_{00}S_{01}S_{10}}\n\n and \n\n\n\n\nS\n\n11\n\n\n\n\n{\\displaystyle S_{11}}\n\n are each periodic in \n\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle (k_{1},k_{2})}\n\n with horizontal and vertical periods \n\n\n\n\n\nN\n2\n\n\n\n\n{\\displaystyle {\\frac {N}{2}}}\n\n. Using this fact and also the fact that \n\n\n\n\nW\n\nN\n\n\nN\n\n/\n\n2\n\n\n=\n\u2212\n1\n,\n\n\n{\\displaystyle W_{N}^{N/2}=-1,}\n\n we can obtain the following identities\u00a0:\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n+\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n2\n\n\n\n\n+\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n\n\n+\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n+\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)=S_{00}(k_{1},k_{2})+S_{01}(k_{1},k_{2})W_{N}^{k_{2}}+S_{10}(k_{1},k_{2})W_{N}^{k_{1}}+S_{11}(k_{1},k_{2})W_{N}^{k_{1}+k_{2}}}\n\n\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n+\n\n\nN\n2\n\n\n,\n\nk\n\n2\n\n\n)\n\n=\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n+\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n2\n\n\n\n\n\u2212\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n\n\n\u2212\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n+\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1}+{\\frac {N}{2}},k_{2}\\right)=S_{00}(k_{1},k_{2})+S_{01}(k_{1},k_{2})W_{N}^{k_{2}}-S_{10}(k_{1},k_{2})W_{N}^{k_{1}}-S_{11}(k_{1},k_{2})W_{N}^{k_{1}+k_{2}}}\n\n\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n+\n\n\nN\n2\n\n\n)\n\n=\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2212\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n2\n\n\n\n\n+\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n\n\n\u2212\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n+\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}+{\\frac {N}{2}}\\right)=S_{00}(k_{1},k_{2})-S_{01}(k_{1},k_{2})W_{N}^{k_{2}}+S_{10}(k_{1},k_{2})W_{N}^{k_{1}}-S_{11}(k_{1},k_{2})W_{N}^{k_{1}+k_{2}}}\n\n\n\n\n\n\nX\n\n(\n\nk\n\n1\n\n\n+\n\n\nN\n2\n\n\n,\n\nk\n\n2\n\n\n+\n\n\nN\n2\n\n\n)\n\n=\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\u2212\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n2\n\n\n\n\n\u2212\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n\n\n+\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nW\n\nN\n\n\n\nk\n\n1\n\n\n+\n\nk\n\n2\n\n\n\n\n\n\n{\\displaystyle X\\left(k_{1}+{\\frac {N}{2}},k_{2}+{\\frac {N}{2}}\\right)=S_{00}(k_{1},k_{2})-S_{01}(k_{1},k_{2})W_{N}^{k_{2}}-S_{10}(k_{1},k_{2})W_{N}^{k_{1}}+S_{11}(k_{1},k_{2})W_{N}^{k_{1}+k_{2}}}\n\n\nThe above equation tell us how to compute the four DFT points \n\n\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nX\n\n(\n\nk\n\n1\n\n\n+\n\n\nN\n2\n\n\n,\n\nk\n\n2\n\n\n)\n\nX\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n+\n\n\nN\n2\n\n\n)\n\n\n\u00a0and\u00a0\n\nX\n\n(\n\nk\n\n1\n\n\n+\n\n\nN\n2\n\n\n,\n\nk\n\n2\n\n\n+\n\n\nN\n2\n\n\n)\n\n\n\n{\\displaystyle X\\left(k_{1},k_{2}\\right)X\\left(k_{1}+{\\frac {N}{2}},k_{2}\\right)X\\left(k_{1},k_{2}+{\\frac {N}{2}}\\right){\\text{ and }}X\\left(k_{1}+{\\frac {N}{2}},k_{2}+{\\frac {N}{2}}\\right)}\n\n for a particular value of \n\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle (k_{1},k_{2})}\n\n from the four points \n\n\n\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\u00a0and\u00a0\n\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle S_{00}(k_{1},k_{2})S_{01}(k_{1},k_{2})S_{10}(k_{1},k_{2}){\\text{ and }}S_{11}(k_{1},k_{2})}\n\n. \n\n\n\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle S_{00}(k_{1},k_{2})}\n\n can be obtained by evaluating a \n\n\n\n\n(\n\n\nN\n2\n\n\n\u00d7\n\n\nN\n2\n\n\n)\n\n\n\n{\\displaystyle \\left({\\frac {N}{2}}\\times {\\frac {N}{2}}\\right)}\n\n -point DFT (similarly other \n\n\n\n\nS\n\ni\nj\n\n\n\n\n{\\displaystyle S_{ij}}\n\n can be obtained).\nThus we see that the \n\n\n\nN\n\u00d7\nN\n\n\n{\\displaystyle N\\times N}\n\n DFT can be expressed in terms of four \n\n\n\n\n\nN\n2\n\n\n\u00d7\n\n\nN\n2\n\n\n\n\n{\\displaystyle {\\frac {N}{2}}\\times {\\frac {N}{2}}}\n\n DFTs.\nBy analogy from the 1-D case, the computation depicted in the below figure is called a \n\n\n\n\nbutterfly\n\n\n\n{\\displaystyle {\\text{butterfly}}}\n\n or more precisely \n\n\n\nr\na\nd\ni\nx\n\u2212\n(\n2\n\u00d7\n2\n)\n\n\u00a0butterfly\n\n\n\n{\\displaystyle radix-(2\\times 2){\\text{ butterfly}}}\n\n .\n\nEach butterfly requires three complex multiplications and eight complex additions for the calculation of outputs from the inputs. And to compute all the samples of \n\n\n\nX\n\n\n{\\displaystyle X}\n\n from \n\n\n\n\nS\n\n00\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n,\n\nS\n\n01\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n,\n\nS\n\n10\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\u00a0and\u00a0\n\n\nS\n\n11\n\n\n(\n\nk\n\n1\n\n\n,\n\nk\n\n2\n\n\n)\n\n\n{\\displaystyle S_{00}(k_{1},k_{2}),S_{01}(k_{1},k_{2}),S_{10}(k_{1},k_{2}){\\text{ and }}S_{11}(k_{1},k_{2})}\n\n it requires calculations of \n\n\n\n\n\n\nN\n\n2\n\n\n4\n\n\n\n\n{\\displaystyle {\\frac {N^{2}}{4}}}\n\n butterflies.\nThis decimation procedure is performed \n\n\n\n\nlog\n\n2\n\n\n\u2061\nN\n\n\n{\\displaystyle \\log _{2}N}\n\n times when \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is a power of 2. Each stage of decimation consists of \n\n\n\n\n\n\nN\n\n2\n\n\n4\n\n\n\n\n{\\displaystyle {\\frac {N^{2}}{4}}}\n\n butterflies, and each butterfly involves three complex multiplications and eight complex additions and hence the number of complex multiplications that needs to be performed during the computation of an \n\n\n\n(\nN\n\u00d7\nN\n)\n\n\n{\\displaystyle (N\\times N)}\n\n -point radix \n\n\n\n(\n2\n\u00d7\n2\n)\n\n\n{\\displaystyle (2\\times 2)}\n\n FFT is given by\n\n\n\n\n\nC\n\nv\ne\nc\nt\no\nr\nR\na\nd\ni\nx\n(\n2\n\u00d7\n2\n)\n\n\n=\n\n\n\n3\n\nN\n\n2\n\n\n\n4\n\n\n\nlog\n\n2\n\n\n\u2061\nN\n\n\n{\\displaystyle C_{vectorRadix(2\\times 2)}={\\frac {3N^{2}}{4}}\\log _{2}N}\n\n", 
    "dbpedia_url": "http://dbpedia.org/resource/Fast_Algorithms_for_Multidimensional_Signals", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Fast_Algorithms_for_Multidimensional_Signals\n"
}