{
    "about": "A locally decodable code (LDC) is an error-correcting code that allows a single bit of the original message to be decoded with high probability by only examining (or querying) a small number of bits of a possibly corrupted codeword. [1][2][3] This property could be useful, say, in a context where information is being transmitted over a noisy channel, and only a small subset of the data is required at a particular time and there is no need to decode the entire message at once. Note that locally decodable codes are not a subset of locally testable codes, though there is some overlap between the two.[4]", 
    "name": "Locally Decodable Code", 
    "classification": "Error Detection And Correction", 
    "full_text": "A locally decodable code (LDC) is an error-correcting code that allows a single bit of the original message to be decoded with high probability by only examining (or querying) a small number of bits of a possibly corrupted codeword. [1][2][3] This property could be useful, say, in a context where information is being transmitted over a noisy channel, and only a small subset of the data is required at a particular time and there is no need to decode the entire message at once. Note that locally decodable codes are not a subset of locally testable codes, though there is some overlap between the two.[4]\nCodewords are generated from the original message using an algorithm that introduces a certain amount of redundancy into the codeword; thus, the codeword is always longer than the original message. This redundancy is distributed across the codeword and allows the original message to be recovered with good probability even in the presence of errors. The more redundant the codeword, the more resilient it is against errors, and the fewer queries required to recover a bit of the original message.\n\n\nMore formally, a \n\n\n\n(\nq\n,\n\u03b4\n,\n\u03f5\n)\n\n\n{\\displaystyle (q,\\delta ,\\epsilon )}\n\n-locally decodable code encodes an \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-bit message \n\n\n\nx\n\n\n{\\displaystyle x}\n\n to an \n\n\n\nN\n\n\n{\\displaystyle N}\n\n-bit codeword \n\n\n\nC\n(\nx\n)\n\n\n{\\displaystyle C(x)}\n\n such that any bit \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n of the message can be recovered with probability \n\n\n\n1\n\u2212\n\u03f5\n\n\n{\\displaystyle 1-\\epsilon }\n\n by using a randomized decoding algorithm that queries only \n\n\n\nq\n\n\n{\\displaystyle q}\n\n bits of the codeword \n\n\n\nC\n(\nx\n)\n\n\n{\\displaystyle C(x)}\n\n, even if up to \n\n\n\n\u03b4\nN\n\n\n{\\displaystyle \\delta N}\n\n locations of the codeword have been corrupted.\nFurthermore, a perfectly smooth local decoder is a decoder such that, in addition to always generating the correct output given access to an uncorrupted codeword, for every \n\n\n\nj\n\u2208\n[\nq\n]\n\n\n{\\displaystyle j\\in [q]}\n\n and \n\n\n\ni\n\u2208\n[\nn\n]\n\n\n{\\displaystyle i\\in [n]}\n\n the \n\n\n\n\nj\n\nt\nh\n\n\n\n\n{\\displaystyle j^{th}}\n\n query to recover the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n bit is uniform over \n\n\n\n[\nN\n]\n\n\n{\\displaystyle [N]}\n\n.[5] (The notation \n\n\n\n[\ny\n]\n\n\n{\\displaystyle [y]}\n\n denotes the set \n\n\n\n{\n1\n,\n\u2026\n,\ny\n}\n\n\n{\\displaystyle \\{1,\\ldots ,y\\}}\n\n). Informally, this means that the set of queries required to decode any given bit are uniformly distributed over the codeword.\nLocal list decoders are another interesting subset of local decoders. List decoding is useful when a codeword is corrupted in more than \n\n\n\n\u03b4\n\n/\n\n2\n\n\n{\\displaystyle \\delta /2}\n\n places, where \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n is the minimum Hamming distance between two codewords. In this case, it is no longer possible to identify exactly which original message has been encoded, since there could be multiple codewords within \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n distance of the corrupted codeword. However, given a radius \n\n\n\n\u03f5\n\n\n{\\displaystyle \\epsilon }\n\n, it is possible to identify the set of messages that encode to codewords that are within \n\n\n\n\u03f5\n\n\n{\\displaystyle \\epsilon }\n\n of the corrupted codeword. An upper bound on the size of the set of messages can be determined by \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n and \n\n\n\n\u03f5\n\n\n{\\displaystyle \\epsilon }\n\n.[6]\nLocally decodable codes can also be concatenated, where a message is encoded first using one scheme, and the resulting codeword is encoded again using a different scheme. (Note that, in this context, concatenation is the term used by scholars to refer to what is usually called composition; see [5]). This might be useful if, for example, the first code has some desirable properties with respect to rate, but it has some undesirable property, such as producing a codeword over a non-binary alphabet. The second code can then transform the result of the first encoding over a non-binary alphabet to a binary alphabet. The final encoding is still locally decodable, and requires additional steps to decode both layers of encoding.<refArora & Barak 2009>, Section 19.4.3</ref>\nThe rate of a code refers to the ratio between its message length and codeword length: \n\n\n\n\n\n\n\n|\n\nx\n\n|\n\n\n\n\n|\n\nC\n(\nx\n)\n\n|\n\n\n\n\n\n\n{\\displaystyle {\\frac {|x|}{|C(x)|}}}\n\n, and the number of queries required to recover 1 bit of the message is called the query complexity of a code.\nThe rate of a code is inversely related to the query complexity, but the exact shape of this tradeoff is a major open problem.[7][8] It is known that there are no LDCs that query the codeword in only one position, and that the optimal codeword size for query complexity 2 is exponential in the size of the original message.[7] However, there are no known tight lower bounds for codes with query complexity greater than 2. Approaching the tradeoff from the side of codeword length, the only known codes with codeword length proportional to message length have query complexity \n\n\n\n\nk\n\n\u03f5\n\n\n\n\n{\\displaystyle k^{\\epsilon }}\n\n for \n\n\n\n\u03f5\n>\n0\n\n\n{\\displaystyle \\epsilon >0}\n\n (THIS LINE IS NOW OUTDATED -- MANY RECENT RESULTS SINCE 2011).[7] There are also codes in between, that have codewords polynomial in the size of the original message and polylogarithmic query complexity.[7]\nLocally decodable codes have applications to data transmission and storage, complexity theory, data structures, derandomization, theory of fault tolerant computation, and private information retrieval schemes.[8]\nLocally decodable codes are especially useful for data transmission over noisy channels. The Hadamard code (a special case of Reed Muller codes) was used in 1971 by Mariner 9 to transmit pictures of Mars back to Earth. It was chosen over a 5-repeat code (where each bit is repeated 5 times) because, for roughly the same number of bits transmitted per pixel, it had a higher capacity for error correction. (The Hadamard code falls under the general umbrella of forward error correction, and just happens to be locally decodable; the actual algorithm used to decode the transmission from Mars was a generic error-correction scheme.)[9]\nLDCs are also useful for data storage, where the medium may become partially corrupted over time, or the reading device is subject to errors. In both cases, an LDC will allow for the recovery of information despite errors, provided that there are relatively few. In addition, LDCs do not require that the entire original message be decoded; a user can decode a specific portion of the original message without needing to decode the entire thing.[10]\nOne of the applications of locally decodable codes in complexity theory is hardness amplification. Using LDCs with polynomial codeword length and polylogarithmic query complexity, one can take a function \n\n\n\nL\n:\n{\n0\n,\n1\n\n}\n\nn\n\n\n\u2192\n{\n0\n,\n1\n}\n\n\n{\\displaystyle L:\\{0,1\\}^{n}\\rightarrow \\{0,1\\}}\n\n that is hard to solve on worst case inputs and design a function \n\n\n\n\nL\n\u2032\n\n:\n{\n0\n,\n1\n\n}\n\nN\n\n\n\u2192\n{\n0\n,\n1\n}\n\n\n{\\displaystyle L':\\{0,1\\}^{N}\\rightarrow \\{0,1\\}}\n\n that is hard to compute on average case inputs.\nConsider \n\n\n\nL\n\n\n{\\displaystyle L}\n\n limited to only length \n\n\n\nt\n\n\n{\\displaystyle t}\n\n inputs. Then we can see \n\n\n\nL\n\n\n{\\displaystyle L}\n\n as a binary string of length \n\n\n\n\n2\n\nt\n\n\n\n\n{\\displaystyle 2^{t}}\n\n, where each bit is \n\n\n\nL\n(\nx\n)\n\n\n{\\displaystyle L(x)}\n\n for each \n\n\n\nx\n\u2208\n{\n0\n,\n1\n\n}\n\nt\n\n\n\n\n{\\displaystyle x\\in \\{0,1\\}^{t}}\n\n. We can use a polynomial length locally decodable code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n with polylogarithmic query complexity that tolerates some constant fraction of errors to encode the string that represents \n\n\n\nL\n\n\n{\\displaystyle L}\n\n to create a new string of length \n\n\n\n\n2\n\nO\n(\nt\n)\n\n\n=\n\n2\n\n\nt\n\u2032\n\n\n\n\n\n{\\displaystyle 2^{O(t)}=2^{t'}}\n\n. We think of this new string as defining a new problem \n\n\n\n\nL\n\u2032\n\n\n\n{\\displaystyle L'}\n\n on length \n\n\n\n\nt\n\u2032\n\n\n\n{\\displaystyle t'}\n\n inputs. If \n\n\n\n\nL\n\u2032\n\n\n\n{\\displaystyle L'}\n\n is easy to solve on average, that is, we can solve \n\n\n\n\nL\n\u2032\n\n\n\n{\\displaystyle L'}\n\n correctly on a large fraction \n\n\n\n1\n\u2212\n\u03f5\n\n\n{\\displaystyle 1-\\epsilon }\n\n of inputs, then by the properties of the LDC used to encode it, we can use \n\n\n\n\nL\n\u2032\n\n\n\n{\\displaystyle L'}\n\n to probabilistically compute \n\n\n\nL\n\n\n{\\displaystyle L}\n\n on all inputs. Thus, a solution to \n\n\n\n\nL\n\u2032\n\n\n\n{\\displaystyle L'}\n\n for most inputs would allow us to solve \n\n\n\nL\n\n\n{\\displaystyle L}\n\n on all inputs, contradicting our assumption that \n\n\n\nL\n\n\n{\\displaystyle L}\n\n is hard on worst case inputs.[5][7][11]\nA private information retrieval scheme allows a user to retrieve an item from a server in possession of a database without revealing which item is retrieved. One common way of ensuring privacy is to have \n\n\n\nk\n\n\n{\\displaystyle k}\n\n separate, non-communicating servers, each with a copy of the database. Given an appropriate scheme, the user can make queries to each server that individually do not reveal which bit the user is looking for, but which together provide enough information that the user can determine the particular bit of interest in the database.[3][10]\nOne can easily see that locally decodable codes have applications in this setting. A general procedure to produce a \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-server private information scheme from a perfectly smooth \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-query locally decodable code is as follows:\nLet \n\n\n\nC\n\n\n{\\displaystyle C}\n\n be a perfectly smooth LDC that encodes \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-bit messages to \n\n\n\nN\n\n\n{\\displaystyle N}\n\n-bit codewords. As a preprocessing step, each of the \n\n\n\nk\n\n\n{\\displaystyle k}\n\n servers \n\n\n\n\nS\n\n1\n\n\n,\n\u2026\n,\n\nS\n\nk\n\n\n\n\n{\\displaystyle S_{1},\\ldots ,S_{k}}\n\n encodes the \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-bit database \n\n\n\nx\n\n\n{\\displaystyle x}\n\n with the code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n, so each server now stores the \n\n\n\nN\n\n\n{\\displaystyle N}\n\n-bit codeword \n\n\n\nC\n(\nx\n)\n\n\n{\\displaystyle C(x)}\n\n. A user interested in obtaining the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n bit of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n randomly generates a set of \n\n\n\nk\n\n\n{\\displaystyle k}\n\n queries \n\n\n\n\nq\n\n1\n\n\n,\n\u2026\n\nq\n\nk\n\n\n\n\n{\\displaystyle q_{1},\\ldots q_{k}}\n\n such that \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n can be computed from \n\n\n\nC\n(\nx\n\n)\n\n\nq\n\n1\n\n\n\n\n,\n\u2026\nC\n(\nx\n\n)\n\n\nq\n\nk\n\n\n\n\n\n\n{\\displaystyle C(x)_{q_{1}},\\ldots C(x)_{q_{k}}}\n\n using the local decoding algorithm \n\n\n\nA\n\n\n{\\displaystyle A}\n\n for \n\n\n\nC\n\n\n{\\displaystyle C}\n\n. The user sends each query to a different server, and each server responds with the bit requested. The user then uses \n\n\n\nA\n\n\n{\\displaystyle A}\n\n to compute \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n from the responses.[7][10] Because the decoding algorithm is perfectly smooth, each query \n\n\n\n\nq\n\nj\n\n\n\n\n{\\displaystyle q_{j}}\n\n is uniformly distributed over the codeword; thus, no individual server can gain any information about the user's intentions, so the protocol is private as long as the servers do not communicate.[10]\nThe Hadamard (or Walsh-Hadamard) code is an example of a simple locally decodable code that maps a string of length \n\n\n\nk\n\n\n{\\displaystyle k}\n\n to a codeword of length \n\n\n\n\n2\n\nk\n\n\n\n\n{\\displaystyle 2^{k}}\n\n. The codeword for a string \n\n\n\nx\n\u2208\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle x\\in \\{0,1\\}^{k}}\n\n is constructed as follows: for every \n\n\n\n\na\n\nj\n\n\n\u2208\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle a_{j}\\in \\{0,1\\}^{k}}\n\n, the \n\n\n\n\nj\n\nt\nh\n\n\n\n\n{\\displaystyle j^{th}}\n\n bit of the codeword is equal to \n\n\n\nx\n\u2299\n\na\n\nj\n\n\n\n\n{\\displaystyle x\\odot a_{j}}\n\n, where \n\n\n\nx\n\u2299\ny\n=\n\n\u2211\n\ni\n=\n1\n\n\nk\n\n\n\nx\n\ni\n\n\n\ny\n\ni\n\n\n\n\n{\\displaystyle x\\odot y=\\sum \\limits _{i=1}^{k}x_{i}y_{i}}\n\n (mod 2). It is easy to see that every codeword has a Hamming distance of \n\n\n\n\n\nn\n2\n\n\n\n\n{\\displaystyle {\\frac {n}{2}}}\n\n from every other codeword.\nThe local decoding algorithm has query complexity 2, and the entire original message can be decoded with good probability if the codeword is corrupted in less than \n\n\n\n\n\n1\n4\n\n\n\n\n{\\displaystyle {\\frac {1}{4}}}\n\n of its bits. For \n\n\n\n\u03c1\n<\n\n\n1\n4\n\n\n\n\n{\\displaystyle \\rho <{\\frac {1}{4}}}\n\n, if the codeword is corrupted in a \n\n\n\n\u03c1\n\n\n{\\displaystyle \\rho }\n\n fraction of places, a local decoding algorithm can recover the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n bit of the original message with probability \n\n\n\n1\n\u2212\n2\n\u03c1\n\n\n{\\displaystyle 1-2\\rho }\n\n.\nProof: Given a codeword \n\n\n\nH\n\n\n{\\displaystyle H}\n\n and an index \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, the algorithm to recover the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n bit of the original message \n\n\n\nx\n\n\n{\\displaystyle x}\n\n works as follows:\nLet \n\n\n\n\ne\n\nj\n\n\n\n\n{\\displaystyle e^{j}}\n\n refer to the vector in \n\n\n\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle \\{0,1\\}^{k}}\n\n that has 1 in the \n\n\n\n\nj\n\nt\nh\n\n\n\n\n{\\displaystyle j^{th}}\n\n position and 0s elsewhere. For \n\n\n\ny\n\u2208\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle y\\in \\{0,1\\}^{k}}\n\n, \n\n\n\nf\n(\ny\n)\n\n\n{\\displaystyle f(y)}\n\n denotes the single bit in \n\n\n\nH\n\n\n{\\displaystyle H}\n\n that corresponds to \n\n\n\nx\n\u2299\ny\n\n\n{\\displaystyle x\\odot y}\n\n. The algorithm chooses a random vector \n\n\n\ny\n\u2208\n{\n0\n,\n1\n\n}\n\nk\n\n\n\n\n{\\displaystyle y\\in \\{0,1\\}^{k}}\n\n and the vector \n\n\n\n\ny\n\u2032\n\n=\ny\n\u2297\n\ne\n\ni\n\n\n\n\n{\\displaystyle y'=y\\otimes e^{i}}\n\n (where \n\n\n\n\u2297\n\n\n{\\displaystyle \\otimes }\n\n denotes bitwise XOR). The algorithm outputs \n\n\n\nf\n(\ny\n)\n\u2297\nf\n(\n\ny\n\u2032\n\n)\n\n\n{\\displaystyle f(y)\\otimes f(y')}\n\n (mod 2).\nCorrectness: By linearity,\n\n\n\n\n(\nx\n\u2299\ny\n)\n\u2297\n(\nx\n\u2299\n\ny\n\u2032\n\n)\n=\n(\nx\n\u2299\ny\n)\n\u2297\n(\nx\n\u2299\n(\ny\n\u2297\n\ne\n\ni\n\n\n)\n)\n=\n(\nx\n\u2299\ny\n)\n\u2297\n(\nx\n\u2299\ny\n)\n\u2297\n(\nx\n\u2299\n\ne\n\ni\n\n\n)\n=\nx\n\u2299\n\ne\n\ni\n\n\n\n\n{\\displaystyle (x\\odot y)\\otimes (x\\odot y')=(x\\odot y)\\otimes (x\\odot (y\\otimes e^{i}))=(x\\odot y)\\otimes (x\\odot y)\\otimes (x\\odot e^{i})=x\\odot e^{i}}\n\n\nBut \n\n\n\n(\nx\n\u2299\n\ne\n\ni\n\n\n)\n=\n\nx\n\ni\n\n\n\n\n{\\displaystyle (x\\odot e^{i})=x_{i}}\n\n, so we just need to show that \n\n\n\nf\n(\ny\n)\n=\nx\n\u2299\ny\n\n\n{\\displaystyle f(y)=x\\odot y}\n\n and \n\n\n\nf\n(\n\ny\n\u2032\n\n)\n=\nx\n\u2299\n\ny\n\u2032\n\n\n\n{\\displaystyle f(y')=x\\odot y'}\n\n with good probability.\nSince \n\n\n\ny\n\n\n{\\displaystyle y}\n\n and \n\n\n\n\ny\n\u2032\n\n\n\n{\\displaystyle y'}\n\n are uniformly distributed (even though they are dependent), the union bound implies that \n\n\n\nf\n(\ny\n)\n=\nx\n\u2299\ny\n\n\n{\\displaystyle f(y)=x\\odot y}\n\n and \n\n\n\nf\n(\n\ny\n\u2032\n\n)\n=\nx\n\u2299\n\ny\n\u2032\n\n\n\n{\\displaystyle f(y')=x\\odot y'}\n\n with probability at least \n\n\n\n1\n\u2212\n2\n\u03c1\n\n\n{\\displaystyle 1-2\\rho }\n\n. Note: to amplify the probability of success, one can repeat the procedure with different random vectors and take the majority answer. [12]\nThe main idea behind local decoding of Reed-Muller codes is polynomial interpolation. The key concept behind a Reed-Muller code is a multivariate polynomial of degree \n\n\n\nd\n\n\n{\\displaystyle d}\n\n on \n\n\n\nl\n\n\n{\\displaystyle l}\n\n variables. The message is treated as the evaluation of a polynomial at a set of predefined points. To encode these values, a polynomial is extrapolated from them, and the codeword is the evaluation of that polynomial on all possible points. At a high level, to decode a point of this polynomial, the decoding algorithm chooses a set \n\n\n\nS\n\n\n{\\displaystyle S}\n\n of points on a line that passes through the point of interest \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. It then queries the codeword for the evaluation of the polynomial on points in \n\n\n\nS\n\n\n{\\displaystyle S}\n\n and interpolates that polynomial. Then it is simple to evaluate the polynomial at the point that will yield \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. This roundabout way of evaluating \n\n\n\nx\n\n\n{\\displaystyle x}\n\n is useful because (a) the algorithm can be repeated using different lines through the same point to improve the probability of correctness, and (b) the queries are uniformly distributed over the codeword.\nMore formally, let \n\n\n\n\nF\n\n\n\n{\\displaystyle \\mathbb {F} }\n\n be a finite field, and let \n\n\n\nl\n,\nd\n\n\n{\\displaystyle l,d}\n\n be numbers with \n\n\n\nd\n<\n\n|\n\n\nF\n\n\n|\n\n\n\n{\\displaystyle d<|\\mathbb {F} |}\n\n. The Reed-Muller code with parameters \n\n\n\n\nF\n\n,\nl\n,\nd\n\n\n{\\displaystyle \\mathbb {F} ,l,d}\n\n is the function RM\u00a0: \n\n\n\n\n\nF\n\n\n\n\n(\n\n\n\nl\n+\nd\n\nd\n\n\n)\n\n\n\n\n\u2192\n\n\nF\n\n\n\n|\n\n\nF\n\n\n\n|\n\n\nl\n\n\n\n\n\n\n{\\displaystyle \\mathbb {F} ^{\\binom {l+d}{d}}\\rightarrow \\mathbb {F} ^{|\\mathbb {F} |^{l}}}\n\n that maps every \n\n\n\nl\n\n\n{\\displaystyle l}\n\n-variable polynomial \n\n\n\nP\n\n\n{\\displaystyle P}\n\n over \n\n\n\n\nF\n\n\n\n{\\displaystyle \\mathbb {F} }\n\n of total degree \n\n\n\nd\n\n\n{\\displaystyle d}\n\n to the values of \n\n\n\nP\n\n\n{\\displaystyle P}\n\n on all the inputs in \n\n\n\n\n\nF\n\n\nl\n\n\n\n\n{\\displaystyle \\mathbb {F} ^{l}}\n\n. That is, the input is a polynomial of the form \n\n\n\nP\n(\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nl\n\n\n)\n=\n\n\u2211\n\n\ni\n\n1\n\n\n+\n\u2026\n+\n\ni\n\nl\n\n\n\u2264\nd\n\n\n\nc\n\n\ni\n\n1\n\n\n,\n\u2026\n,\n\ni\n\nl\n\n\n\n\n\nx\n\n1\n\n\n\ni\n\n1\n\n\n\n\n\nx\n\n2\n\n\n\ni\n\n2\n\n\n\n\n\u22ef\n\nx\n\nl\n\n\n\ni\n\nl\n\n\n\n\n\n\n{\\displaystyle P(x_{1},\\ldots ,x_{l})=\\sum \\limits _{i_{1}+\\ldots +i_{l}\\leq d}c_{i_{1},\\ldots ,i_{l}}x_{1}^{i_{1}}x_{2}^{i_{2}}\\cdots x_{l}^{i_{l}}}\n\n specified by the interpolation of the \n\n\n\n\n\n\n(\n\n\n\nl\n+\nd\n\nd\n\n\n)\n\n\n\n\n\n{\\displaystyle {\\binom {l+d}{d}}}\n\n values of the predefined points and the output is the sequence \n\n\n\n{\nP\n(\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nl\n\n\n)\n}\n\n\n{\\displaystyle \\{P(x_{1},\\ldots ,x_{l})\\}}\n\n for every \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nl\n\n\n\u2208\n\nF\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{l}\\in \\mathbb {F} }\n\n.[13]\nTo recover the value of a degree \n\n\n\nd\n\n\n{\\displaystyle d}\n\n polynomial at a point \n\n\n\nw\n\u2208\n\n\nF\n\n\nn\n\n\n\n\n{\\displaystyle w\\in \\mathbb {F} ^{n}}\n\n, the local decoder shoots a random affine line through \n\n\n\nw\n\n\n{\\displaystyle w}\n\n. Then it picks \n\n\n\nd\n+\n1\n\n\n{\\displaystyle d+1}\n\n points on that line, which it uses to interpolate the polynomial and then evaluate it at the point where the result is \n\n\n\nw\n\n\n{\\displaystyle w}\n\n. To do so, the algorithm picks a vector \n\n\n\nv\n\u2208\n\n\nF\n\n\nn\n\n\n\n\n{\\displaystyle v\\in \\mathbb {F} ^{n}}\n\n uniformly at random and considers the line \n\n\n\nL\n=\n{\nw\n+\n\u03bb\nv\n\u2223\n\u03bb\n\u2208\n\nF\n\n}\n\n\n{\\displaystyle L=\\{w+\\lambda v\\mid \\lambda \\in \\mathbb {F} \\}}\n\n through \n\n\n\nw\n\n\n{\\displaystyle w}\n\n. The algorithm picks an arbitrary subset \n\n\n\nS\n\n\n{\\displaystyle S}\n\n of \n\n\n\n\nF\n\n\n\n{\\displaystyle \\mathbb {F} }\n\n, where \n\n\n\n\n|\n\nS\n\n|\n\n=\nd\n+\n1\n\n\n{\\displaystyle |S|=d+1}\n\n, and queries coordinates of the codeword that correspond to points \n\n\n\nw\n+\n\u03bb\nv\n\n\n{\\displaystyle w+\\lambda v}\n\n for all \n\n\n\n\u03bb\n\u2208\nS\n\n\n{\\displaystyle \\lambda \\in S}\n\n and obtains values \n\n\n\n{\n\ne\n\n\u03bb\n\n\n}\n\n\n{\\displaystyle \\{e_{\\lambda }\\}}\n\n. Then it uses polynomial interpolation to recover the unique univariate polynomial \n\n\n\nh\n\n\n{\\displaystyle h}\n\n with degree less than or equal to \n\n\n\nd\n\n\n{\\displaystyle d}\n\n such that \n\n\n\nh\n(\n\u03bb\n)\n=\n\ne\n\n\u03bb\n\n\n\n\n{\\displaystyle h(\\lambda )=e_{\\lambda }}\n\n for all \n\n\n\n\u03bb\n\u2208\nS\n\n\n{\\displaystyle \\lambda \\in S}\n\n. Then, to get the value of \n\n\n\nw\n\n\n{\\displaystyle w}\n\n, it just evaluates \n\n\n\nh\n(\n0\n)\n\n\n{\\displaystyle h(0)}\n\n. To recover a single value of the original message, one chooses \n\n\n\nw\n\n\n{\\displaystyle w}\n\n to be one of the points that defines the polynomial.[7][13]\nEach individual query is distributed uniformly at random over the codeword. Thus, if the codeword is corrupted in at most a \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n fraction of locations, by the union bound, the probability that the algorithm samples only uncorrupted coordinates (and thus correctly recovers the bit) is at least \n\n\n\n1\n\u2212\n(\nd\n+\n1\n)\n\u03b4\n\n\n{\\displaystyle 1-(d+1)\\delta }\n\n.[7] For other decoding algorithms, see.[7]", 
    "dbpedia_url": "http://dbpedia.org/resource/Locally_decodable_code", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Locally_decodable_code\n"
}