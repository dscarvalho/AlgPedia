{
    "about": "In backtracking algorithms, backjumping is a technique that reduces search space, therefore increasing efficiency. While backtracking always goes up one level in the search tree when all values for a variable have been tested, backjumping may go up more levels. In this article, a fixed order of evaluation of variables \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nn\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{n}}\n\n is used, but the same considerations apply to a dynamic order of evaluation.", 
    "name": "Backjumping", 
    "classification": "Search Algorithms", 
    "full_text": "In backtracking algorithms, backjumping is a technique that reduces search space, therefore increasing efficiency. While backtracking always goes up one level in the search tree when all values for a variable have been tested, backjumping may go up more levels. In this article, a fixed order of evaluation of variables \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nn\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{n}}\n\n is used, but the same considerations apply to a dynamic order of evaluation.\nA search tree visited by regular backtracking\nA backjump: the grey node is not visited\n\n\nWhenever backtracking has tried all values for a variable without finding any solution, it reconsiders the last of the previously assigned variables, changing its value or further backtracking if no other values are to be tried. If \n\n\n\n\nx\n\n1\n\n\n=\n\na\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n=\n\na\n\nk\n\n\n\n\n{\\displaystyle x_{1}=a_{1},\\ldots ,x_{k}=a_{k}}\n\n is the current partial assignment and all values for \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n have been tried without finding a solution, backtracking concludes that no solution extending \n\n\n\n\nx\n\n1\n\n\n=\n\na\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n=\n\na\n\nk\n\n\n\n\n{\\displaystyle x_{1}=a_{1},\\ldots ,x_{k}=a_{k}}\n\n exists. The algorithm then \"goes up\" to \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n, changing \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n's value if possible, backtracking again otherwise.\nThe partial assignment is not always necessary in full to prove that no value of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n lead to a solution. In particular, a prefix of the partial assignment may have the same property, that is, there exists an index \n\n\n\nj\n<\nk\n\n\n{\\displaystyle j<k}\n\n such that \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nj\n\n\n=\n\na\n\n1\n\n\n,\n\u2026\n,\n\na\n\nj\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{j}=a_{1},\\ldots ,a_{j}}\n\n cannot be extended to form a solution with whatever value for \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n. If the algorithm can prove this fact, it can directly consider a different value for \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n instead of reconsidering \n\n\n\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{k}}\n\n as it would normally do.\nThe efficiency of a backjumping algorithm depends on how high it is able to backjump. Ideally, the algorithm could jump from \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n to whichever variable \n\n\n\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{j}}\n\n is such that the current assignment to \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nj\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{j}}\n\n cannot be extended to form a solution with any value of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n. If this is the case, \n\n\n\nj\n\n\n{\\displaystyle j}\n\n is called a safe jump.\nEstablishing whether a jump is safe is not always feasible, as safe jumps are defined in terms of the set of solutions, which is what the algorithm is trying to find. In practice, backjumping algorithms use the lowest index they can efficiently prove to be a safe jump. Different algorithms use different methods for determining whether a jump is safe. These methods have different cost, but a higher cost of finding a higher safe jump may be traded off a reduced amount of search due to skipping parts of the search tree.\nThe simplest condition in which backjumping is possible is when all values of a variable have been proved inconsistent without further branching. In constraint satisfaction, a partial evaluation is consistent if and only if it satisfies all constraints involving the assigned variables, and inconsistent otherwise. It might be the case that a consistent partial solution cannot be extended to a consistent complete solution because some of the unassigned variables may not be assigned without violating other constraints.\nThe condition in which all values of a given variable \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n are inconsistent with the current partial solution \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n=\n\na\n\n1\n\n\n,\n\u2026\n,\n\na\n\nk\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{k}=a_{1},\\ldots ,a_{k}}\n\n is called a leaf dead end. This happens exactly when the variable \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n is a leaf of the search tree (which correspond to nodes having only leaves as children in the figures of this article.)\nThe backjumping algorithm by Gaschnig does a backjump only in leaf dead ends. In other words, it works differently from backtracking only when every possible value of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n has been tested and resulted inconsistent without the need of branching over another variable.\nA safe jump can be found by simply evaluating, for every value \n\n\n\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle a_{k+1}}\n\n, the shortest prefix of \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n=\n\na\n\n1\n\n\n,\n\u2026\n,\n\na\n\nk\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{k}=a_{1},\\ldots ,a_{k}}\n\n inconsistent with \n\n\n\n\nx\n\nk\n+\n1\n\n\n=\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}=a_{k+1}}\n\n. In other words, if \n\n\n\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle a_{k+1}}\n\n is a possible value for \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n, the algorithm checks the consistency of the following evaluations:\nThe smallest index (lowest the listing) for which evaluations are inconsistent would be a safe jump if \n\n\n\n\nx\n\nk\n+\n1\n\n\n=\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}=a_{k+1}}\n\n were the only possible value for \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n. Since every variable can usually take more than one value, the maximal index that comes out from the check for each value is a safe jump, and is the point where Gaschnig's algorithm jumps.\nIn practice, the algorithm can check the evaluations above at the same time it is checking the consistency of \n\n\n\n\nx\n\nk\n+\n1\n\n\n=\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}=a_{k+1}}\n\n.\nThe previous algorithm only backjumps when the values of a variable can be shown inconsistent with the current partial solution without further branching. In other words, it allows for a backjump only at leaf nodes in the search tree.\nAn internal node of the search tree represents an assignment of a variable that is consistent with the previous ones. If no solution extends this assignment, the previous algorithm always backtracks: no backjump is done in this case.\nBackjumping at internal nodes cannot be done as for leaf nodes. Indeed, if some evaluations of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n required branching, it is because they are consistent with the current assignment. As a result, searching for a prefix that is inconsistent with these values of the last variable does not succeed.\nIn such cases, what proved an evaluation \n\n\n\n\nx\n\nk\n+\n1\n\n\n=\n\na\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}=a_{k+1}}\n\n not to be part of a solution with the current partial evaluation \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{k}}\n\n is the recursive search. In particular, the algorithm \"knows\" that no solution exists from this point on because it comes back to this node instead of stopping after having found a solution.\nThis return is due to a number of dead ends, points where the algorithm has proved a partial solution inconsistent. In order to further backjump, the algorithm has to take into account that the impossibility of finding solutions is due to these dead ends. In particular, the safe jumps are indexes of prefixes that still make these dead ends to be inconsistent partial solutions.\nIn other words, when all values of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n have been tried, the algorithm can backjump to a variable \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n provided that the current truth evaluation of \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{i}}\n\n is inconsistent with all the truth evaluations of \n\n\n\n\nx\n\nk\n+\n1\n\n\n,\n\nx\n\nk\n+\n2\n\n\n,\n.\n.\n.\n\n\n{\\displaystyle x_{k+1},x_{k+2},...}\n\n in the leaf nodes that are descendants of the node \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n.\nDue to the potentially high number of nodes that are in the subtree of \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n, the information that is necessary to safely backjump from \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n is collected during the visit of its subtree. Finding a safe jump can be simplified by two considerations. The first is that the algorithm needs a safe jump, but still works with a jump that is not the highest possible safe jump.\nThe second simplification is that nodes in the subtree of \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n that have been skipped by a backjump can be ignored while looking for a backjump for \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n. More precisely, all nodes skipped by a backjump from node \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n up to node \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n are irrelevant to the subtree rooted at \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n, and also irrelevant are their other subtrees.\nIndeed, if an algorithm went down from node \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n to \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n via a path but backjumps in its way back, then it could have gone directly from \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n to \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n instead. Indeed, the backjump indicates that the nodes between \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n and \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n are irrelevant to the subtree rooted at \n\n\n\n\nx\n\nm\n\n\n\n\n{\\displaystyle x_{m}}\n\n. In other words, a backjump indicates that the visit of a region of the search tree had been a mistake. This part of the search tree can therefore be ignored when considering a possible backjump from \n\n\n\n\nx\n\nl\n\n\n\n\n{\\displaystyle x_{l}}\n\n or from one of its ancestors.\nThis fact can be exploited by collecting, in each node, a set of previously assigned variables whose evaluation suffices to prove that no solution exists in the subtree rooted at the node. This set is built during the execution of the algorithm. When retracting from a node, this set is removed the variable of the node and collected in the set of the destination of backtracking or backjumping. Since nodes that are skipped from backjumping are never retracted from, their sets are automatically ignored.\nThe rationale of graph-based backjumping is that a safe jump can be found by checking which of the variables \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\nk\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{k}}\n\n are in a constraint with the variables \n\n\n\n\nx\n\nk\n+\n1\n\n\n,\n\nx\n\nk\n+\n2\n\n\n,\n.\n.\n.\n\n\n{\\displaystyle x_{k+1},x_{k+2},...}\n\n that are instantiated in leaf nodes. For every leaf node and every variable \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n of index \n\n\n\ni\n>\nk\n\n\n{\\displaystyle i>k}\n\n that is instantiated there, the indexes less than or equal to \n\n\n\nk\n\n\n{\\displaystyle k}\n\n whose variable is in a constraint with \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n can be used to find safe jumps. In particular, when all values for \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n have been tried, this set contains the indexes of the variables whose evaluations allow proving that no solution can be found by visiting the subtree rooted at \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n. As a result, the algorithm can backjump to the highest index in this set.\nThe fact that nodes skipped by backjumping can be ignored when considering a further backjump can be exploited by the following algorithm. When retracting from a leaf node, the set of variables that are in constraint with it is created and \"sent back\" to its parent, or ancestor in case of backjumping. At every internal node, a set of variables is maintained. Every time a set of variables is received from one of its children or descendant, their variables are added to the maintained set. When further backtracking or backjumping from the node, the variable of the node is removed from this set, and the set is sent to the node that is the destination of backtracking or backjumping. This algorithm works because the set maintained in a node collects all variables that are relevant to prove unsatisfiability in the leaves that are descendant of this node. Since sets of variables are only sent when retracing from nodes, the sets collected at nodes skipped by backjumping are automatically ignored.\nA still more refined backjumping algorithm, sometimes able to achieve larger backjumps, is based on checking not only the common presence of two variables in the same constraint but also on whether the constraint actually caused inconsistency. In particular, this algorithm collects one of the violated constraints in every leaf. At every node, the highest index of a variable that is in one of the constraints collected at the leaves is a safe jump.\nWhile the violated constraint chosen in each leaf does not affect the safeness of the resulting jump, choosing constraints of highest possible indices increases the highness of the jump. For this reason, conflict-based backjumping orders constraints in such a way constraints over lower indices variables are preferred over constraints on higher index variables.\nFormally, a constraint \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is preferred over another one \n\n\n\nD\n\n\n{\\displaystyle D}\n\n if the highest index of a variable in \n\n\n\nC\n\n\n{\\displaystyle C}\n\n but not in \n\n\n\nD\n\n\n{\\displaystyle D}\n\n is lower than the highest index of a variable in \n\n\n\nD\n\n\n{\\displaystyle D}\n\n but not in \n\n\n\nC\n\n\n{\\displaystyle C}\n\n. In other words, excluding common variables, the constraint that has the all lower indices is preferred.\nIn a leaf node, the algorithm chooses the lowest index \n\n\n\ni\n\n\n{\\displaystyle i}\n\n such that \n\n\n\n\nx\n\n1\n\n\n,\n\u2026\n,\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{1},\\ldots ,x_{i}}\n\n is inconsistent with the last variable evaluated in the leaf. Among the constraints that are violated in this evaluation, it chooses the most preferred one, and collects all its indices less than \n\n\n\nk\n+\n1\n\n\n{\\displaystyle k+1}\n\n. This way, when the algorithm comes back to the variable \n\n\n\n\nx\n\nk\n+\n1\n\n\n\n\n{\\displaystyle x_{k+1}}\n\n, the lowest collected index identifies a safe jump.\nIn practice, this algorithm is simplified by collecting all indices in a single set, instead of creating a set for every value of \n\n\n\nk\n\n\n{\\displaystyle k}\n\n. In particular, the algorithm collects, in each node, all sets coming from its descendants that have not been skipped by backjumping. When retracting from this node, this set is removed the variable of the node and collected into the destination of backtracking or backjumping.\nConflict-directed backjumping was proposed for Constraint Satisfaction Problems by Patrick Prosser in his seminal 1993 paper.", 
    "dbpedia_url": "http://dbpedia.org/resource/Backjumping", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Backjumping\n"
}