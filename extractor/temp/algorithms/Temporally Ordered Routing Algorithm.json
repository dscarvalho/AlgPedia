{
    "about": "The Temporally Ordered Routing Algorithm (TORA) is an algorithm for routing data across Wireless Mesh Networks or Mobile ad hoc networks.", 
    "name": "Temporally Ordered Routing Algorithm", 
    "classification": "Routing Algorithms", 
    "full_text": "The Temporally Ordered Routing Algorithm (TORA) is an algorithm for routing data across Wireless Mesh Networks or Mobile ad hoc networks.\nIt was developed by Vincent Park and Scott Corson at the University of Maryland and the Naval Research Laboratory. Park has patented his work, and it was licensed by Nova Engineering, who are marketing a wireless router product based on Park's algorithm.\n\n\nThe TORA attempts to achieve a high degree of scalability using a \"flat\", non-hierarchical routing algorithm. In its operation the algorithm attempts to suppress, to the greatest extent possible, the generation of far-reaching control message propagation. In order to achieve this, the TORA does not use a shortest path solution, an approach which is unusual for routing algorithms of this type.\nTORA builds and maintains a Directed Acyclic Graph (DAG) rooted at a destination. No two nodes may have the same height.\nInformation may flow from nodes with higher heights to nodes with lower heights. Information can therefore be thought of as a fluid that may only flow downhill. By maintaining a set of totally ordered heights at all times, TORA achieves loop-free multipath routing, as information cannot 'flow uphill' and so cross back on itself.\nThe key design concepts of TORA is localization of control messages to a very small set of nodes near the occurrence of a topological change. To accomplish this, nodes need to maintain the routing information about adjacent (one hop) nodes. The protocol performs three basic functions:\nDuring the route creation and maintenance phases, nodes use a height metric to establish a directed acyclic graph (DAG) rooted at destination. Thereafter links are assigned based on the relative height metric of neighboring nodes. During the times of mobility the DAG is broken and the route maintenance unit comes into picture to reestablish a DAG routed at the destination.\nTiming is an important factor for TORA because the height metric is dependent on the logical time of the link failure.\nTORA's route erasure phase is essentially involving flooding a broadcast clear packet (CLR) throughout the network to erase invalid routes\nA node which requires a link to a destination because it has no downstream neighbours for it sends a QRY (query) packet and sets its (formerly unset) route-required flag. A QRY packet contains the destination id of the node a route is sought to. The reply to a query is called an update UPD packet. It contains the height quintuple of the neighbour node answering to a query and the destination field which tells for which destination the update was meant for. A node receiving a QRY packet does one of the following:\nA node receiving an update packet updates the height value of its neighbour in the table and takes one of the following actions:\nEach node maintains a neighbour table containing the height of the neighbour nodes. Initially the height of all the nodes is NULL. (This is not zero \"0\" but NULL \"-\") so their quintuple is (-,-,-,-,i). The height of a destination neighbour is (0,0,0,0,dest).\nNode C requires a route, so it broadcasts a QRY.\nThe QRY propagates until it hits a node which has a route to the destination, this node then sends an UPD message.\nThe UPD is also propagated, while node E sends a new UPD.\nRoute maintenance in TORA has five different cases according to the flowchart below:\nExample\nB still has a downstream link to the destination so no action is needed\n\npartition detection and route erasure\n\nhe links D-F and E-F reverse. Node D propagates the reference level.\nNode E now \"reflects\" the reference level. The reference heights of the neighbours are equal with the reflection bit not set. E sets the reflection bit to indicate the reflection and sets its offset to 0. Node C just propagates the new reference level.\nNode A now propagates the reference level.\nWhen a node has detected a partition it sets its height and the heights of all its neighbours for the destination in its table to NULL and it issues a CLR (Clear) packet. The CLR packet consists of the reflected reference level (t,oid,1) and the destination id.\nIf a node receives a CLR packet and the reference level matches its own reference level it sets all heights of the neighbours and its own for the destination to NULL and broadcasts the CLR packet. If the reference level doesn't match its own it just sets the heights of the neighbours its table matching the reflected reference level to NULL and updates their link status", 
    "dbpedia_url": "http://dbpedia.org/resource/Temporally_ordered_routing_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Temporally_ordered_routing_algorithm\n"
}