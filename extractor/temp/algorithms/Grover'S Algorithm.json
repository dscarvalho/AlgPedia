{
    "about": "Grover's algorithm is a quantum algorithm that finds with high probability the unique input to a black box function that produces a particular output value, using just \n\n\n\nO\n(\n\n\nN\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {N}})}\n\n evaluations of the function, where N is the size of the function's domain. It was devised by Lov Grover in 1996.", 
    "name": "Grover'S Algorithm", 
    "classification": "Search Algorithms", 
    "full_text": "Grover's algorithm is a quantum algorithm that finds with high probability the unique input to a black box function that produces a particular output value, using just \n\n\n\nO\n(\n\n\nN\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {N}})}\n\n evaluations of the function, where N is the size of the function's domain. It was devised by Lov Grover in 1996.\nThe analogous problem in classical computation cannot be solved in fewer than \n\n\n\nO\n(\nN\n)\n\n\n{\\displaystyle O(N)}\n\n evaluations (because, in the worst case, the N-th member of the domain might be the correct member). At roughly the same time that Grover published his algorithm, Bennett, Bernstein, Brassard, and Vazirani proved that no quantum solution to the problem can evaluate the function fewer than \n\n\n\nO\n(\n\n\nN\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {N}})}\n\n times, so Grover's algorithm is asymptotically optimal.[1]\nUnlike other quantum algorithms, which may provide exponential speedup over their classical counterparts, Grover's algorithm provides only a quadratic speedup. However, even quadratic speedup is considerable when \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is large. Grover's algorithm could brute-force a 128-bit symmetric cryptographic key in roughly 264 iterations, or a 256-bit key in roughly 2128 iterations. As a result, it is sometimes suggested[citation needed] that symmetric key lengths be doubled to protect against future quantum attacks.\nLike many quantum algorithms, Grover's algorithm is probabilistic in the sense that it gives the correct answer with a probability of less than 1. Though there is technically no upper bound on the number of repetitions that might be needed before the correct answer is obtained, the expected number of repetitions is a constant factor that does not grow with \n\n\n\nN\n\n\n{\\displaystyle N}\n\n.\nGrover's original paper described the algorithm as a database search algorithm, and this description is still common. The database in this analogy is a table of all of the function's outputs, indexed by the corresponding input.\n\n\nAlthough the purpose of Grover's algorithm is usually described as \"searching a database\", it may be more accurate to describe it as \"inverting a function\". Roughly speaking, if we have a function \n\n\n\ny\n=\nf\n(\nx\n)\n\n\n{\\displaystyle y=f(x)}\n\n that can be evaluated on a quantum computer, Grover's algorithm allows us to calculate \n\n\n\nx\n\n\n{\\displaystyle x}\n\n when given \n\n\n\ny\n\n\n{\\displaystyle y}\n\n. Inverting a function is related to the searching of a database because we could come up with a function that produces one particular value of \n\n\n\ny\n\n\n{\\displaystyle y}\n\n (\"true\", for instance) if \n\n\n\nx\n\n\n{\\displaystyle x}\n\n matches a desired entry in a database, and another value of \n\n\n\ny\n\n\n{\\displaystyle y}\n\n (\"false\") for other values of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n.\nGrover's algorithm can also be used for estimating the mean and median of a set of numbers, and for solving the collision problem. The algorithm can be further optimized if there is more than one matching entry and the number of matches is known beforehand. Grover's algorithm can be used to crack passwords as well.\nConsider an unsorted database with N entries. The algorithm requires an N-dimensional state space H, which can be supplied by n = log2\u00a0N qubits. Consider the problem of determining the index of the database entry that satisfies some search criterion. Let f be the function that maps database entries to 0 or 1, where f(x) = 1 if and only if x satisfies the search criterion (x = \u03c9). We are provided with (quantum black box) access to a subroutine in the form of a unitary operator U\u03c9 that acts as follows:\nAn alternative definition of U\u03c9 may be encountered assuming the presence of an ancillary qubit system (like in the quantum circuit depicted below). The operation then represents a conditional inversion (NOT gate) conditioned by the value of f(x) on the main system:\nor briefly,\nThis is a natural way to realize a binary operation using the method of uncomputation. Note that if the ancillary qubit is prepared in the state \n\n\n\n\n|\n\n\u2212\n\u27e9\n=\n\n\n1\n\n2\n\n\n\n\n\n(\n\n\n\n|\n\n0\n\u27e9\n\u2212\n\n|\n\n1\n\u27e9\n\n\n)\n\n\n=\nH\n\n|\n\n1\n\u27e9\n\n\n{\\displaystyle |-\\rangle ={\\frac {1}{\\sqrt {2}}}{\\big (}|0\\rangle -|1\\rangle {\\big )}=H|1\\rangle }\n\n, the effective operation of this controlled NOT gate becomes equivalent to the original form, leaving the ancillary system disentangled from the main system:\nIn either setting, our goal is to identify the index \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n.\nThe steps of Grover's algorithm are given as follows. Let \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n denote the uniform superposition over all states\nThen the operator\nis known as the Grover diffusion operator.\nHere is the algorithm:\nA preliminary observation, in parallel with our definition\nis that \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n can be expressed in an alternate way:\nTo prove this it suffices to check how \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n acts on basis states:\nThe following computations show what happens in the first iteration:\nIt is worth noting the special case of N = 4 with a single marked state. This has \n\n\n\n\nU\n\ns\n\n\n\nU\n\nw\n\n\n\n|\n\ns\n\u27e9\n=\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle U_{s}U_{w}|s\\rangle =|\\omega \\rangle }\n\n, meaning that in a single application of the Grover iterator the marked state is returned.\nAfter application of the operators \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n and \n\n\n\n\nU\n\ns\n\n\n\n\n{\\displaystyle U_{s}}\n\n, the square amplitude of the queried element has increased from \n\n\n\n\n\n|\n\u27e8\n\u03c9\n\n|\n\ns\n\u27e9\n|\n\n\n2\n\n\n=\n\n\n\n1\nN\n\n\n\n\n\n{\\displaystyle \\left|\\langle \\omega |s\\rangle \\right|^{2}={\\tfrac {1}{N}}}\n\n to \n\n\n\n\n\n|\n\u27e8\n\u03c9\n\n|\n\n\nU\n\ns\n\n\n\nU\n\n\u03c9\n\n\n\n|\n\ns\n\u27e9\n|\n\n\n2\n\n\n=\n\n\n\n\n(\n3\nN\n\u2212\n4\n\n)\n\n2\n\n\n\n\nN\n\n3\n\n\n\n\n\n\n\n{\\displaystyle \\left|\\langle \\omega |U_{s}U_{\\omega }|s\\rangle \\right|^{2}={\\tfrac {(3N-4)^{2}}{N^{3}}}}\n\n.\nGrover's algorithm requires a \"quantum oracle\" operator \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n, which can recognize solutions to the search problem and give them a negative sign. In order to keep the search algorithm general, we will leave the inner workings of the oracle as a black box, but will explain how the sign is flipped. The oracle contains a function \n\n\n\nf\n\n\n{\\displaystyle f}\n\n that returns \n\n\n\nf\n(\nx\n)\n=\n1\n\n\n{\\displaystyle f(x)=1}\n\n if \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n is a solution to the search problem and \n\n\n\nf\n(\nx\n)\n=\n0\n\n\n{\\displaystyle f(x)=0}\n\n otherwise. The oracle is a unitary operator operating on two qubits:\nwhere \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n is the index qubit and \n\n\n\n\n|\n\nq\n\u27e9\n\n\n{\\displaystyle |q\\rangle }\n\n is the oracle qubit.\nAs usual, \n\n\n\n\u2295\n\n\n{\\displaystyle \\oplus }\n\n denotes addition modulo 2. The operation flips the oracle qubit if \n\n\n\nf\n(\nx\n)\n=\n1\n\n\n{\\displaystyle f(x)=1}\n\n and leaves it unchanged otherwise. In Grover's algorithm we want to flip the sign of the state \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n if it labels a solution. This is achieved by setting the oracle qubit in the state \n\n\n\n(\n\n|\n\n0\n\u27e9\n\u2212\n\n|\n\n1\n\u27e9\n)\n\n/\n\n\n\n2\n\n\n\n\n{\\displaystyle (|0\\rangle -|1\\rangle )/{\\sqrt {2}}}\n\n, which is flipped to \n\n\n\n(\n\n|\n\n1\n\u27e9\n\u2212\n\n|\n\n0\n\u27e9\n)\n\n/\n\n\n\n2\n\n\n\n\n{\\displaystyle (|1\\rangle -|0\\rangle )/{\\sqrt {2}}}\n\n if \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n is a solution:\nWe regard \n\n\n\n\n|\n\nx\n\u27e9\n\n\n{\\displaystyle |x\\rangle }\n\n as flipped, thus the oracle qubit is not changed, so by convention the oracle qubits are usually not mentioned in the specification of Grover's algorithm. Thus the operation of the oracle \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n is simply written as\nConsider the plane spanned by \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n and \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n; equivalently, the plane spanned by \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n and the perpendicular ket \n\n\n\n\n\n|\n\n\ns\n\u2032\n\n\u27e9\n=\n\n\n1\n\nN\n\u2212\n1\n\n\n\n\n\u2211\n\nx\n\u2260\n\u03c9\n\n\n\n|\n\nx\n\u27e9\n\n\n\n{\\displaystyle \\textstyle |s'\\rangle ={\\frac {1}{\\sqrt {N-1}}}\\sum _{x\\neq \\omega }|x\\rangle }\n\n. We will consider the first iteration, acting on the initial ket \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n. Since \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n is one of the basis vectors in \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n the overlap is\nIn geometric terms, the angle \n\n\n\n\u03b8\n\n/\n\n2\n\n\n{\\displaystyle \\theta /2}\n\n between \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n and \n\n\n\n\n|\n\n\ns\n\u2032\n\n\u27e9\n\n\n{\\displaystyle |s'\\rangle }\n\n is given by\nThe operator \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n is a reflection at the hyperplane orthogonal to \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n for vectors in the plane spanned by \n\n\n\n\n|\n\n\ns\n\u2032\n\n\u27e9\n\n\n{\\displaystyle |s'\\rangle }\n\n and \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n, i.e. it acts as a reflection across \n\n\n\n\n|\n\n\ns\n\u2032\n\n\u27e9\n\n\n{\\displaystyle |s'\\rangle }\n\n. The operator \n\n\n\n\nU\n\ns\n\n\n\n\n{\\displaystyle U_{s}}\n\n is a reflection through \n\n\n\n\n|\n\ns\n\u27e9\n\n\n{\\displaystyle |s\\rangle }\n\n. Therefore, the state vector remains in the plane spanned by \n\n\n\n\n|\n\n\ns\n\u2032\n\n\u27e9\n\n\n{\\displaystyle |s'\\rangle }\n\n and \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n after each application of the operators \n\n\n\n\nU\n\ns\n\n\n\n\n{\\displaystyle U_{s}}\n\n and \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n, and it is straightforward to check that the operator \n\n\n\n\nU\n\ns\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{s}U_{\\omega }}\n\n of each Grover iteration step rotates the state vector by an angle of \n\n\n\n\u03b8\n=\n2\narcsin\n\u2061\n\n\n\n1\n\nN\n\n\n\n\n\n\n{\\displaystyle \\theta =2\\arcsin {\\tfrac {1}{\\sqrt {N}}}}\n\n.\nWe need to stop when the state vector passes close to \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n; after this, subsequent iterations rotate the state vector away from \n\n\n\n\n|\n\n\u03c9\n\u27e9\n\n\n{\\displaystyle |\\omega \\rangle }\n\n, reducing the probability of obtaining the correct answer. The exact probability of measuring the correct answer is\nwhere r is the (integer) number of Grover iterations. The earliest time that we get a near-optimal measurement is therefore \n\n\n\nr\n\u2248\n\u03c0\n\n\nN\n\n\n\n/\n\n4\n\n\n{\\displaystyle r\\approx \\pi {\\sqrt {N}}/4}\n\n.\nTo complete the algebraic analysis, we need to find out what happens when we repeatedly apply \n\n\n\n\nU\n\ns\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{s}U_{\\omega }}\n\n. A natural way to do this is by eigenvalue analysis of a matrix. Notice that during the entire computation, the state of the algorithm is a linear combination of \n\n\n\ns\n\n\n{\\displaystyle s}\n\n and \n\n\n\n\u03c9\n\n\n{\\displaystyle \\omega }\n\n. We can write the action of \n\n\n\n\nU\n\ns\n\n\n\n\n{\\displaystyle U_{s}}\n\n and \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n in the space spanned by \n\n\n\n{\n\n|\n\ns\n\u27e9\n,\n\n|\n\n\u03c9\n\u27e9\n}\n\n\n{\\displaystyle \\{|s\\rangle ,|\\omega \\rangle \\}}\n\n as:\nSo in the basis \n\n\n\n{\n\n|\n\n\u03c9\n\u27e9\n,\n\n|\n\ns\n\u27e9\n}\n\n\n{\\displaystyle \\{|\\omega \\rangle ,|s\\rangle \\}}\n\n (which is neither orthogonal nor a basis of the whole space) the action \n\n\n\n\nU\n\ns\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{s}U_{\\omega }}\n\n of applying \n\n\n\n\nU\n\n\u03c9\n\n\n\n\n{\\displaystyle U_{\\omega }}\n\n followed by \n\n\n\n\nU\n\ns\n\n\n\n\n{\\displaystyle U_{s}}\n\n is given by the matrix\nThis matrix happens to have a very convenient Jordan form. If we define \n\n\n\nt\n=\narcsin\n\u2061\n(\n1\n\n/\n\n\n\nN\n\n\n)\n\n\n{\\displaystyle t=\\arcsin(1/{\\sqrt {N}})}\n\n, it is\nIt follows that r-th power of the matrix (corresponding to r iterations) is\nUsing this form, we can use trigonometric identities to compute the probability of observing \u03c9 after r iterations mentioned in the previous section,\nAlternatively, one might reasonably imagine that a near-optimal time to distinguish would be when the angles 2rt and \u22122rt are as far apart as possible, which corresponds to \n\n\n\n2\nr\nt\n\u2248\n\u03c0\n\n/\n\n2\n\n\n{\\displaystyle 2rt\\approx \\pi /2}\n\n, or \n\n\n\nr\n=\n\u03c0\n\n/\n\n4\nt\n=\n\u03c0\n\n/\n\n4\narcsin\n\u2061\n(\n1\n\n/\n\n\n\nN\n\n\n)\n\u2248\n\u03c0\n\n\nN\n\n\n\n/\n\n4\n\n\n{\\displaystyle r=\\pi /4t=\\pi /4\\arcsin(1/{\\sqrt {N}})\\approx \\pi {\\sqrt {N}}/4}\n\n. Then the system is in state\nA short calculation now shows that the observation yields the correct answer \u03c9 with error O(1/N).\nIf, instead of 1 matching entry, there are k matching entries, the same algorithm works, but the number of iterations must be \u03c0(N/k)1/2/4 instead of \u03c0N1/2/4. There are several ways to handle the case if k is unknown. For example, one could run Grover's algorithm several times, with\niterations. For any k, one of the iterations will find a matching entry with a sufficiently high probability. The total number of iterations is at most\nwhich is still O(N1/2). It can be shown that this can be improved. If the number of marked items is k, where k is unknown, there is an algorithm that finds the solution in \n\n\n\n\n\nN\n\n/\n\nk\n\n\n\n\n{\\displaystyle {\\sqrt {N/k}}}\n\n queries. This fact is used in order to solve the collision problem.[2][3]\nA modification of Grover's algorithm called quantum partial search was described by Grover and Radhakrishnan in 2004.[4] In partial search, one is not interested in finding the exact address of the target item, only the first few digits of the address. Equivalently, we can think of \"chunking\" the search space into blocks, and then asking \"in which block is the target item?\". In many applications, such a search yields enough information if the target address contains the information wanted. For instance, to use the example given by L. K. Grover, if one has a list of students organized by class rank, we may only be interested in whether a student is in the lower 25%, 25\u201350%, 50\u201375% or 75\u2013100% percentile.\nTo describe partial search, we consider a database separated into \n\n\n\nK\n\n\n{\\displaystyle K}\n\n blocks, each of size \n\n\n\nb\n=\nN\n\n/\n\nK\n\n\n{\\displaystyle b=N/K}\n\n. Obviously, the partial search problem is easier. Consider the approach we would take classically \u2013 we pick one block at random, and then perform a normal search through the rest of the blocks (in set theory language, the complement). If we don't find the target, then we know it's in the block we didn't search. The average number of iterations drops from \n\n\n\nN\n\n/\n\n2\n\n\n{\\displaystyle N/2}\n\n to \n\n\n\n(\nN\n\u2212\nb\n)\n\n/\n\n2\n\n\n{\\displaystyle (N-b)/2}\n\n.\nGrover's algorithm requires \n\n\n\n\u03c0\n\n/\n\n4\n\n\nN\n\n\n\n\n{\\displaystyle \\pi /4{\\sqrt {N}}}\n\n iterations. Partial search will be faster by a numerical factor that depends on the number of blocks \n\n\n\nK\n\n\n{\\displaystyle K}\n\n. Partial search uses \n\n\n\n\nn\n\n1\n\n\n\n\n{\\displaystyle n_{1}}\n\n global iterations and \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n_{2}}\n\n local iterations. The global Grover operator is designated \n\n\n\n\nG\n\n1\n\n\n\n\n{\\displaystyle G_{1}}\n\n and the local Grover operator is designated \n\n\n\n\nG\n\n2\n\n\n\n\n{\\displaystyle G_{2}}\n\n.\nThe global Grover operator acts on the blocks. Essentially, it is given as follows:\nThe optimal values of \n\n\n\n\nj\n\n1\n\n\n\n\n{\\displaystyle j_{1}}\n\n and \n\n\n\n\nj\n\n2\n\n\n\n\n{\\displaystyle j_{2}}\n\n are discussed in the paper by Grover and Radhakrishnan. One might also wonder what happens if one applies successive partial searches at different levels of \"resolution\". This idea was studied in detail by Korepin and Xu, who called it binary quantum search. They proved that it is not in fact any faster than performing a single partial search.\nIt is known that Grover's algorithm is optimal. That is, any algorithm that accesses the database only by using the operator U\u03c9 must apply U\u03c9 at least as many times as Grover's algorithm.[1] This result is important in understanding the limits of quantum computation.\nIf the Grover's search problem was solvable with logc N applications of U\u03c9, that would imply that NP is contained in BQP, by transforming problems in NP into Grover-type search problems. The optimality of Grover's algorithm suggests (but does not prove) that NP is not contained in BQP.\nThe number of iterations for k matching entries, \u03c0(N/k)1/2/4, is also optimal.[2]\nWhen applications of Grover's algorithm are considered, it should be emphasized that the database is not represented explicitly. Instead, an oracle is invoked to evaluate an item by its index. Reading a full data-base item by item and converting it into such a representation may take a lot longer than Grover's search. To account for such effects, Grover's algorithm can be viewed as solving an equation or satisfying a constraint. In such applications, the oracle is a way to check the constraint and is not related to the search algorithm. This separation usually prevents algorithmic optimizations, whereas conventional search algorithms often rely on such optimizations and avoid exhaustive search. These and other considerations about using Grover's algorithm are discussed in a paper by Viamontes, Markov and Hayes.[5]", 
    "dbpedia_url": "http://dbpedia.org/resource/Grover's_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Grover's_algorithm\n"
}