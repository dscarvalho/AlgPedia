{
    "about": "In computer science, the median of medians algorithm is a selection algorithm based on the quickselect algorithm, and is optimal, having worst-case linear time complexity for selecting the kth largest element. The algorithm finds an approximate median in linear time\u2014this is the key step\u2014which is then used as a pivot in quickselect. In other words, it uses an (asymptotically) optimal approximate median-selection algorithm to build an (asymptotically) optimal general selection algorithm.", 
    "name": "Median Of Medians", 
    "classification": "Selection Algorithms", 
    "full_text": "In computer science, the median of medians algorithm is a selection algorithm based on the quickselect algorithm, and is optimal, having worst-case linear time complexity for selecting the kth largest element. The algorithm finds an approximate median in linear time\u2014this is the key step\u2014which is then used as a pivot in quickselect. In other words, it uses an (asymptotically) optimal approximate median-selection algorithm to build an (asymptotically) optimal general selection algorithm.\nThe approximate median-selection algorithm can also be used as a pivot strategy in quicksort, yielding an optimal algorithm, with worst-case complexity O(n\u00a0log\u00a0n). Although this approach optimizes quite well, it is typically outperformed in practice by instead choosing random pivots, which has average linear time for selection and average log-linear time for sorting, and avoids the overhead of computing the pivot. Median of medians is used in the hybrid introselect algorithm as a fallback, to ensure worst-case linear performance: introselect starts with quickselect, to obtain good average performance, and then falls back to median of medians if progress is too slow.\nThe algorithm was published in Blum et al. (1973), and thus is sometimes called BFPRT after the last names of the authors. In the original paper the algorithm was referred to as PICK, referring to quickselect as \"FIND\".\n\n\nQuickselect is linear-time on average, but it can require quadratic time with poor pivot choices. This is because quickselect is a divide and conquer algorithm, with each step taking O(n) time in the size of the remaining search set. If the search set decreases exponentially quickly in size (by a fixed proportion), this yields a geometric series times the O(n) factor of a single step, and thus linear overall time. However, if the search set decreases slowly in size, such as linearly (by a fixed number of elements, in the worst case only reducing by one element each time), then a linear sum of linear steps yields quadratic overall time (formally, triangular numbers grow quadratically). For example, the worst case occurs when pivoting on the smallest element at each step, such as applying quickselect for the maximum element to already sorted data and taking the first element as pivot each time.\nIf one instead consistently chooses \"good\" pivots, this is avoided and one always gets linear performance even in the worst case. A \"good\" pivot is one for which we can establish that a constant proportion of elements fall both below and above it, as then the search set decreases at least by a constant proportion at each step, hence exponentially quickly, and the overall time remains linear. The median is a good pivot \u2013 the best for sorting, and the best overall choice for selection \u2013 decreasing the search set by half at each step. Thus if one can compute the median in linear time, this only adds linear time to each step, and thus the overall complexity of the algorithm remains linear.\nThe median-of-medians algorithm does not actually compute the exact median, but computes an approximate median, namely a point that is guaranteed to be between the 30th and 70th percentiles (in the middle 4 deciles). Thus the search set decreases by a fixed proportion at each step, namely at least 30% (so at most 70% left). Lastly, the overhead of computing the pivot consists of recursing in a set of size 20% the size of the original search set, plus a linear factor, so at linear cost at each step, the problem is reduced to 90% (20% and 70%) the original size, which is a fixed proportion smaller, and thus by induction the overall complexity is linear in size.\nAs stated before, median-of-medians is used as a pivot selection strategy in the quickselect algorithm, which in pseudocode looks as follows:\nAs in quickselect, there is a subprocedure called partition that can, in linear time, group a list (ranging from indices left to right) into two parts, those less than a certain element, and those greater than or equal to the element. Here is pseudocode that performs a partition about the element list[pivotIndex]:\nSubroutine pivot is the actual median-of-medians algorithm. It divides its input (a list of length n) into groups of at most five elements, computes the median of each of those groups using some subroutine, then recursively computes the true median of the n/5 medians found in the previous step:[1]\nThe partition5 subroutine selects the median of a group of at most five elements; an easy way to implement this is insertion sort.[1] Note that pivot calls select; this is an instance of mutual recursion.\nOf the n/5 groups, half the number of groups(\u00bd\u00d7n/5=n/10) have their median less than the pivot(Median of Medians). Also, another half the number of groups(again, \u00bd\u00d7n/5=n/10) have their median greater than the pivot. In each of the n/10 groups with median less than the pivot, there are two elements that are smaller than their respective medians, which are smaller than the pivot. Thus, each of the n/10 groups have at least 3 elements that are smaller than the pivot. Similarly, in each of the n/10 groups with median greater than the pivot, there are two elements that are greater than their respective medians, which are greater than the pivot. Thus, each of the n/10 groups have at least 3 elements that are greater than the pivot. Hence, the pivot is less than 3(n/10) elements and greater than another 3(n/10) elements. Thus the chosen median splits the elements somewhere between 30%/70% and 70%/30%, which assures worst-case linear behavior of the algorithm. To visualize:\n(red = \"(one of the two possible) median of medians\", gray = \"number < red\", white = \"number > red\")\n5-tuples are shown here sorted by median, for clarity. Sorting the tuples is not necessary because we only need the median for use as pivot element.\nNote that all elements above/left of the red (30% of the 100 elements) are less, and all elements below/right of the red (another 30% of the 100 elements) are greater.\nThe median-calculating recursive call does not exceed worst-case linear behavior because the list of medians is 20% of the size of the list, while the other recursive call recurses on at most 70% of the list. Let T(n) be the time it takes to run a median-of-medians Quickselect algorithm on an array of size n. Then we know this time is:\nwhere\nFrom this, using induction one can easily show that\nThe key step is reducing the problem to selecting in two lists whose total length is shorter than the original list, plus a linear factor for the reduction step. This allows a simple induction to show that the overall running time is linear.\nThe specific choice of groups of five elements is explained as follows. Firstly, computing median of an odd list is faster and simpler; while one could use an even list, this requires taking the average of the two middle elements, which is slower than simply selecting the single exact middle element. Secondly, five is the smallest odd number such that median of medians works. With groups of only three elements, the resulting list of medians to search in is length n/3, and reduces the list to recurse into to length \n\n\n\n\n\n2\n3\n\n\nn\n\n\n{\\displaystyle {\\frac {2}{3}}n}\n\n, since it is greater than 1/2 \u00d7 2/3 = 1/3 of the elements and less than 1/2 \u00d7 2/3 = 1/3 of the elements. Thus this still leaves n elements to search in, not reducing the problem sufficiently. The individual lists are shorter, however, and one can bound the resulting complexity by the Akra\u2013Bazzi method, but it does not prove linearity.\nConversely, one may instead group by g = seven, nine, or more elements, and this does work. This reduces the size of the list of medians to n/g, and the size of the list to recurse into asymptotes at 3n/4 (75%), as the quadrants in the above table approximate 25%, as the size of the overlapping lines decreases proportionally. This reduces the scaling factor from 10 asymptotically to 4, but accordingly raises the c term for the partitioning work. Finding the median of a larger group takes longer, but is a constant factor (depending only on g), and thus does not change the overall performance as n grows.\nIf one instead groups the other way, say dividing the n element list into 5 lists, computing the median of each, and then computing the median of these \u2013 i.e., grouping by a constant fraction, not a constant number \u2013 one does not as clearly reduce the problem, since it requires computing 5 medians, each in a list of n/5 elements, and then recursing on a list of length at most 7n/10. As with grouping by 3, the individual lists are shorter, but the overall length is no shorter \u2013 in fact longer \u2013 and thus one can only prove superlinear bounds. Grouping into a square of \n\n\n\n\n\nn\n\n\n\n\n{\\displaystyle {\\sqrt {n}}}\n\n lists of length \n\n\n\n\n\nn\n\n\n\n\n{\\displaystyle {\\sqrt {n}}}\n\n is similarly complicated.", 
    "dbpedia_url": "http://dbpedia.org/resource/Median_of_medians", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Median_of_medians\n"
}