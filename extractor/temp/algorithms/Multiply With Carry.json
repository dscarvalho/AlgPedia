{
    "about": "In computer science, multiply-with-carry (MWC) is a method invented by George Marsaglia for generating sequences of random integers based on an initial set from two to many thousands of randomly chosen seed values. The main advantages of the MWC method are that it invokes simple computer integer arithmetic and leads to very fast generation of sequences of random numbers with immense periods, ranging from around 260 to 22000000.", 
    "classification": "Pseudorandom Number Generators", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Multiply-with-carry\n", 
    "full_text": "In computer science, multiply-with-carry (MWC) is a method invented by George Marsaglia for generating sequences of random integers based on an initial set from two to many thousands of randomly chosen seed values. The main advantages of the MWC method are that it invokes simple computer integer arithmetic and leads to very fast generation of sequences of random numbers with immense periods, ranging from around 260 to 22000000.\nAs with all pseudorandom number generators, the resulting sequences are functions of the supplied seed values.\n\n\nA MWC sequence is based on arithmetic modulo a base b, usually b = 232, because arithmetic modulo of that b is automatic in most computers. However, sometimes a base such as b = 232\u00a0\u2212\u00a01 is used, because arithmetic for modulus 232\u00a0\u2212\u00a01 requires only a simple adjustment from that for 232, and theory for MWC sequences based on modulus 232 has some nagging difficulties avoided by using b = 232\u00a0\u2212\u00a01.\nIn its most common form, a lag-r MWC generator requires a base b, a multiplier a, and a set of r+1 random seed values, consisting of r residues of b,\nand an initial carry cr\u22121 < a.\nThe lag-r MWC sequence is then a sequence of pairs xn,\u00a0cn determined by\nand the MWC generator output is the sequence of x's,\nThe period of a lag-r MWC generator is the order of b in the multiplicative group of numbers modulo abr\u00a0\u2212\u00a01. It is customary to choose a's so that p = abr\u00a0\u2212\u00a01 is a prime for which the order of b can be determined. Because 2 is a quadratic residue of numbers of the form 8k\u00b11, b = 232 cannot be a primitive root of p = abr\u00a0\u2212\u00a01. Therefore there are no MWC generators for base 232 that have the maximum possible period, one of the difficulties that use of b = 232\u00a0\u2212\u00a01 overcomes.\nA theoretical problem with MWC generators, pointed out by Couture and l'Ecuyer (1997) is that the most significant bits are slightly biased; complementary-multiply-with-carry generators do not share this problem: \"We shall see that, for the complementary MWC, each bit of the output value is fair, that is, the two binary digits will appear equally often in a full period, a property not shared by MWC generators.\" They do not appear to elaborate further as to the extent of the bias. Complementary-multiply-with-carry generators also require slightly more computation time per iteration, so there is a tradeoff to evaluate depending on implementation requirements.\nLinear congruential generators are implemented as\nbecause most arithmetic processors are able to put the multiplier a and the current x in 32-bit registers, form the 64-bit product in adjoining registers, and take the lower 32 bits as the product, that is, form\nAdding the 32-bit c to that lower half then provides (ax+c) mod 232. If a mod 8 is 3 or 5 and c is odd, the resulting base 232 congruential sequence will have period 232.\nA lag-1 multiply-with-carry generator allows us to make the period nearly 263 by using those same computer operations, except that this time the top half of the 64-bit product is used rather than ignored after the 64 bits are formed. It is used as a new carry value c rather than the fixed carry value of the standard congruential sequence: Get ax+c in 64-bits, then form a new c as the top half of those 64 bits, and the new x as the bottom half.\nWith multiplier a specified, each pair of input values x, c is converted to a new pair,\nIf x and c are not both zero, then the period of the resulting multiply-with-carry sequence will be the order of b = 232 in the multiplicative group of residues modulo ab\u00a0\u2212\u00a01, that is, the smallest n such that bn = 1 mod (ab\u00a0\u2212\u00a01). If we choose an a of 28 to 31 bits such that ab\u22121 is a \"safe prime\", that is both ab\u00a0\u2212\u00a01 and ab/2\u00a0\u2212\u00a01 are prime, then the period will be ab/2\u00a0\u2212\u00a01, approaching 263, which in practice may be an acceptably large subset of the number of possible 32-bit pairs (x, c).\nFollowing are some maximal values of a for computer applications which satisfy the above safe prime condition:\nHowever, as being a safe prime does not affect the randomness of the sequence, one may instead simply choose a such that the order of b is ab/2\u00a0\u2212\u00a01. The following are again maximum values of a of various sizes.\nHere is a comparison of congruential and MWC sequences for the simple case of arithmetic modulo 10; here the \"registers\" are a single digit, adjoining registers are two digits:\nStarting with \n\n\n\n\nx\n\n0\n\n\n=\n1\n\n\n{\\displaystyle x_{0}=1}\n\n, the congruential sequence\nhas this sequence of adjoining registers:\nand the output sequence of x's, (the rightmost register), has period 4:\nStarting with \n\n\n\n\nx\n\n0\n\n\n=\n1\n,\n\nc\n\n0\n\n\n=\n3\n\n\n{\\displaystyle x_{0}=1,c_{0}=3}\n\n, the MWC sequence\nhas this sequence of adjoining registers\nwith output sequence of x's having period 22:\nNotice that if those repeated segments of x values are put in reverse order starting from a \n\n\n\n\nx\n\n22\nn\n+\n20\n\n\n\n\n{\\displaystyle x_{22n+20}}\n\n,\nwe get the expansion j/(ab\u22121) with a=7, b=10, j=31:\nThis is true in general: The sequence of x's produced by a lag-r MWC generator:\nwhen put in reverse order, will be the base-b expansion of a rational j/(abr\u00a0\u2212\u00a01) for some 0 < j < abr.\nAlso notice that if, starting with \n\n\n\n\nx\n\n0\n\n\n=\n34\n\n\n{\\displaystyle x_{0}=34}\n\n, we generate the ordinary congruential sequence\nwe get the period 22 sequence\nand that sequence, reduced mod 10, is\nthe same sequence of x's resulting from the MWC sequence.\nThis is true in general, (but apparently only for lag-1 MWC sequences):\nGiven initial values \n\n\n\n\nx\n\n0\n\n\n,\n\nc\n\n0\n\n\n\n\n{\\displaystyle x_{0},c_{0}}\n\n, the sequence \n\n\n\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\u2026\n\n\n{\\displaystyle x_{1},x_{2},\\ldots }\n\n resulting from the lag-1 MWC sequence\nis exactly the congruential sequence yn = ayn\u00a0\u2212\u00a01 mod(ab\u00a0\u2212\u00a01), reduced modulo b.\nChoice of initial value y0 merely rotates the cycle of x's.\nEstablishing the period of a lag-r MWC generator usually entails choosing multiplier a so that p=abr\u00a0\u2212\u00a01 is prime. If p is a safe prime, then the order of b will be p\u00a0\u2212\u00a01 or (p\u00a0\u2212\u00a01)/2. Otherwise, it is likely that p\u00a0\u2212\u00a01 will have to be factored in order to find the order of b mod p, and p = abr\u00a0\u2212\u00a01 may be difficult to factor.\nBut a prime of the form p = abr\u00a0+\u00a01 will make p\u22121 easy to factor, so a version of multiply-with-carry that involves the order of b for a prime p = abr\u00a0+\u00a01 would reduce considerably the computational number theory required to establish the period of a MWC sequence.\nFortunately, a slight modification of the MWC procedure leads to primes of the form abr\u00a0+\u00a01. The new procedure is called complementary-multiply-with-carry (CMWC),\nand the setup is the same as that for lag-r MWC: multiplier a, base b, r\u00a0+\u00a01 seeds\nThere is a slight change in the generation of a new pair (x, c): \n\n\n\n\nx\n\nn\n\n\n=\n(\nb\n\u2212\n1\n)\n\u2212\n(\na\n\nx\n\nn\n\u2212\nr\n\n\n+\n\nc\n\nn\n\u2212\n1\n\n\n)\n\n\nmod\n\n\n\n\nb\n,\n\u00a0\n\nc\n\nn\n\n\n=\n\n\u230a\n\n\n\na\n\nx\n\nn\n\u2212\nr\n\n\n+\n\nc\n\nn\n\u2212\n1\n\n\n\nb\n\n\n\u230b\n\n.\n\n\n{\\displaystyle x_{n}=(b-1)-(ax_{n-r}+c_{n-1})\\,{\\bmod {\\,}}b,\\ c_{n}=\\left\\lfloor {\\frac {ax_{n-r}+c_{n-1}}{b}}\\right\\rfloor .}\n\n\nThat is, take the complement, (b\u22121)\u2212x, when forming the new x.\nThe resulting sequence of x's produced by the CMWC RNG will have period the order of b in the multiplicative group of residues modulo abr+1, and the output x's, in reverse order, will form the base b expansion of j/(abr+1) for some 0<j<abr.\nUse of lag-r CMWC makes it much easier to find periods for r's as large as 512, 1024, 2048, etc. (Making r a power of 2 makes it slightly easier (and faster) to access elements in the array containing the r most recent x's.)\nSome examples: With b=232, the period of the lag-1024 CMWC\nwill be a\n\n\n\n\u22c5\n\n\n{\\displaystyle \\cdot }\n\n232762, about 109867 for these three as: 109111 or 108798 or 108517.\nWith b = 232 and a = 3636507990, p = ab1359\u00a0\u2212\u00a01 is a safe prime, so the MWC sequence based on that a has period 3636507990\n\n\n\n\u22c5\n\n\n{\\displaystyle \\cdot }\n\n243487 \n\n\n\n\u2248\n\n\n{\\displaystyle \\approx }\n\n1013101.\nWith b = 232, a CMWC RNG with near record period may be based on the prime p = 15455296b42658\u00a0+\u00a01. The order of b for that prime is 241489*21365056, about 10410928.\nThe following is an implementation of the CMWC algorithm in the C programming language. Also, included in the program is a sample initialization function. In this implementation the base is 232\u22121 and lag r=4096. The period of the resulting generator is about \n\n\n\n\n2\n\n131104\n\n\n\n\n{\\displaystyle 2^{131104}}\n\n.\nBecause of simplicity, speed, quality (it passes statistical tests very well) and astonishing period, CMWC is known to be used in game development, particularly in modern roguelike games. It is informally known as the Mother of All PRNGs. In libtcod, CMWC4096 replaced MT19937 as the default PRNG.[1]", 
    "name": "Multiply With Carry"
}