{
    "about": "Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to insertion sort.[1] It can be practical if the input is usually in sorted order but may occasionally have some out-of-order elements nearly in position.", 
    "name": "Bubble Sort", 
    "classification": "Sorting Algorithms", 
    "full_text": "Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to insertion sort.[1] It can be practical if the input is usually in sorted order but may occasionally have some out-of-order elements nearly in position.\n\n\nBubble sort has worst-case and average complexity both \u041e(n2), where n is the number of items being sorted. There exist many sorting algorithms with substantially better worst-case or average complexity of O(n\u00a0log\u00a0n). Even other \u041e(n2) sorting algorithms, such as insertion sort, tend to have better performance than bubble sort. Therefore, bubble sort is not a practical sorting algorithm when n is large.\nThe only significant advantage that bubble sort has over most other implementations, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted efficiently is built into the algorithm. When the list is already sorted (best-case), the complexity of bubble sort is only O(n). By contrast, most other algorithms, even those with better average-case complexity, perform their entire sorting process on the set and thus are more complex. However, not only does insertion sort have this mechanism too, but it also performs better on a list that is substantially sorted (having a small number of inversions).\nBubble sort should be avoided in the case of large collections. It will not be efficient in the case of a reverse-ordered collection.\nThe distance and direction that elements must move during the sort determine bubble sort's performance because elements move in different directions at different speeds. An element that must move toward the end of the list can move quickly because it can take part in successive swaps. For example, the largest element in the list will win every swap, so it moves to its sorted position on the first pass even if it starts near the beginning. On the other hand, an element that must move toward the beginning of the list cannot move faster than one step per pass, so elements move toward the beginning very slowly. If the smallest element is at the end of the list, it will take n\u22121 passes to move it to the beginning. This has led to these types of elements being named rabbits and turtles, respectively, after the characters in Aesop's fable of The Tortoise and the Hare.\nVarious efforts have been made to eliminate turtles to improve upon the speed of bubble sort. Cocktail sort is a bi-directional bubble sort that goes from beginning to end, and then reverses itself, going end to beginning. It can move turtles fairly well, but it retains O(n2) worst-case complexity. Comb sort compares elements separated by large gaps, and can move turtles extremely quickly before proceeding to smaller and smaller gaps to smooth out the list. Its average speed is comparable to faster algorithms like quicksort.\nLet us take the array of numbers \"5 1 4 2 8\", and sort the array from lowest number to greatest number using bubble sort. In each step, elements written in bold are being compared. Three passes will be required.\n( 5 1 4 2 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.\n( 1 5 4 2 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 4 5 2 8 ), Swap since 5 > 4\n( 1 4 5 2 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 4 2 5 8 ), Swap since 5 > 2\n( 1 4 2 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.\n( 1 4 2 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 4 2 5 8 )\n( 1 4 2 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 ), Swap since 4 > 2\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\nNow, the array is already sorted, but the algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \n\n\n\n\u2192\n\n\n{\\displaystyle \\to }\n\n ( 1 2 4 5 8 )\nThe algorithm can be expressed as (0-based array):\nThe bubble sort algorithm can be easily optimized by observing that the n-th pass finds the n-th largest element and puts it into its final place. So, the inner loop can avoid looking at the last n \u2212 1 items when running for the n-th time:\nMore generally, it can happen that more than one element is placed in their final position on a single pass. In particular, after every pass, all elements after the last swap are sorted, and do not need to be checked again. This allows us to skip over a lot of the elements, resulting in about a worst case 50% improvement in comparison count (though no improvement in swap counts), and adds very little complexity because the new code subsumes the \"swapped\" variable:\nTo accomplish this in pseudocode we write the following:\nAlternate modifications, such as the cocktail shaker sort attempt to improve on the bubble sort performance while keeping the same idea of repeatedly comparing and swapping adjacent items.\nAlthough bubble sort is one of the simplest sorting algorithms to understand and implement, its O(n2) complexity means that its efficiency decreases dramatically on lists of more than a small number of elements. Even among simple O(n2) sorting algorithms, algorithms like insertion sort are usually considerably more efficient.\nDue to its simplicity, bubble sort is often used to introduce the concept of an algorithm, or a sorting algorithm, to introductory computer science students. However, some researchers such as Owen Astrachan have gone to great lengths to disparage bubble sort and its continued popularity in computer science education, recommending that it no longer even be taught.[2]\nThe Jargon File, which famously calls bogosort \"the archetypical [sic] perversely awful algorithm\", also calls bubble sort \"the generic bad algorithm\".[3] Donald Knuth, in his famous book The Art of Computer Programming, concluded that \"the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems\", some of which he then discusses.[1]\nBubble sort is asymptotically equivalent in running time to insertion sort in the worst case, but the two algorithms differ greatly in the number of swaps necessary. Experimental results such as those of Astrachan have also shown that insertion sort performs considerably better even on random lists. For these reasons many modern algorithm textbooks avoid using the bubble sort algorithm in favor of insertion sort.\nBubble sort also interacts poorly with modern CPU hardware. It produces at least twice as many writes as insertion sort, twice as many cache misses, and asymptotically more branch mispredictions.[citation needed] Experiments by Astrachan sorting strings in Java show bubble sort to be roughly one-fifth as fast as an insertion sort and 70% as fast as a selection sort.[2]\nIn computer graphics bubble sort is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to the x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines. Bubble sort is a stable sort algorithm, like insertion sort.\nBubble sort has been occasionally referred to as a \"sinking sort\".[4]\nFor example, in Donald Knuth's The Art of Computer Programming, Volume 3: Sorting and Searching he states in section 5.2.1 'Sorting by Insertion', that [the value] \"settles to its proper level\" and that this method of sorting has sometimes been called the sifting or sinking technique.[clarification needed]\nThis debate is perpetuated by the ease with which one may consider this algorithm from two different but equally valid perspectives:", 
    "dbpedia_url": "http://dbpedia.org/resource/Bubble_sort", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Bubble_sort\n"
}