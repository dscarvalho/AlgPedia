{
    "about": "Bidirectional search is a graph search algorithm that finds a shortest path from an initial vertex to a goal vertex in a directed graph. It runs two simultaneous searches: one forward from the initial state, and one backward from the goal, stopping when the two meet in the middle. The reason for this approach is that in many cases it is faster: for instance, in a simplified model of search problem complexity in which both searches expand a tree with branching factor b, and the distance from start to goal is d, each of the two searches has complexity O(bd/2) (in Big O notation), and the sum of these two search times is much less than the O(bd) complexity that would result from a single search from the beginning to the goal.", 
    "name": "Bidirectional Search", 
    "classification": "Graph Algorithms", 
    "full_text": "Bidirectional search is a graph search algorithm that finds a shortest path from an initial vertex to a goal vertex in a directed graph. It runs two simultaneous searches: one forward from the initial state, and one backward from the goal, stopping when the two meet in the middle. The reason for this approach is that in many cases it is faster: for instance, in a simplified model of search problem complexity in which both searches expand a tree with branching factor b, and the distance from start to goal is d, each of the two searches has complexity O(bd/2) (in Big O notation), and the sum of these two search times is much less than the O(bd) complexity that would result from a single search from the beginning to the goal.\nAs in A* search, bi-directional search can be guided by a heuristic estimate of the remaining distance to the goal (in the forward tree) or from the start (in the backward tree).\nIra Pohl\u00a0(1971) was the first one to design and implement a bi-directional heuristic search algorithm. Andrew Goldberg and others explained the correct termination conditions for the bidirectional version of Dijkstra\u2019s Algorithm.[1]\n\n\nA Bidirectional Heuristic Search is a state space search from some state \n\n\n\ns\n\n\n{\\displaystyle s}\n\n to another state \n\n\n\nt\n\n\n{\\displaystyle t}\n\n, searching from \n\n\n\ns\n\n\n{\\displaystyle s}\n\n to \n\n\n\nt\n\n\n{\\displaystyle t}\n\n and from \n\n\n\nt\n\n\n{\\displaystyle t}\n\n to \n\n\n\ns\n\n\n{\\displaystyle s}\n\n simultaneously. It returns a valid list of operators that if applied to \n\n\n\ns\n\n\n{\\displaystyle s}\n\n will give us \n\n\n\nt\n\n\n{\\displaystyle t}\n\n.\nWhile it may seem as though the operators have to be invertible for the reverse search, it is only necessary to be able to find, given any node \n\n\n\nn\n\n\n{\\displaystyle n}\n\n, the set of parent nodes of \n\n\n\nn\n\n\n{\\displaystyle n}\n\n such that there exists some valid operator from each of the parent nodes to \n\n\n\nn\n\n\n{\\displaystyle n}\n\n. This has often been likened to a one-way street in the route-finding domain: it is not necessary to be able to travel down both directions, but it is necessary when standing at the end of the street to determine the beginning of the street as a possible route.\nSimilarly, for those edges that have inverse arcs (i.e. arcs going in both directions) it is not necessary that each direction be of equal cost. The reverse search will always use the inverse cost (i.e. the cost of the arc in the forward direction). More formally, if \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is a node with parent \n\n\n\np\n\n\n{\\displaystyle p}\n\n, then \n\n\n\n\nk\n\n1\n\n\n(\np\n,\nn\n)\n=\n\nk\n\n2\n\n\n(\nn\n,\np\n)\n\n\n{\\displaystyle k_{1}(p,n)=k_{2}(n,p)}\n\n, defined as being the cost from \n\n\n\np\n\n\n{\\displaystyle p}\n\n to \n\n\n\nn\n\n\n{\\displaystyle n}\n\n.(Auer Kaindl 2004)\nBidirectional algorithms can be broadly split into three categories: Front-to-Front, Front-to-Back (or Front-to-End), and Perimeter Search (Kaindl Kainz 1997). These differ by the function used to calculate the heuristic.\nFront-to-Back algorithms calculate the \n\n\n\nh\n\n\n{\\displaystyle h}\n\n value of a node \n\n\n\nn\n\n\n{\\displaystyle n}\n\n by using the heuristic estimate between \n\n\n\nn\n\n\n{\\displaystyle n}\n\n and the root of the opposite search tree, \n\n\n\ns\n\n\n{\\displaystyle s}\n\n or \n\n\n\nt\n\n\n{\\displaystyle t}\n\n.\nFront-to-Back is the most actively researched of the three categories. The current best algorithm (at least in the Fifteen puzzle domain) is the BiMAX-BS*F algorithm, created by Auer and Kaindl (Auer, Kaindl 2004).\nFront-to-Front algorithms calculate the h value of a node n by using the heuristic estimate between n and some subset of \n\n\n\n\n\nO\nP\nE\nN\n\n\n\nd\n\u2032\n\n\n\n\n\n{\\displaystyle \\mathrm {OPEN} _{d'}}\n\n. The canonical example is that of the BHFFA (Bidirectional Heuristic Front-to-Front Algorithm),[2] where the h function is defined as the minimum of all heuristic estimates between the current node and the nodes on the opposing front. Or, formally:\nwhere \n\n\n\nH\n(\nn\n,\no\n)\n\n\n{\\displaystyle H(n,o)}\n\n returns an admissible (i.e. not overestimating) heuristic estimate of the distance between nodes n and o.\nFront-to-Front suffers from being excessively computationally demanding. Every time a node n is put into the open list, its \n\n\n\nf\n=\ng\n+\nh\n\n\n{\\displaystyle f=g+h}\n\n value must be calculated. This involves calculating a heuristic estimate from n to every node in the opposing OPEN set, as described above. The OPEN sets increase in size exponentially for all domains with b > 1.", 
    "dbpedia_url": "http://dbpedia.org/resource/Bidirectional_search", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Bidirectional_search\n"
}