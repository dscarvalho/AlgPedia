{
    "about": "In coding theory, the Forney algorithm (or Forney's algorithm) calculates the error values at known error locations. It is used as one of the steps in decoding BCH codes and Reed\u2013Solomon codes (a subclass of BCH codes). George David Forney, Jr. developed the algorithm.[1]", 
    "name": "Forney Algorithm", 
    "classification": "Error Detection And Correction", 
    "full_text": "In coding theory, the Forney algorithm (or Forney's algorithm) calculates the error values at known error locations. It is used as one of the steps in decoding BCH codes and Reed\u2013Solomon codes (a subclass of BCH codes). George David Forney, Jr. developed the algorithm.[1]\n\n\nCode words look like polynomials. By design, the generator polynomial has consecutive roots \u03b1c, \u03b1c+1, ..., \u03b1c+d\u22122.\nSyndromes\nError location polynomial[2]\nThe zeros of \u039b(x) are X1\u22121, ..., X\u03bd\u22121. The zeros are the reciprocals of the error locations \n\n\n\n\nX\n\nj\n\n\n=\n\n\u03b1\n\n\ni\n\nj\n\n\n\n\n\n\n{\\displaystyle X_{j}=\\alpha ^{i_{j}}}\n\n.\nOnce the error locations are known, the next step is to determine the error values at those locations. The error values are then used to correct the received values at those locations to recover the original codeword.\nIn the more general case, the error weights ej can be determined by solving the linear system\nHowever, there is a more efficient method known as the Forney algorithm, which is based on Lagrange interpolation. First calculate the error evaluator polynomial[3]\nWhere S(x) is the partial syndrome polynomial:[4]\nThen evaluate the error values:[3]\nThe value c is often called the \"first consecutive root\" or \"fcr\". Some codes select c = 1, so the expression simplifies to:\n\u039b'(x) is the formal derivative of the error locator polynomial \u039b(x):[3]\nIn the above expression, note that i is an integer, and \u03bbi would be an element of the finite field. The operator \u00b7 represents ordinary multiplication (repeated addition in the finite field) and not the finite field's multiplication operator.\n\nLagrange interpolation\nGill (n.d., pp.\u00a052\u201354) gives a derivation of the Forney algorithm.\nDefine the erasure locator polynomial\nWhere the erasure locations are given by ji. Apply the procedure described above, substituting \u0393 for \u039b.\nIf both errors and erasures are present, use the error-and-erasure locator polynomial", 
    "dbpedia_url": "http://dbpedia.org/resource/Forney_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Forney_algorithm\n"
}