{
    "about": "Double hashing is a computer programming technique used in hash tables to resolve hash collisions, in cases when two different values to be searched for produce the same hash key. It is a popular collision-resolution technique in open-addressed hash tables. Double hashing is implemented in many popular libraries.", 
    "name": "Double Hashing", 
    "classification": "Search Algorithms", 
    "full_text": "Double hashing is a computer programming technique used in hash tables to resolve hash collisions, in cases when two different values to be searched for produce the same hash key. It is a popular collision-resolution technique in open-addressed hash tables. Double hashing is implemented in many popular libraries.\nLike linear probing, it uses one hash value as a starting point and then repeatedly steps forward an interval until the desired value is located, an empty location is reached, or the entire table has been searched; but this interval is decided using a second, independent hash function (hence the name double hashing). Unlike linear probing and quadratic probing, the interval depends on the data, so that even values mapping to the same location have different bucket sequences; this minimizes repeated collisions and the effects of clustering.\nGiven two randomly, uniformly, and independently selected hash functions \n\n\n\n\nh\n\n1\n\n\n\n\n{\\displaystyle h_{1}}\n\n and \n\n\n\n\nh\n\n2\n\n\n\n\n{\\displaystyle h_{2}}\n\n, the ith location in the bucket sequence for value k in a hash table \n\n\n\nT\n\n\n{\\displaystyle T}\n\n is: \n\n\n\nh\n(\ni\n,\nk\n)\n=\n(\n\nh\n\n1\n\n\n(\nk\n)\n+\ni\n\u22c5\n\nh\n\n2\n\n\n(\nk\n)\n)\n\nmod\n\n\n\n|\n\nT\n\n|\n\n.\n\n\n{\\displaystyle h(i,k)=(h_{1}(k)+i\\cdot h_{2}(k))\\mod |T|.}\n\n Generally, \n\n\n\n\nh\n\n1\n\n\n\n\n{\\displaystyle h_{1}}\n\n and \n\n\n\n\nh\n\n2\n\n\n\n\n{\\displaystyle h_{2}}\n\n are selected from a set of universal hash functions.\n\n\nDouble hashing with open addressing is a classical data structure on a table \n\n\n\nT\n\n\n{\\displaystyle T}\n\n. Let \n\n\n\nn\n\n\n{\\displaystyle n}\n\n be the number of elements stored in \n\n\n\nT\n\n\n{\\displaystyle T}\n\n, then \n\n\n\nT\n\n\n{\\displaystyle T}\n\n's load factor is \n\n\n\n\u03b1\n=\n\n\nn\n\n\n|\n\nT\n\n|\n\n\n\n\n\n\n{\\displaystyle \\alpha ={\\frac {n}{|T|}}}\n\n.\nDouble hashing approximates uniform open address hashing. That is, start by randomly, uniformly and independently selecting two universal hash functions \n\n\n\n\nh\n\n1\n\n\n\n\n{\\displaystyle h_{1}}\n\n and \n\n\n\n\nh\n\n2\n\n\n\n\n{\\displaystyle h_{2}}\n\n to build a double hashing table \n\n\n\nT\n\n\n{\\displaystyle T}\n\n.\nAll elements are put in \n\n\n\nT\n\n\n{\\displaystyle T}\n\n by double hashing using \n\n\n\n\nh\n\n1\n\n\n\n\n{\\displaystyle h_{1}}\n\n and \n\n\n\n\nh\n\n2\n\n\n\n\n{\\displaystyle h_{2}}\n\n. Given a key \n\n\n\nk\n\n\n{\\displaystyle k}\n\n, determining the \n\n\n\n(\ni\n+\n1\n)\n\n\n{\\displaystyle (i+1)}\n\n-st hash location is computed by:\n\n\n\n\nh\n(\ni\n,\nk\n)\n=\n(\n\nh\n\n1\n\n\n(\nk\n)\n+\ni\n\u22c5\n\nh\n\n2\n\n\n(\nk\n)\n)\n\nmod\n\n\n\n|\n\nT\n\n|\n\n.\n\n\n{\\displaystyle h(i,k)=(h_{1}(k)+i\\cdot h_{2}(k))\\mod |T|.}\n\n\nLet \n\n\n\nT\n\n\n{\\displaystyle T}\n\n have fixed load factor \n\n\n\n\u03b1\n:\n1\n>\n\u03b1\n>\n0\n\n\n{\\displaystyle \\alpha :1>\\alpha >0}\n\n. Bradford and Katehakis[1] showed the expected number of probes for an unsuccessful search in \n\n\n\nT\n\n\n{\\displaystyle T}\n\n, still using these initially chosen hash functions, is \n\n\n\n\n\n1\n\n1\n\u2212\n\u03b1\n\n\n\n\n\n{\\displaystyle {\\frac {1}{1-\\alpha }}}\n\n regardless of the distribution of the inputs. More precisely, these two uniformly, randomly and independently chosen hash functions are chosen from a set of universal hash functions where pair-wise independence suffices.\nPrevious results include: Guibas and Szemer\u00e9di[2] showed \n\n\n\n\n\n1\n\n1\n\u2212\n\u03b1\n\n\n\n\n\n{\\displaystyle {\\frac {1}{1-\\alpha }}}\n\n holds for unsuccessful search for load factors \n\n\n\n\u03b1\n<\n0.319\n\n\n{\\displaystyle \\alpha <0.319}\n\n. Also, Lueker and Molodowitch[3] showed this held assuming ideal randomized functions. Schmidt and Siegel[4] showed this with \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-wise independent and uniform functions (for \n\n\n\nk\n=\nc\nlog\n\u2061\nn\n\n\n{\\displaystyle k=c\\log n}\n\n, and suitable constant \n\n\n\nc\n\n\n{\\displaystyle c}\n\n).\nLinear probing and, to a lesser extent, quadratic probing are able to take advantage of the data cache by accessing locations that are close together. Double hashing has, on average, larger intervals and is not able to achieve this advantage.\nLike all other forms of open addressing, double hashing becomes linear as the hash table approaches maximum capacity. The only solution to this is to rehash to a larger size, as with all other open addressing schemes.\nOn top of that, it is possible for the secondary hash function to evaluate to zero. For example, if we choose k=5 with the following function:\n\n\n\n\n\nh\n\n2\n\n\n(\nk\n)\n=\n5\n\u2212\n(\nk\n\nmod\n\n\n7\n)\n\n\n{\\displaystyle h_{2}(k)=5-(k\\mod 7)}\n\n\nThe resulting sequence will always remain at the initial hash value. One possible solution is to change the secondary hash function to:\n\n\n\n\n\nh\n\n2\n\n\n(\nk\n)\n=\n(\nk\n\nmod\n\n\n7\n)\n+\n1\n\n\n{\\displaystyle h_{2}(k)=(k\\mod 7)+1}\n\n\nThis ensures that the secondary hash function will always be non zero.", 
    "dbpedia_url": "http://dbpedia.org/resource/Double_hashing", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Double_hashing\n"
}