{
    "about": "In mathematics, tables of trigonometric functions are useful in a number of areas. Before the existence of pocket calculators, trigonometric tables were essential for navigation, science and engineering. The calculation of mathematical tables was an important area of study, which led to the development of the first mechanical computing devices.", 
    "name": "Trigonometric Tables", 
    "classification": "Numerical Analysis", 
    "full_text": "In mathematics, tables of trigonometric functions are useful in a number of areas. Before the existence of pocket calculators, trigonometric tables were essential for navigation, science and engineering. The calculation of mathematical tables was an important area of study, which led to the development of the first mechanical computing devices.\nModern computers and pocket calculators now generate trigonometric function values on demand, using special libraries of mathematical code. Often, these libraries use pre-calculated tables internally, and compute the required value by using an appropriate interpolation method. Interpolation of simple look-up tables of trigonometric functions is still used in computer graphics, where only modest accuracy may be required and speed is often paramount.\nAnother important application of trigonometric tables and generation schemes is for fast Fourier transform (FFT) algorithms, where the same trigonometric function values (called twiddle factors) must be evaluated many times in a given transform, especially in the common case where many transforms of the same size are computed. In this case, calling generic library routines every time is unacceptably slow. One option is to call the library routines once, to build up a table of those trigonometric values that will be needed, but this requires significant memory to store the table. The other possibility, since a regular sequence of values is required, is to use a recurrence formula to compute the trigonometric values on the fly. Significant research has been devoted to finding accurate, stable recurrence schemes in order to preserve the accuracy of the FFT (which is very sensitive to trigonometric errors).\n\n\nModern computers and calculators use a variety of techniques to provide trigonometric function values on demand for arbitrary angles (Kantabutra, 1996). One common method, especially on higher-end processors with floating-point units, is to combine a polynomial or rational approximation (such as Chebyshev approximation, best uniform approximation, and Pad\u00e9 approximation, and typically for higher or variable precisions, Taylor and Laurent series) with range reduction and a table lookup \u2014 they first look up the closest angle in a small table, and then use the polynomial to compute the correction. Maintaining precision while performing such interpolation is nontrivial, however; and methods like Gal's accurate tables, Cody and Waite reduction, and Payne and Hanek reduction algorithms can be used for this purpose. On simpler devices that lack a hardware multiplier, there is an algorithm called CORDIC (as well as related techniques) that is more efficient, since it uses only shifts and additions. All of these methods are commonly implemented in hardware for performance reasons.\nThe particular polynomial used to approximate a trig function is generated ahead of time using some approximation of a minimax approximation algorithm.\nFor very high precision calculations, when series-expansion convergence becomes too slow, trigonometric functions can be approximated by the arithmetic-geometric mean, which itself approximates the trigonometric function by the (complex) elliptic integral (Brent, 1976).\nTrigonometric functions of angles that are rational multiples of 2\u03c0 are algebraic numbers. The values for a/b\u00b72\u03c0 can be found by applying de Moivre's identity for n = a to a bth root of unity, which is also a root of the polynomial xb - 1 in the complex plane. For example, the cosine and sine of 2\u03c0\u00a0\u22c5\u00a05/37 are the real and imaginary parts, respectively, of the 5th power of the 37th root of unity cos(2\u03c0/37) + sin(2\u03c0/37)i, which is a root of the degree-37 polynomial x37\u00a0\u2212\u00a01. For this case, a root-finding algorithm such as Newton's method is much simpler than the arithmetic-geometric mean algorithms above while converging at a similar asymptotic rate. The latter algorithms are required for transcendental trigonometric constants, however.\nHistorically, the earliest method by which trigonometric tables were computed, and probably the most common until the advent of computers, was to repeatedly apply the half-angle and angle-addition trigonometric identities starting from a known value (such as sin(\u03c0/2)\u00a0=\u00a01, cos(\u03c0/2)\u00a0=\u00a00). This method was used by the ancient astronomer Ptolemy, who derived them in the Almagest, a treatise on astronomy. In modern form, the identities he derived are stated as follows (with signs determined by the quadrant in which x lies;\nThese were used to construct Ptolemy's table of chords, which was applied to astronomical problems.\nVarious other permutations on these identities are possible: for example, some early trigonometric tables used not sine and cosine, but sine and versine).\nA quick, but inaccurate, algorithm for calculating a table of N approximations sn for sin(2\u03c0n/N) and cn for cos(2\u03c0n/N) is:\nfor n = 0,...,N\u00a0\u2212\u00a01, where d = 2\u03c0/N.\nThis is simply the Euler method for integrating the differential equation:\nwith initial conditions s(0) = 0 and c(0) = 1, whose analytical solution is s = sin(t) and c = cos(t).\nUnfortunately, this is not a useful algorithm for generating sine tables because it has a significant error, proportional to 1/N.\nFor example, for N = 256 the maximum error in the sine values is ~0.061 (s202 = \u22121.0368 instead of \u22120.9757). For N = 1024, the maximum error in the sine values is ~0.015 (s803 = \u22120.99321 instead of \u22120.97832), about 4 times smaller. If the sine and cosine values obtained were to be plotted, this algorithm would draw a logarithmic spiral rather than a circle.\nA simple recurrence formula to generate trigonometric tables is based on Euler's formula and the relation:\nThis leads to the following recurrence to compute trigonometric values sn and cn as above:\nfor n = 0, ..., N\u00a0\u2212\u00a01, where wr = cos(2\u03c0/N) and wi = sin(2\u03c0/N). These two starting trigonometric values are usually computed using existing library functions (but could also be found e.g. by employing Newton's method in the complex plane to solve for the primitive root of zN\u00a0\u2212\u00a01).\nThis method would produce an exact table in exact arithmetic, but has errors in finite-precision floating-point arithmetic. In fact, the errors grow as O(\u03b5\u00a0N) (in both the worst and average cases), where \u03b5 is the floating-point precision.\nA significant improvement is to use the following modification to the above, a trick (due to Singleton, 1967) often used to generate trigonometric values for FFT implementations:\nwhere \u03b1 = 2\u00a0sin2(\u03c0/N) and \u03b2 = sin(2\u03c0/N). The errors of this method are much smaller, O(\u03b5\u00a0\u221aN) on average and O(\u03b5\u00a0N) in the worst case, but this is still large enough to substantially degrade the accuracy of FFTs of large sizes.", 
    "dbpedia_url": "http://dbpedia.org/resource/Trigonometric_tables", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Trigonometric_tables\n"
}