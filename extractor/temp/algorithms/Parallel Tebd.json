{
    "about": "The parallel-TEBD is a version of the TEBD algorithm adapted to run on multiple hosts. The task of parallelizing TEBD could be achieved in various ways.", 
    "classification": "Distributed Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Parallel-TEBD\n", 
    "full_text": "The parallel-TEBD is a version of the TEBD algorithm adapted to run on multiple hosts. The task of parallelizing TEBD could be achieved in various ways.\nThis article introduces the conceptual basis of the implementation, using MPI-based pseudo-code for exemplification, while not restricting itself to MPI - the same basic schema could be implemented with the use of home-grown messaging routines.\nThe TEBD algorithm is a good candidate for parallel computing because the exponential operators used to calculate the time-evolution factorize under the Suzuki-Trotter expansion. A detailed presentation of the way TEBD works is given in the main article. Here we concern ourselves only with its parallel implementation.\nFor our purposes, we will use the canonical form of the MPS as introduced by Guifr\u00e9 Vidal in his original papers. Hence, we will write the function of state \n\n\n\n\n|\n\n\u03a8\n\u27e9\n\n\n{\\displaystyle |\\Psi \\rangle }\n\n as:\n\n\n\n\n\n|\n\n\u03a8\n\u27e9\n=\n\n\u2211\n\n\ni\n\n1\n\n\n,\n.\n.\n,\n\ni\n\nN\n\n\n=\n1\n\n\nM\n\n\n\n\u2211\n\n\n\u03b1\n\n1\n\n\n,\n.\n.\n,\n\n\u03b1\n\nN\n\u2212\n1\n\n\n=\n0\n\n\n\u03c7\n\n\n\n\u0393\n\n\n\u03b1\n\n1\n\n\n\n\n[\n1\n]\n\ni\n\n1\n\n\n\n\n\n\u03bb\n\n\n\u03b1\n\n1\n\n\n\n\n[\n1\n]\n\n\n\n\u0393\n\n\n\u03b1\n\n1\n\n\n\n\u03b1\n\n2\n\n\n\n\n[\n2\n]\n\ni\n\n2\n\n\n\n\n\n\u03bb\n\n\n\u03b1\n\n2\n\n\n\n\n[\n2\n]\n\n\n\n\u0393\n\n\n\u03b1\n\n2\n\n\n\n\u03b1\n\n3\n\n\n\n\n[\n3\n]\n\ni\n\n3\n\n\n\n\n\n\u03bb\n\n\n\u03b1\n\n3\n\n\n\n\n[\n3\n]\n\n\n\u22c5\n.\n.\n\u22c5\n\n\u0393\n\n\n\u03b1\n\nN\n\u2212\n2\n\n\n\n\u03b1\n\nN\n\u2212\n1\n\n\n\n\n[\n\nN\n\u2212\n1\n\n]\n\ni\n\nN\n\u2212\n1\n\n\n\n\n\n\u03bb\n\n\n\u03b1\n\nN\n\u2212\n1\n\n\n\n\n[\nN\n\u2212\n1\n]\n\n\n\n\u0393\n\n\n\u03b1\n\nN\n\u2212\n1\n\n\n\n\n[\nN\n]\n\ni\n\nN\n\n\n\n\n\n|\n\n\n\ni\n\n1\n\n\n,\n\ni\n\n2\n\n\n,\n.\n.\n,\n\ni\n\nN\n\u2212\n1\n\n\n,\n\ni\n\nN\n\n\n\n\u27e9\n\n\n{\\displaystyle |\\Psi \\rangle =\\sum \\limits _{i_{1},..,i_{N}=1}^{M}\\sum \\limits _{\\alpha _{1},..,\\alpha _{N-1}=0}^{\\chi }\\Gamma _{\\alpha _{1}}^{[1]i_{1}}\\lambda _{\\alpha _{1}}^{[1]}\\Gamma _{\\alpha _{1}\\alpha _{2}}^{[2]i_{2}}\\lambda _{\\alpha _{2}}^{[2]}\\Gamma _{\\alpha _{2}\\alpha _{3}}^{[3]i_{3}}\\lambda _{\\alpha _{3}}^{[3]}\\cdot ..\\cdot \\Gamma _{\\alpha _{N-2}\\alpha _{N-1}}^{[{N-1}]i_{N-1}}\\lambda _{\\alpha _{N-1}}^{[N-1]}\\Gamma _{\\alpha _{N-1}}^{[N]i_{N}}|{i_{1},i_{2},..,i_{N-1},i_{N}}\\rangle }\n\n\nThis function describes a N-point lattice which we would like to compute on P different compute nodes. Let us suppose, for the sake of simplicity, that N=2k*P, where k is an integer number. This means that if we distribute the lattice points evenly among the compute nodes (the easiest scenario), an even number of lattice points 2k is assigned to each compute node. Indexing the lattice points from 0 to N-1 (note that the usual indexing is 1,N) and the compute nodes from 0 to P-1, the lattice points would be distributed as follows among the nodes:\nUsing the canonical form of the MPS, we define \n\n\n\n\n\u03bb\n\n\n\u03b1\n\nl\n\n\n\n\n[\nl\n]\n\n\n\n\n{\\displaystyle \\lambda _{\\alpha _{l}}^{[l]}}\n\n as \"belonging\" to node m if m*2k \u2264 l \u2264 (m+1)*2k - 1. Similarly, we use the index l to assign the \n\n\n\n\n\n\u0393\n\n\u2032\n\ns\n\n\n{\\displaystyle {\\Gamma }'s}\n\n to a certain lattice point. This means that \n\n\n\n\n\u0393\n\n\n\u03b1\n\n0\n\n\n\n\n[\n0\n]\n\ni\n\n0\n\n\n\n\n\n\n{\\displaystyle \\Gamma _{\\alpha _{0}}^{[0]i_{0}}}\n\n and \n\n\n\n\n\u0393\n\n\n\u03b1\n\nl\n\u2212\n1\n\n\n\n\u03b1\n\nl\n\n\n\n\n[\nl\n]\n\ni\n\nl\n\n\n\n\n,\nl\n=\n1\n,\n2\nk\n\u2212\n1\n\n\n{\\displaystyle \\Gamma _{\\alpha _{l-1}\\alpha _{l}}^{[l]i_{l}},l=1,2k-1}\n\n, belong to NODE 0, as well as \n\n\n\n\n\u03bb\n\n\n\u03b1\n\nl\n\n\n\n\n[\nl\n]\n\n\n,\nl\n=\n0\n,\n2\nk\n\u2212\n2\n\n\n{\\displaystyle \\lambda _{\\alpha _{l}}^{[l]},l=0,2k-2}\n\n. A parallel version of TEBD implies that the computing nodes need to exchange information among them. The information exchanged will be the MPS matrices and singular values lying at the border between neighbouring compute nodes. How this is done, it will be explained below.\nThe TEBD algorithm divides the exponential operator performing the time-evolution into a sequence of two-qubit gates of the form:\n\n\n\n\n\ne\n\n\n\n\n\u2212\ni\n\u03b4\n\n\u210f\n\n\n\nH\n\nk\n,\nk\n+\n1\n\n\n\n\n.\n\n\n{\\displaystyle e^{{\\frac {-i\\delta }{\\hbar }}H_{k,k+1}}.}\n\n\nSetting the Planck constant to 1, the time-evolution is expressed as:\n\n\n\n\n\n|\n\n\u03a8\n(\nt\n+\n\u03b4\n)\n\u27e9\n=\n\ne\n\n\n\u2212\ni\n\u03b4\n\n\n\nF\n2\n\n\n\n\n\ne\n\n\n\u2212\ni\n\u03b4\n\nG\n\n\n\ne\n\n\n\u2212\ni\n\u03b4\n\n\n\nF\n2\n\n\n\n\n\n|\n\n\u03a8\n(\nt\n)\n\u27e9\n,\n\n\n{\\displaystyle |\\Psi (t+\\delta )\\rangle =e^{{-i\\delta }{\\frac {F}{2}}}e^{{-i\\delta }G}e^{{-i\\delta }{\\frac {F}{2}}}|\\Psi (t)\\rangle ,}\n\n\nwhere H = F + G,\n\n\n\n\nF\n\u2261\n\n\u2211\n\nk\n=\n0\n\n\n\n\nN\n2\n\n\n\u2212\n1\n\n\n(\n\nH\n\n2\nk\n,\n2\nk\n+\n1\n\n\n)\n=\n\n\u2211\n\nk\n=\n0\n\n\n\n\nN\n2\n\n\n\u2212\n1\n\n\n(\n\nF\n\n2\nk\n\n\n)\n,\n\n\n{\\displaystyle F\\equiv \\sum _{k=0}^{{\\frac {N}{2}}-1}(H_{2k,2k+1})=\\sum _{k=0}^{{\\frac {N}{2}}-1}(F_{2k}),}\n\n\n\n\n\n\nG\n\u2261\n\n\u2211\n\nk\n=\n0\n\n\n\n\nN\n2\n\n\n\u2212\n2\n\n\n(\n\nH\n\n2\nk\n+\n1\n,\n2\nk\n+\n2\n\n\n)\n=\n\n\u2211\n\nk\n=\n0\n\n\n\n\nN\n2\n\n\n\u2212\n2\n\n\n(\n\nG\n\n2\nk\n+\n1\n\n\n)\n.\n\n\n{\\displaystyle G\\equiv \\sum _{k=0}^{{\\frac {N}{2}}-2}(H_{2k+1,2k+2})=\\sum _{k=0}^{{\\frac {N}{2}}-2}(G_{2k+1}).}\n\n\nWhat we can explicitly compute in parallel is the sequence of gates \n\n\n\n\ne\n\n\n\u2212\ni\n\n\n\n\u03b4\n2\n\n\n\nF\n\n2\nk\n\n\n\n\n,\n\ne\n\n\n\u2212\ni\n\u03b4\n\n\n\nG\n\n2\nk\n+\n1\n\n\n\n\n\n.\n\n\n{\\displaystyle e^{{-i}{\\frac {\\delta }{2}}F_{2k}},e^{{-i\\delta }{G_{2k+1}}}.}\n\n Each of the compute node can apply most of the two-qubit gates without needing information from its neighbours. The compute nodes need to exchange information only at the borders, where two-qubit gates cross them, or just need information from the other side. We will now consider all three sweeps, two even and one odd and see what information has to be exchanged. Let us see what is happening on node m during the sweeps.\nThe sequence of gates that has to be applied in this sweep is:\n\n\n\n\n\ne\n\n\n\u2212\ni\n\n\n\n\u03b4\n2\n\n\n\nF\n\nm\n\u2217\n2\nk\n\n\n\n\n,\n\ne\n\n\n\u2212\ni\n\n\n\n\u03b4\n2\n\n\n\nF\n\nm\n\u2217\n2\nk\n+\n2\n\n\n\n\n,\n.\n.\n.\n,\n\ne\n\n\n\u2212\ni\n\n\n\n\u03b4\n2\n\n\n\nF\n\n(\nm\n+\n1\n)\n\u2217\n2\nk\n\u2212\n2\n\n\n\n\n\n\n{\\displaystyle e^{{-i}{\\frac {\\delta }{2}}F_{m*2k}},e^{{-i}{\\frac {\\delta }{2}}F_{m*2k+2}},...,e^{{-i}{\\frac {\\delta }{2}}F_{(m+1)*2k-2}}}\n\n\nAlready for computing the first gate, process m needs information from its lowest neighbour, m-1. On the other side, m doesn't need anything from its \"higher\" neighbour, m+1, because it has all the information it needs to apply the last gate. So the best strategy for m is to send a request to m-1, postponing the calculation of the first gate for later, and continue with the calculation of the other gates. What m does is called non-blocking communication. Let's look at this in detail. The tensors involved in the calculation of the first gate are:[1]", 
    "name": "Parallel Tebd"
}