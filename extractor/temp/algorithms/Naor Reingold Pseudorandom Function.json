{
    "about": "In 1997, Moni Naor and Omer Reingold described efficient constructions for various cryptographic primitives in private key as well as public-key cryptography. Their result is the construction of an efficient pseudorandom function. Let p and l be prime numbers with l |p\u22121. Select an element g \u2208 \n\n\n\n\n\n\n\nF\n\n\np\n\n\n\n\n\u2217\n\n\n\n\n{\\displaystyle {\\mathbb {F} _{p}}^{*}}\n\n of multiplicative order l. Then for each n-dimensional vector a = (a1, ..., an)\u2208 \n\n\n\n(\n\n\nF\n\n\nl\n\n\n\n)\n\nn\n\n\n\n\n{\\displaystyle (\\mathbb {F} _{l})^{n}}\n\n they define the function", 
    "classification": "Pseudorandom Number Generators", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Naor-Reingold_Pseudorandom_Function\n", 
    "full_text": "In 1997, Moni Naor and Omer Reingold described efficient constructions for various cryptographic primitives in private key as well as public-key cryptography. Their result is the construction of an efficient pseudorandom function. Let p and l be prime numbers with l |p\u22121. Select an element g \u2208 \n\n\n\n\n\n\n\nF\n\n\np\n\n\n\n\n\u2217\n\n\n\n\n{\\displaystyle {\\mathbb {F} _{p}}^{*}}\n\n of multiplicative order l. Then for each n-dimensional vector a = (a1, ..., an)\u2208 \n\n\n\n(\n\n\nF\n\n\nl\n\n\n\n)\n\nn\n\n\n\n\n{\\displaystyle (\\mathbb {F} _{l})^{n}}\n\n they define the function\nwhere x\u00a0= x1 \u2026 xn is the bit representation of integer x, 0\u00a0\u2264 x \u2264 2n\u22121, with some extra leading zeros if necessary.[1]\n\n\nLet p\u00a0= 7 and l\u00a0= 3; so l |p\u22121. Select g\u00a0= 4 \u2208 \n\n\n\n\n\n\n\nF\n\n\n7\n\n\n\n\n\u2217\n\n\n\n\n{\\displaystyle {\\mathbb {F} _{7}}^{*}}\n\n of multiplicative order 3 (since 43 = 64 \u2261 1 mod\u00a07). For n\u00a0= 3, a\u00a0= (1, 2, 1) and x\u00a0= 5 (the bit representation of 5 is 101), we can compute \n\n\n\n\nf\n\na\n\n\n(\n5\n)\n\n\n{\\displaystyle f_{a}(5)}\n\n as follows:\nThe evaluation of function \n\n\n\n\nf\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{a}(x)}\n\n in the Naor\u2013Reingold construction can be done very efficiently. Computing the value of the function \n\n\n\n\nf\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{a}(x)}\n\n at any given point is comparable with one modular exponentiation and n-modular multiplications. This function can be computed in parallel by threshold circuits of bounded depth and polynomial size.\nThe Naor\u2013Reingold function can be used as the basis of many cryptographic schemes including symmetric encryption, authentication and digital signatures.\nAssume that an attacker sees several outputs of the function, e.g. \n\n\n\n\nf\n\na\n\n\n(\n1\n)\n=\n\ng\n\n\na\n\n1\n\n\n\n\n,\n\nf\n\na\n\n\n(\n2\n)\n=\n\ng\n\n\na\n\n2\n\n\n\n\n,\n\nf\n\na\n\n\n(\n3\n)\n=\n\ng\n\n\na\n\n1\n\n\n\na\n\n2\n\n\n\n\n\n\n{\\displaystyle f_{a}(1)=g^{a_{1}},f_{a}(2)=g^{a_{2}},f_{a}(3)=g^{a_{1}a_{2}}}\n\n, ... \n\n\n\n\nf\n\na\n\n\n(\nk\n)\n=\n\ng\n\n\na\n\n1\n\n\n\nx\n\n1\n\n\n\n\n\na\n\n2\n\n\n\nx\n\n2\n\n\n\n\n.\n.\n.\n\na\n\nn\n\n\n\nx\n\nn\n\n\n\n\n\n\n\n\n{\\displaystyle f_{a}(k)=g^{a_{1}^{x_{1}}a_{2}^{x_{2}}...a_{n}^{x_{n}}}}\n\n and wants to compute \n\n\n\n\nf\n\na\n\n\n(\nk\n+\n1\n)\n\n\n{\\displaystyle f_{a}(k+1)}\n\n. Assume for simplicity that x1 = 0, then the attacker needs to solve the computational Diffie\u2013Hellman (CDH) between \n\n\n\n\nf\n\na\n\n\n(\n1\n)\n=\n\ng\n\n\na\n\n1\n\n\n\n\n\n\n{\\displaystyle f_{a}(1)=g^{a_{1}}}\n\n and \n\n\n\n\nf\n\na\n\n\n(\nk\n)\n=\n\ng\n\n\na\n\n2\n\n\n\nx\n\n2\n\n\n\n\n.\n.\n.\n\na\n\nn\n\n\n\nx\n\nn\n\n\n\n\n\n\n\n\n{\\displaystyle f_{a}(k)=g^{a_{2}^{x_{2}}...a_{n}^{x_{n}}}}\n\n to get \n\n\n\n\nf\n\na\n\n\n(\nk\n+\n1\n)\n=\n\ng\n\n\na\n\n1\n\n\n\na\n\n2\n\n\n\nx\n\n2\n\n\n\n\n\u2026\n\na\n\nn\n\n\n\nx\n\nn\n\n\n\n\n\n\n\n\n{\\displaystyle f_{a}(k+1)=g^{a_{1}a_{2}^{x_{2}}\\dots a_{n}^{x_{n}}}}\n\n. In general, moving from k to k + 1 changes the bit pattern and unless k + 1 is a power of 2 one can split the exponent in \n\n\n\n\nf\n\na\n\n\n(\nk\n+\n1\n)\n\n\n{\\displaystyle f_{a}(k+1)}\n\n so that the computation corresponds to computing the Diffie\u2013Hellman key between two of the earlier results. This attacker wants to predict the next sequence element. Such an attack would be very bad\u2014but it's also possible to fight it off by working in groups with a hard Diffie\u2013Hellman problem (DHP).\nExample: An attacker sees several outputs of the function e.g. \n\n\n\n\nf\n\na\n\n\n(\n5\n)\n=\n\n4\n\n\n1\n\n1\n\n\n\n2\n\n0\n\n\n\n1\n\n1\n\n\n\n\n=\n\n4\n\n1\n\n\n=\n4\n\n\n{\\displaystyle f_{a}(5)=4^{1^{1}2^{0}1^{1}}=4^{1}=4}\n\n, as in the previous example, and \n\n\n\n\nf\n\na\n\n\n(\n1\n)\n=\n\n4\n\n\n1\n\n0\n\n\n\n2\n\n0\n\n\n\n1\n\n1\n\n\n\n\n=\n\n4\n\n1\n\n\n=\n4\n\n\n{\\displaystyle f_{a}(1)=4^{1^{0}2^{0}1^{1}}=4^{1}=4}\n\n. Then, the attacker wants to predict the next sequence element of this function, \n\n\n\n\nf\n\na\n\n\n(\n6\n)\n\n\n{\\displaystyle f_{a}(6)}\n\n. However, the attacker cannot predict the outcome of \n\n\n\n\nf\n\na\n\n\n(\n6\n)\n\n\n{\\displaystyle f_{a}(6)}\n\n from knowing \n\n\n\n\nf\n\na\n\n\n(\n1\n)\n\n\n{\\displaystyle f_{a}(1)}\n\n and \n\n\n\n\nf\n\na\n\n\n(\n5\n)\n\n\n{\\displaystyle f_{a}(5)}\n\n.\nThere are other attacks that would be very bad for a pseudorandom number generator: the user expects to get random numbers from the output, so of course the stream should not be predictable, but even more, it should be indistinguishable from a random string. Let \n\n\n\n\n\n\nA\n\n\n\nf\n\n\n\n\n{\\displaystyle {\\mathcal {A}}^{f}}\n\n denote the algorithm \n\n\n\n\n\nA\n\n\n\n\n{\\displaystyle {\\mathcal {A}}}\n\n with access to an oracle for evaluating the function \n\n\n\n\nf\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{a}(x)}\n\n . Suppose the decisional Diffie\u2013Hellman assumption holds for \n\n\n\n\n\nF\n\n\np\n\n\n\n\n{\\displaystyle \\mathbb {F} _{p}}\n\n, Naor and Reingold show that for every probabilistic polynomial time algorithm \n\n\n\n\n\nA\n\n\n\n\n{\\displaystyle {\\mathcal {A}}}\n\n and sufficiently large n\nThe first probability is taken over the choice of the seed s = (p, g, a) and the second probability is taken over the random distribution induced on p, g by \n\n\n\n\n\nI\n\n\n\n\nG\n\n\n(\nn\n)\n\n\n{\\displaystyle {\\mathcal {I}}{\\mathcal {G}}(n)}\n\n, instance generator, and the random choice of the function \n\n\n\n\nR\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle R_{a}(x)}\n\n among the set of all \n\n\n\n{\n0\n,\n1\n\n}\n\nn\n\n\n\u2192\n\n\nF\n\n\np\n\n\n\n\n{\\displaystyle \\{0,1\\}^{n}\\to \\mathbb {F} _{p}}\n\n functions.[2]\nOne natural measure of how useful a sequence may be for cryptographic purposes is the size of its linear complexity. The linear complexity of an n-element sequence W(x), x = 0,1,2,\u2026,n \u2013 1, over a ring \n\n\n\n\n\nR\n\n\n\n\n{\\displaystyle {\\mathcal {R}}}\n\n is the length l of the shortest linear recurrence relation W(x + l) = Al\u22121 W(x +l\u22121) + \u2026 + A0 W(x), x = 0,1,2,\u2026, n \u2013 l \u22121 with A0, \u2026, Al\u22121 \u2208 \n\n\n\n\n\nR\n\n\n\n\n{\\displaystyle {\\mathcal {R}}}\n\n, which is satisfied by this sequence.\nFor some \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n > 0,n \u2265 (1+ \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n) \n\n\n\nlog\n\u2061\nl\n\n\n{\\displaystyle \\log l}\n\n, for any \n\n\n\n\u03b4\n>\n0\n\n\n{\\displaystyle \\delta >0}\n\n, sufficiently large l, the linear complexity of the sequence \n\n\n\n\nf\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{a}(x)}\n\n,0 \u2264 x \u2264 2n-1, denoted by \n\n\n\n\nL\n\na\n\n\n\n\n{\\displaystyle L_{a}}\n\n satisfies\nfor all except possibly at most \n\n\n\n3\n(\nl\n\u2212\n1\n\n)\n\nn\n\u2212\n\u03b4\n\n\n\n\n{\\displaystyle 3(l-1)^{n-\\delta }}\n\n vectors a \u2208 \n\n\n\n(\n\n\nF\n\n\nl\n\n\n\n)\n\nn\n\n\n\n\n{\\displaystyle (\\mathbb {F} _{l})^{n}}\n\n.[3] The bound of this work has disadvantages, namely it does not apply to the very interesting case \n\n\n\nlog\n\u2061\np\n\u2248\nlog\n\u2061\nn\n\u2248\n\nn\n.\n\n\n\n{\\displaystyle \\log p\\approx \\log n\\approx {n.}}\n\n\nThe statistical distribution of \n\n\n\n\nf\n\na\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{a}(x)}\n\n is exponentially close to uniform distribution for almost all vectors a \u2208 \n\n\n\n(\n\n\nF\n\n\nl\n\n\n\n)\n\nn\n\n\n\n\n{\\displaystyle (\\mathbb {F} _{l})^{n}}\n\n.\nLet \n\n\n\n\n\n\nD\n\n\n\na\n\n\n\n\n{\\displaystyle {\\mathbf {D} }_{a}}\n\n be the discrepancy of the set \n\n\n\n{\n\nf\n\na\n\n\n(\nx\n)\n\n|\n\n0\n\u2264\nx\n\u2264\n\n2\n\nn\n\u2212\n1\n\n\n}\n\n\n{\\displaystyle \\{f_{a}(x)|0\\leq x\\leq 2^{n-1}\\}}\n\n. Thus, if \n\n\n\nn\n=\nlog\n\u2061\np\n\n\n{\\displaystyle n=\\log p}\n\n is the bit length of p then for all vectors a \u2208 \n\n\n\n(\n\n\nF\n\n\nl\n\n\n\n)\n\nn\n\n\n\n\n{\\displaystyle (\\mathbb {F} _{l})^{n}}\n\n the bound \n\n\n\n\n\n\nD\n\n\n\na\n\n\n\u2264\n\u0394\n(\nl\n,\np\n)\n\n\n{\\displaystyle {\\mathbf {D} }_{a}\\leq \\Delta (l,p)}\n\n holds, where\nand\nAlthough this property does not seem to have any immediate cryptographic implications, the inverse fact, namely non uniform distribution, if true would have disastrous consequences for applications of this function.[4]\nThe elliptic curve version of this function is of interest as well. In particular, it may help to improve the cryptographic security of the corresponding system. Let p > 3 be prime and let E be an elliptic curve over \n\n\n\n\n\nF\n\n\np\n\n\n\n\n{\\displaystyle \\mathbb {F} _{p}}\n\n, then each vector a defines a finite sequence in the subgroup \n\n\n\n\u27e8\nG\n\u27e9\n\n\n{\\displaystyle \\langle G\\rangle }\n\n as:\nwhere \n\n\n\nx\n=\n\nx\n\n1\n\n\n\u2026\n\nx\n\nn\n\n\n\n\n{\\displaystyle x=x_{1}\\dots x_{n}}\n\n is the bit representation of integer \n\n\n\nx\n,\n0\n\u2264\nx\n\u2264\n\n2\n\nn\n\u2212\n1\n\n\n\n\n{\\displaystyle x,0\\leq x\\leq 2^{n-1}}\n\n. The Naor\u2013Reingold elliptic curve sequence is defined as\nIf the decisional Diffie\u2013Hellman assumption holds, the index k is not enough to compute \n\n\n\n\nu\n\nk\n\n\n\n\n{\\displaystyle u_{k}}\n\n in polynomial time, even if an attacker performs polynomially many queries to a random oracle.", 
    "name": "Naor Reingold Pseudorandom Function"
}