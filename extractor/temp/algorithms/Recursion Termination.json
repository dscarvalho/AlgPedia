{
    "about": "In computing, recursion termination is when certain conditions are met and a recursive algorithm stops calling itself and begins to return values.[1] This happens only if, with every recursive call, the recursive algorithm changes its state and moves toward the base case. Cases that satisfy the definition, without being defined in terms of that definition, are called base cases. They are small enough to solve directly.[2]", 
    "name": "Recursion Termination", 
    "classification": "Recursion", 
    "full_text": "In computing, recursion termination is when certain conditions are met and a recursive algorithm stops calling itself and begins to return values.[1] This happens only if, with every recursive call, the recursive algorithm changes its state and moves toward the base case. Cases that satisfy the definition, without being defined in terms of that definition, are called base cases. They are small enough to solve directly.[2]\n\n\nThe Fibonacci function(fibonacci(n)), which takes integer n(n >= 0) as input, has three conditions\n1. if n is 0, returns 0.\n2. if n is 1, returns 1.\n3. otherwise, return [fibonacci(n-1) + fibonacci(n-2)]\nThis recursive function terminates if either conditions 1 or 2 are satisfied. We see that the function's recursive call reduces the value of n(by passing n-1 or n-2 in the function) ensuring that n reaches either condition 1 or 2.\nAn example in the programming language C++:[3]\nHere we see that in the recursive call, the number passed in the recursive step is reduced by 1. This again ensures that the number will at some point reduce to 0 which in turn terminates the recursive algorithm.", 
    "dbpedia_url": "http://dbpedia.org/resource/Recursion_termination", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Recursion_termination\n"
}