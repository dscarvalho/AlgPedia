{
    "about": "Shellsort, also known as Shell sort or Shell's method, is an in-place comparison sort. It can be seen as either a generalization of sorting by exchange (bubble sort) or sorting by insertion (insertion sort).[3] The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959.[4][5] The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.", 
    "name": "Shellsort", 
    "classification": "Sorting Algorithms", 
    "full_text": "Shellsort, also known as Shell sort or Shell's method, is an in-place comparison sort. It can be seen as either a generalization of sorting by exchange (bubble sort) or sorting by insertion (insertion sort).[3] The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959.[4][5] The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.\n\n\nShellsort is a generalization of insertion sort that allows the exchange of items that are far apart. The idea is to arrange the list of elements so that, starting anywhere, considering every hth element gives a sorted list. Such a list is said to be h-sorted. Equivalently, it can be thought of as h interleaved lists, each individually sorted.[6] Beginning with large values of h, this rearrangement allows elements to move long distances in the original list, reducing large amounts of disorder quickly, and leaving less work for smaller h-sort steps to do.[7] If the file is then k-sorted for some smaller integer k, then the file remains h-sorted. Following this idea for a decreasing sequence of h values ending in 1 is guaranteed to leave a sorted list in the end.[6]\nAn example run of Shellsort with gaps 5, 3 and 1 is shown below.\nThe first pass, 5-sorting, performs insertion sort on five separate subarrays (a1, a6, a11), (a2, a7, a12), (a3, a8), (a4, a9), (a5, a10). For instance, it changes the subarray (a1, a6, a11) from (62, 17, 25) to (17, 25, 62). The next pass, 3-sorting, performs insertion sort on the three subarrays (a1, a4, a7, a10), (a2, a5, a8, a11), (a3, a6, a9, a12). The last pass, 1-sorting, is an ordinary insertion sort of the entire array (a1,..., a12).\nAs the example illustrates, the subarrays that Shellsort operates on are initially short; later they are longer but almost ordered. In both cases insertion sort works efficiently.\nShellsort is unstable: it may change the relative order of elements with equal values. It is an adaptive sorting algorithm in that it executes faster when the input is partially sorted.\nUsing Marcin Ciura's gap sequence, with an inner insertion sort.\nThe question of deciding which gap sequence to use is difficult. Every gap sequence that contains 1 yields a correct sort; however, the properties of thus obtained versions of Shellsort may be very different.\nThe table below compares most proposed gap sequences published so far. Some of them have decreasing elements that depend on the size of the sorted array (N). Others are increasing infinite sequences, whose elements less than N should be used in reverse order.\nWhen the binary representation of N contains many consecutive zeroes, Shellsort using Shell's original gap sequence makes \u0398(N2) comparisons in the worst case. For instance, this case occurs for N equal to a power of two when elements greater and smaller than the median occupy odd and even positions respectively, since they are compared only in the last pass.\nAlthough it has higher complexity than the O(N\u00a0log\u00a0N) that is optimal for comparison sorts, Pratt's version lends itself to sorting networks and has the same asymptotic gate complexity as Batcher's bitonic sorter.\nGonnet and Baeza-Yates observed that Shellsort makes the fewest comparisons on average when the ratios of successive gaps are roughly equal to 2.2.[13] This is why their sequence with ratio 2.2 and Tokuda's sequence with ratio 2.25 prove efficient. However, it is not known why this is so. Sedgewick recommends to use gaps that have low greatest common divisors or are pairwise coprime.[16]\nWith respect to the average number of comparisons, Ciura's sequence[15] has the best known performance; gaps from 701 were not determined but the sequence can be further extended according to the recursive formula \n\n\n\n\nh\n\nk\n\n\n=\n\u230a\n2.25\n\nh\n\nk\n\u2212\n1\n\n\n\u230b\n\n\n{\\displaystyle h_{k}=\\lfloor 2.25h_{k-1}\\rfloor }\n\n.\nTokuda's sequence, defined by the simple formula \n\n\n\n\nh\n\nk\n\n\n=\n\u2308\n\nh\n\nk\n\n\u2032\n\n\u2309\n\n\n{\\displaystyle h_{k}=\\lceil h'_{k}\\rceil }\n\n, where \n\n\n\n\nh\n\nk\n\n\u2032\n\n=\n2.25\n\nh\n\nk\n\u2212\n1\n\n\u2032\n\n+\n1\n\n\n{\\displaystyle h'_{k}=2.25h'_{k-1}+1}\n\n, \n\n\n\n\nh\n\n1\n\n\u2032\n\n=\n1\n\n\n{\\displaystyle h'_{1}=1}\n\n, can be recommended for practical applications.\nThe following property holds: after h2-sorting of any h1-sorted array, the array remains h1-sorted.[17] Every h1-sorted and h2-sorted array is also (a1h1+a2h2)-sorted, for any nonnegative integers a1 and a2. The worst-case complexity of Shellsort is therefore connected with the Frobenius problem: for given integers h1,..., hn with gcd = 1, the Frobenius number g(h1,..., hn) is the greatest integer that cannot be represented as a1h1+ ... +anhn with nonnegative integer a1,..., an. Using known formulae for Frobenius numbers, we can determine the worst-case complexity of Shellsort for several classes of gap sequences.[18] Proven results are shown in the above table.\nWith respect to the average number of operations, none of proven results concerns a practical gap sequence. For gaps that are powers of two, Espelid computed this average as \n\n\n\n0.5349\nN\n\n\nN\n\n\n\u2212\n0.4387\nN\n\u2212\n0.097\n\n\nN\n\n\n+\nO\n(\n1\n)\n\n\n{\\displaystyle 0.5349N{\\sqrt {N}}-0.4387N-0.097{\\sqrt {N}}+O(1)}\n\n.[19] Knuth determined the average complexity of sorting an N-element array with two gaps (h, 1) to be \n\n\n\n\n\n\n2\n\nN\n\n2\n\n\n\nh\n\n\n+\n\n\n\u03c0\n\nN\n\n3\n\n\nh\n\n\n\n\n{\\displaystyle {\\frac {2N^{2}}{h}}+{\\sqrt {\\pi N^{3}h}}}\n\n.[3] It follows that a two-pass Shellsort with h = \u0398(N1/3) makes on average O(N5/3) comparisons. Yao found the average complexity of a three-pass Shellsort.[20] His result was refined by Janson and Knuth:[21] the average number of comparisons made during a Shellsort with three gaps (ch, cg, 1), where h and g are coprime, is \n\n\n\n\n\n\nN\n\n2\n\n\n\n4\nc\nh\n\n\n\n+\nO\n(\nN\n)\n\n\n{\\displaystyle {\\frac {N^{2}}{4ch}}+O(N)}\n\n in the first pass, \n\n\n\n\n\n1\n\n8\ng\n\n\n\n\n\n\n\u03c0\n\nc\nh\n\n\n\n\n(\nh\n\u2212\n1\n)\n\nN\n\n3\n\n/\n\n2\n\n\n+\nO\n(\nh\nN\n)\n\n\n{\\displaystyle {\\frac {1}{8g}}{\\sqrt {\\frac {\\pi }{ch}}}(h-1)N^{3/2}+O(hN)}\n\n in the second pass and \n\n\n\n\u03c8\n(\nh\n,\ng\n)\nN\n+\n\n\n1\n8\n\n\n\n\n\n\u03c0\nc\n\n\n\n(\nc\n\u2212\n1\n)\n\nN\n\n3\n\n/\n\n2\n\n\n+\nO\n\n(\n(\nc\n\u2212\n1\n)\ng\n\nh\n\n1\n\n/\n\n2\n\n\nN\n)\n\n+\nO\n\n(\n\nc\n\n2\n\n\n\ng\n\n3\n\n\n\nh\n\n2\n\n\n)\n\n\n\n{\\displaystyle \\psi (h,g)N+{\\frac {1}{8}}{\\sqrt {\\frac {\\pi }{c}}}(c-1)N^{3/2}+O\\left((c-1)gh^{1/2}N\\right)+O\\left(c^{2}g^{3}h^{2}\\right)}\n\n in the third pass. \u03c8(h, g) in the last formula is a complicated function asymptotically equal to \n\n\n\n\n\n\n\n\u03c0\nh\n\n128\n\n\n\ng\n+\nO\n\n(\n\ng\n\n\u2212\n1\n\n/\n\n2\n\n\n\nh\n\n1\n\n/\n\n2\n\n\n)\n\n+\nO\n\n(\ng\n\nh\n\n\u2212\n1\n\n/\n\n2\n\n\n)\n\n\n\n{\\displaystyle {\\sqrt {\\frac {\\pi h}{128}}}g+O\\left(g^{-1/2}h^{1/2}\\right)+O\\left(gh^{-1/2}\\right)}\n\n. In particular, when h = \u0398(N7/15) and g = \u0398(N1/5), the average time of sorting is O(N23/15).\nBased on experiments, it is conjectured that Shellsort with Hibbard's gap sequence runs in O(N5/4) average time,[3] and that Gonnet and Baeza-Yates's sequence requires on average 0.41NlnN(ln\u00a0lnN+1/6) element moves.[13] Approximations of the average number of operations formerly put forward for other sequences fail when sorted arrays contain millions of elements.\nThe graph below shows the average number of element comparisons in various variants of Shellsort, divided by the theoretical lower bound, i.e. log2N!, where the sequence 1, 4, 10, 23, 57, 132, 301, 701 has been extended according to the formula \n\n\n\n\nh\n\nk\n\n\n=\n\u230a\n2.25\n\nh\n\nk\n\u2212\n1\n\n\n\u230b\n\n\n{\\displaystyle h_{k}=\\lfloor 2.25h_{k-1}\\rfloor }\n\n.\nApplying the theory of Kolmogorov complexity, Jiang, Li, and Vit\u00e1nyi proved the following lower bounds for the order of the average number of operations in an m-pass Shellsort: \u03a9(mN1+1/m) when m\u2264log2N and \u03a9(mN) when m>log2N.[22] Therefore, Shellsort has prospects of running in an average time that asymptotically grows like NlogN only when using gap sequences whose number of gaps grows in proportion to the logarithm of the array size. It is, however, unknown whether Shellsort can reach this asymptotic order of average-case complexity, which is optimal for comparison sorts.\nThe worst-case complexity of any version of Shellsort is of higher order: Plaxton, Poonen, and Suel showed that it grows at least as rapidly as \u03a9(N(logN/log logN)2).[23]\nShellsort performs more operations and has higher cache miss ratio than quicksort. However, since it can be implemented using little code and does not use the call stack, some implementations of the qsort function in the C standard library targeted at embedded systems use it instead of quicksort. Shellsort is, for example, used in the uClibc library.[24] For similar reasons, an implementation of Shellsort is present in the Linux kernel.[25]\nShellsort can also serve as a sub-algorithm of introspective sort, to sort short subarrays and to prevent a pathological slowdown when the recursion depth exceeds a given limit. This principle is employed, for instance, in the bzip2 compressor.[26]", 
    "dbpedia_url": "http://dbpedia.org/resource/Shellsort", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Shellsort\n"
}