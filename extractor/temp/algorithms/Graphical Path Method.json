{
    "about": "The Graphical Path Method (GPM) is a mathematically based algorithm used in project management for planning, scheduling and resource control. GPM represents logical relationships of dated objects \u2013 such as activities, milestones, and benchmarks \u2013 in a time-scaled network diagram.[1]", 
    "name": "Graphical Path Method", 
    "classification": "Scheduling Algorithms", 
    "full_text": "The Graphical Path Method (GPM) is a mathematically based algorithm used in project management for planning, scheduling and resource control. GPM represents logical relationships of dated objects \u2013 such as activities, milestones, and benchmarks \u2013 in a time-scaled network diagram.[1]\n\n\nThe Graphical Path Method (GPM) (formerly known as the \u2018Graphical Planning Method\u2019) was originally developed from 2004-2006 by Dr. Gui Ponce de Leon, current Chairman of the Project Management Institute College of Scheduling (PMICOS), and was first presented at the PMICOS 2008 annual conference.[2] It was created as an alternative to the Critical Path Method (CPM) and was designed as a graphical tool to encourage an engaging, planning-centric experience for project stakeholders.[1]\nTo create a GPM schedule, users draw and place objects \u2013 such as activities, milestones, and benchmarks \u2013 on a time-scaled canvas. Objects are linked together to establish logical, precedence relationships. These relationships are governed by the Logic Diagramming Method (LDM), a blend of the Arrow Diagramming Method (ADM) and the Precedence Diagramming Method (PDM). In total, LDM permits 12 relationship types to account for all possible dependencies between objects. The resulting web of logically related, dated objects and their relationships forms a network diagram.\nObject relationships form the backbone of a GPM network. They are used to calculate a number of object attributes, including link gap and object buffer, drift, and float. As objects and their relationships are added to or modified in the schedule, GPM continuously re-calculates and updates gap for all links and float for all dated objects. Link gaps are calculated from the dates of two related activities and floats are algorithmically calculated from gaps.[1]\nThe Critical Path Method (CPM) is the traditional mathematical algorithm used for schedule logic computation. GPM utilizes a different algorithm than CPM and thus produces its own distinct schedule attributes.\nIn a GPM network, objects not residing on the critical path, and thus having float, are permitted to be scheduled anywhere within their float range and are not forced to their early or late dates. This action in a GPM network is referred to as scheduling objects on planned dates. This is contrary to CPM logic, where a forward and backward pass algorithm defaults objects to their early dates, unless additional logic is introduced to constrain an object to a later date. GPM logic permits the as-planned scheduling framework because logic links retain their own attributes, namely gap.[3]\nGPM allows users to place an object anywhere in between its early and late dates; consequently, link gap emerges between objects. Link gap permits object scheduling on planned dates while retaining the Total Float value of the network. The link gap values become the basis for calculating floats in a GPM network. The as-planned framework introduces additional schedule values of buffer, drift, and float.\nCPM calculates available slippage in Free Float and Total Float. CPM measures Free Float by how much a predecessor activity may be delayed without causing a delay to its nearest successor activity. In GPM this is called buffer and it is calculated as the minimum of the link gaps for all logic ties to successor objects.\nBecause activities in a CPM network default to their early dates, CPM does not calculate activity movement in the opposite direction \u2013 namely, how much an activity may backslide or extend to earlier dates without affecting predecessor activities. GPM permits activity placement between early and late dates and thus introduces this value of \u201cpreceding float\u201d as drift. GPM calculates drift as the minimum of the link gaps for all logic ties to predecessor objects.\nCPM Total Float is measured by how much an activity may be delayed without delaying the project completion date. In GPM this is called float, with the distinction that it is measured with respect to planned dates rather than early dates. Thus, the GPM value of float plus drift is analogous to Total Float in CPM.[1]\nCPM relies on activity dates as the basis for float calculations, where total float is determined by the difference between late finish dates and early finish dates. This requires a standby calculation engine to perform a forward pass and a backward pass of the entire network when planning ceases or when an interim calculation is necessary for further planning. The result is that planning and scheduling are separate processes performed in sequential order.\nIn GPM\u2019s time-scaled framework, dates are innate, real-time attributes of network objects. This permits GPM to use the link gap between two objects for the float calculation and thus schedule data and object attributes are continuously updated in real-time, as changes to the schedule are committed. This allows for dynamic feedback from the schedule; users are permitted to execute schedule optimization, time and cost trade-offs, resource management and other analysis concurrently as the schedule is being built.[2]", 
    "dbpedia_url": "http://dbpedia.org/resource/Graphical_path_method", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Graphical_path_method\n"
}