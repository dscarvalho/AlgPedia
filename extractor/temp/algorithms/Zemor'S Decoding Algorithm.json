{
    "about": "In coding theory, Zemor's algorithm, designed and developed by Gilles Zemor,[1] is a recursive low-complexity approach to code construction. It is an improvement over the algorithm of Sipser and Spielman.", 
    "name": "Zemor'S Decoding Algorithm", 
    "classification": "Error Detection And Correction", 
    "full_text": "In coding theory, Zemor's algorithm, designed and developed by Gilles Zemor,[1] is a recursive low-complexity approach to code construction. It is an improvement over the algorithm of Sipser and Spielman.\nZemor considered a typical class of Sipser\u2013Spielman construction of expander codes, where the underlying graph is bipartite graph. Sipser and Spielman introduced a constructive family of asymptotically good linear-error codes together with a simple parallel algorithm that will always remove a constant fraction of errors. The article is based on Dr. Venkatesan Guruswami's course notes [2]\n\n\nZemor's algorithm is based on a type of expander graphs called Tanner graph. The construction of code was first proposed by Tanner.[3] The codes are based on double cover \n\n\n\nd\n\n\n{\\displaystyle d}\n\n, regular expander \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, which is a bipartite graph. \n\n\n\nG\n\n\n{\\displaystyle G}\n\n =\n\n\n\n\n(\nV\n,\nE\n)\n\n\n\n{\\displaystyle \\left(V,E\\right)}\n\n, where \n\n\n\nV\n\n\n{\\displaystyle V}\n\n is the set of vertices and \n\n\n\nE\n\n\n{\\displaystyle E}\n\n is the set of edges and \n\n\n\nV\n\n\n{\\displaystyle V}\n\n = \n\n\n\nA\n\n\n{\\displaystyle A}\n\n \n\n\n\n\u222a\n\n\n{\\displaystyle \\cup }\n\n \n\n\n\nB\n\n\n{\\displaystyle B}\n\n and \n\n\n\nA\n\n\n{\\displaystyle A}\n\n \n\n\n\n\u2229\n\n\n{\\displaystyle \\cap }\n\n \n\n\n\nB\n\n\n{\\displaystyle B}\n\n = \n\n\n\n\u2205\n\n\n{\\displaystyle \\emptyset }\n\n, where \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n denotes the set of 2 vertices. Let \n\n\n\nn\n\n\n{\\displaystyle n}\n\n be the number of vertices in each group, i.e, \n\n\n\n\n|\n\nA\n\n|\n\n=\n\n|\n\nB\n\n|\n\n=\nn\n\n\n{\\displaystyle |A|=|B|=n}\n\n. The edge set \n\n\n\nE\n\n\n{\\displaystyle E}\n\n be of size \n\n\n\nN\n\n\n{\\displaystyle N}\n\n =\n\n\n\nn\nd\n\n\n{\\displaystyle nd}\n\n and every edge in \n\n\n\nE\n\n\n{\\displaystyle E}\n\n has one endpoint in both \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n. \n\n\n\nE\n(\nv\n)\n\n\n{\\displaystyle E(v)}\n\n denotes the set of edges containing \n\n\n\nv\n\n\n{\\displaystyle v}\n\n.\nAssume an ordering on \n\n\n\nV\n\n\n{\\displaystyle V}\n\n, therefore ordering will be done on every edges of \n\n\n\nE\n(\nv\n)\n\n\n{\\displaystyle E(v)}\n\n for every \n\n\n\nv\n\u2208\nV\n\n\n{\\displaystyle v\\in V}\n\n. Let finite field \n\n\n\n\nF\n\n=\nG\nF\n(\n2\n)\n\n\n{\\displaystyle \\mathbb {F} =GF(2)}\n\n, and for a word \n\n\n\nx\n=\n(\n\nx\n\ne\n\n\n)\n,\ne\n\u2208\nE\n\n\n{\\displaystyle x=(x_{e}),e\\in E}\n\n in \n\n\n\n\n\nF\n\n\nN\n\n\n\n\n{\\displaystyle \\mathbb {F} ^{N}}\n\n, let the subword of the word will be indexed by \n\n\n\nE\n(\nv\n)\n\n\n{\\displaystyle E(v)}\n\n. Let that word be denoted by \n\n\n\n(\nx\n\n)\n\nv\n\n\n\n\n{\\displaystyle (x)_{v}}\n\n. The subset of vertices \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n induces every word \n\n\n\nx\n\u2208\n\n\nF\n\n\nN\n\n\n\n\n{\\displaystyle x\\in \\mathbb {F} ^{N}}\n\n a partition into \n\n\n\nn\n\n\n{\\displaystyle n}\n\n non-overlapping sub-words \n\n\n\n\n\n(\nx\n)\n\n\nv\n\n\n\u2208\n\n\nF\n\n\nd\n\n\n\n\n{\\displaystyle \\left(x\\right)_{v}\\in \\mathbb {F} ^{d}}\n\n, where \n\n\n\nv\n\n\n{\\displaystyle v}\n\n ranges over the elements of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n. For constructing a code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n, consider a linear subcode \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n, which is a \n\n\n\n[\nd\n,\n\nr\n\no\n\n\nd\n,\n\u03b4\n]\n\n\n{\\displaystyle [d,r_{o}d,\\delta ]}\n\n code, where \n\n\n\nq\n\n\n{\\displaystyle q}\n\n, the size of the alphabet is \n\n\n\n2\n\n\n{\\displaystyle 2}\n\n. For any vertex \n\n\n\nv\n\u2208\nV\n\n\n{\\displaystyle v\\in V}\n\n, let \n\n\n\nv\n(\n1\n)\n,\nv\n(\n2\n)\n,\n\u2026\n,\nv\n(\nd\n)\n\n\n{\\displaystyle v(1),v(2),\\ldots ,v(d)}\n\n be some ordering of the \n\n\n\nd\n\n\n{\\displaystyle d}\n\n vertices of \n\n\n\nE\n\n\n{\\displaystyle E}\n\n adjacent to \n\n\n\nv\n\n\n{\\displaystyle v}\n\n. In this code, each bit \n\n\n\n\nx\n\ne\n\n\n\n\n{\\displaystyle x_{e}}\n\n is linked with an edge \n\n\n\ne\n\n\n{\\displaystyle e}\n\n of \n\n\n\nE\n\n\n{\\displaystyle E}\n\n.\nWe can define the code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n to be the set of binary vectors \n\n\n\nx\n=\n\n(\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n\u2026\n,\n\nx\n\nN\n\n\n)\n\n\n\n{\\displaystyle x=\\left(x_{1},x_{2},\\ldots ,x_{N}\\right)}\n\n of \n\n\n\n{\n0\n,\n1\n\n}\n\nN\n\n\n\n\n{\\displaystyle \\{0,1\\}^{N}}\n\n such that, for every vertex \n\n\n\nv\n\n\n{\\displaystyle v}\n\n of \n\n\n\nV\n\n\n{\\displaystyle V}\n\n, \n\n\n\n\n(\n\nx\n\nv\n(\n1\n)\n\n\n,\n\nx\n\nv\n(\n2\n)\n\n\n,\n\u2026\n,\n\nx\n\nv\n(\nd\n)\n\n\n)\n\n\n\n{\\displaystyle \\left(x_{v(1)},x_{v(2)},\\ldots ,x_{v(d)}\\right)}\n\n is a code word of \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n. In this case, we can consider a special case when every vertex of \n\n\n\nE\n\n\n{\\displaystyle E}\n\n is adjacent to exactly \n\n\n\n2\n\n\n{\\displaystyle 2}\n\n vertices of \n\n\n\nV\n\n\n{\\displaystyle V}\n\n. It means that \n\n\n\nV\n\n\n{\\displaystyle V}\n\n and \n\n\n\nE\n\n\n{\\displaystyle E}\n\n make up, respectively, the vertex set and edge set of \n\n\n\nd\n\n\n{\\displaystyle d}\n\n regular graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n.\nLet us call the code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n constructed in this way as \n\n\n\n\n(\nG\n,\n\nC\n\no\n\n\n)\n\n\n\n{\\displaystyle \\left(G,C_{o}\\right)}\n\n code. For a given graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n and a given code \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n, there are several \n\n\n\n\n(\nG\n,\n\nC\n\no\n\n\n)\n\n\n\n{\\displaystyle \\left(G,C_{o}\\right)}\n\n codes as there are different ways of ordering edges incident to a given vertex \n\n\n\nv\n\n\n{\\displaystyle v}\n\n, i.e., \n\n\n\nv\n(\n1\n)\n,\nv\n(\n2\n)\n,\n\u2026\n,\nv\n(\nd\n)\n\n\n{\\displaystyle v(1),v(2),\\ldots ,v(d)}\n\n. In fact our code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n consist of all codewords such that \n\n\n\n\nx\n\nv\n\n\n\u2208\n\nC\n\no\n\n\n\n\n{\\displaystyle x_{v}\\in C_{o}}\n\n for all \n\n\n\nv\n\u2208\nA\n,\nB\n\n\n{\\displaystyle v\\in A,B}\n\n. The code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is linear \n\n\n\n[\nN\n,\nK\n,\nD\n]\n\n\n{\\displaystyle [N,K,D]}\n\n in \n\n\n\n\nF\n\n\n\n{\\displaystyle \\mathbb {F} }\n\n as it is generated from a subcode \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n, which is linear. The code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is defined as \n\n\n\nC\n=\n{\nc\n\u2208\n\n\nF\n\n\nN\n\n\n:\n(\nc\n\n)\n\nv\n\n\n\u2208\n\nC\n\no\n\n\n}\n\n\n{\\displaystyle C=\\{c\\in \\mathbb {F} ^{N}:(c)_{v}\\in C_{o}\\}}\n\n for every \n\n\n\nv\n\u2208\nV\n\n\n{\\displaystyle v\\in V}\n\n.\nIn this figure, \n\n\n\n(\nx\n\n)\n\nv\n\n\n=\n\n(\n\nx\n\ne\n1\n\n\n,\n\nx\n\ne\n2\n\n\n,\n\nx\n\ne\n3\n\n\n,\n\nx\n\ne\n4\n\n\n)\n\n\u2208\n\nC\n\no\n\n\n\n\n{\\displaystyle (x)_{v}=\\left(x_{e1},x_{e2},x_{e3},x_{e4}\\right)\\in C_{o}}\n\n. It shows the graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n and code \n\n\n\nC\n\n\n{\\displaystyle C}\n\n.\nIn matrix \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, let \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n is equal to the second largest eigen value of adjacency matrix of \n\n\n\nG\n\n\n{\\displaystyle G}\n\n. Here the largest eigen value is \n\n\n\nd\n\n\n{\\displaystyle d}\n\n. Two important claims are made:\n\n\n\n\n\n(\n\n\n\nK\nN\n\n\n\n)\n\n\u2265\n2\n\nr\n\no\n\n\n\u2212\n1\n\n\n{\\displaystyle \\left({\\dfrac {K}{N}}\\right)\\geq 2r_{o}-1}\n\n\n. Let \n\n\n\nR\n\n\n{\\displaystyle R}\n\n be the rate of a linear code constructed from a bipartite graph whose digit nodes have degree \n\n\n\nm\n\n\n{\\displaystyle m}\n\n and whose subcode nodes have degree \n\n\n\nn\n\n\n{\\displaystyle n}\n\n. If a single linear code with parameters \n\n\n\n\n(\nn\n,\nk\n)\n\n\n\n{\\displaystyle \\left(n,k\\right)}\n\n and rate \n\n\n\nr\n=\n\n(\n\n\n\nk\nn\n\n\n\n)\n\n\n\n{\\displaystyle r=\\left({\\dfrac {k}{n}}\\right)}\n\n is associated with each of the subcode nodes, then \n\n\n\nk\n\u2265\n1\n\u2212\n\n(\n1\n\u2212\nr\n)\n\nm\n\n\n{\\displaystyle k\\geq 1-\\left(1-r\\right)m}\n\n.\nLet \n\n\n\nR\n\n\n{\\displaystyle R}\n\n be the rate of the linear code, which is equal to \n\n\n\nK\n\n/\n\nN\n\n\n{\\displaystyle K/N}\n\n Let there are \n\n\n\nS\n\n\n{\\displaystyle S}\n\n subcode nodes in the graph. If the degree of the subcode is \n\n\n\nn\n\n\n{\\displaystyle n}\n\n, then the code must have \n\n\n\n\n(\n\n\n\nn\nm\n\n\n\n)\n\nS\n\n\n{\\displaystyle \\left({\\dfrac {n}{m}}\\right)S}\n\n digits, as each digit node is connected to \n\n\n\nm\n\n\n{\\displaystyle m}\n\n of the \n\n\n\n\n(\nn\n)\n\nS\n\n\n{\\displaystyle \\left(n\\right)S}\n\n edges in the graph. Each subcode node contributes \n\n\n\n(\nn\n\u2212\nk\n)\n\n\n{\\displaystyle (n-k)}\n\n equations to parity check matrix for a total of \n\n\n\n\n(\nn\n\u2212\nk\n)\n\nS\n\n\n{\\displaystyle \\left(n-k\\right)S}\n\n. These equations may not be linearly independent. Therefore, \n\n\n\n\n(\n\n\n\nK\nN\n\n\n\n)\n\n\u2265\n\n(\n\n\n\n\n(\n\n\n\nn\nm\n\n\n\n)\nS\n\u2212\n(\nn\n\u2212\nk\n)\nS\n\n\n(\n\n\n\nn\nm\n\n\n\n)\nS\n\n\n\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {K}{N}}\\right)\\geq \\left({\\dfrac {({\\dfrac {n}{m}})S-(n-k)S}{({\\dfrac {n}{m}})S}}\\right)}\n\n\n\n\n\n\n\u2265\n1\n\u2212\nm\n\n(\n\n\n\n\nn\n\u2212\nk\n\nn\n\n\n\n)\n\n\n\n{\\displaystyle \\geq 1-m\\left({\\dfrac {n-k}{n}}\\right)}\n\n\n\n\n\n\n\u2265\n1\n\u2212\nm\n\n(\n1\n\u2212\nr\n)\n\n\n\n{\\displaystyle \\geq 1-m\\left(1-r\\right)}\n\n, Since the value of \n\n\n\nm\n\n\n{\\displaystyle m}\n\n,i.e., the digit node of this bipartite graph is \n\n\n\n2\n\n\n{\\displaystyle 2}\n\n and here \n\n\n\nr\n=\n\nr\n\no\n\n\n\n\n{\\displaystyle r=r_{o}}\n\n, we can write as:\n\n\n\n\n\n(\n\n\n\nK\nN\n\n\n\n)\n\n\u2265\n2\n\nr\n\no\n\n\n\u2212\n1\n\n\n{\\displaystyle \\left({\\dfrac {K}{N}}\\right)\\geq 2r_{o}-1}\n\n\nIf \n\n\n\nS\n\n\n{\\displaystyle S}\n\n is linear code of rate \n\n\n\nr\n\n\n{\\displaystyle r}\n\n, block code length \n\n\n\nd\n\n\n{\\displaystyle d}\n\n, and minimum relative distance \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n, and if \n\n\n\nB\n\n\n{\\displaystyle B}\n\n is the edge vertex incidence graph of a \n\n\n\nd\n\n\n{\\displaystyle d}\n\n \u2013 regular graph with second largest eigen value \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n, then the code \n\n\n\nC\n(\nB\n,\nS\n)\n\n\n{\\displaystyle C(B,S)}\n\n has rate at least \n\n\n\n2\n\nr\n\no\n\n\n\u2212\n1\n\n\n{\\displaystyle 2r_{o}-1}\n\n and minimum relative distance at least \n\n\n\n\n\n(\n(\n\n\n\n\n\u03b4\n\u2212\n\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n\n1\n\u2212\n\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n\n\n\n)\n)\n\n\n2\n\n\n\n\n{\\displaystyle \\left(\\left({\\dfrac {\\delta -\\left({\\dfrac {\\lambda }{d}}\\right)}{1-\\left({\\dfrac {\\lambda }{d}}\\right)}}\\right)\\right)^{2}}\n\n.\nLet \n\n\n\nB\n\n\n{\\displaystyle B}\n\n be derived from the \n\n\n\nd\n\n\n{\\displaystyle d}\n\n regular graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n. So, the number of variables of \n\n\n\nC\n(\nB\n,\nS\n)\n\n\n{\\displaystyle C(B,S)}\n\n is \n\n\n\n\n(\n\n\n\n\nd\nn\n\n2\n\n\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {dn}{2}}\\right)}\n\n and the number of constraints is \n\n\n\nn\n\n\n{\\displaystyle n}\n\n. According to Alon - Chung,[4] if \n\n\n\nX\n\n\n{\\displaystyle X}\n\n is a subset of vertices of \n\n\n\nG\n\n\n{\\displaystyle G}\n\n of size \n\n\n\n\u03b3\nn\n\n\n{\\displaystyle \\gamma n}\n\n, then the number of edges contained in the subgraph is induced by \n\n\n\nX\n\n\n{\\displaystyle X}\n\n in \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is at most \n\n\n\n\n(\n\n\n\n\nd\nn\n\n2\n\n\n\n)\n\n\n(\n\n\u03b3\n\n2\n\n\n+\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\u03b3\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {dn}{2}}\\right)\\left(\\gamma ^{2}+({\\dfrac {\\lambda }{d}})\\gamma \\left(1-\\gamma \\right)\\right)}\n\n.\nAs a result, any set of \n\n\n\n\n(\n\n\n\n\nd\nn\n\n2\n\n\n\n)\n\n\n(\n\n\u03b3\n\n2\n\n\n+\n\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\u03b3\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {dn}{2}}\\right)\\left(\\gamma ^{2}+\\left({\\dfrac {\\lambda }{d}}\\right)\\gamma \\left(1-\\gamma \\right)\\right)}\n\n variables will be having at least \n\n\n\n\u03b3\nn\n\n\n{\\displaystyle \\gamma n}\n\n constraints as neighbours. So the average number of variables per constraint is\u00a0: \n\n\n\n\n(\n\n\n\n\n(\n\n\n\n\n2\nn\nd\n\n2\n\n\n\n)\n\n(\n\n\u03b3\n\n2\n\n\n+\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\u03b3\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n\n\n\u03b3\nn\n\n\n\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {({\\dfrac {2nd}{2}})\\left(\\gamma ^{2}+({\\dfrac {\\lambda }{d}})\\gamma \\left(1-\\gamma \\right)\\right)}{\\gamma n}}\\right)}\n\n \n\n\n\n=\nd\n\n(\n\u03b3\n+\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n\n\n{\\displaystyle =d\\left(\\gamma +({\\dfrac {\\lambda }{d}})\\left(1-\\gamma \\right)\\right)}\n\n \n\n\n\n\u2192\n(\n2\n)\n\n\n{\\displaystyle \\rightarrow (2)}\n\n\nSo if \n\n\n\nd\n\n(\n\u03b3\n+\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n<\n\u03b3\nd\n\n\n{\\displaystyle d\\left(\\gamma +({\\dfrac {\\lambda }{d}})\\left(1-\\gamma \\right)\\right)<\\gamma d}\n\n, then a word of relative weight \n\n\n\n\n(\n\n\u03b3\n\n2\n\n\n+\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\u03b3\n\n(\n1\n\u2212\n\u03b3\n)\n\n)\n\n\n\n{\\displaystyle \\left(\\gamma ^{2}+({\\dfrac {\\lambda }{d}})\\gamma \\left(1-\\gamma \\right)\\right)}\n\n, cannot be a codeword of \n\n\n\nC\n(\nB\n,\nS\n)\n\n\n{\\displaystyle C(B,S)}\n\n. The inequality \n\n\n\n(\n2\n)\n\n\n{\\displaystyle (2)}\n\n is satisfied for \n\n\n\n\u03b3\n<\n\n(\n\n\n\n\n1\n\u2212\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n\u03b4\n\u2212\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n\n\n)\n\n\n\n{\\displaystyle \\gamma <\\left({\\dfrac {1-({\\dfrac {\\lambda }{d}})}{\\delta -({\\dfrac {\\lambda }{d}})}}\\right)}\n\n. Therefore, \n\n\n\nC\n(\nB\n,\nS\n)\n\n\n{\\displaystyle C(B,S)}\n\n cannot have a non zero codeword of relative weight \n\n\n\n\n\n(\n\n\n\n\n\u03b4\n\u2212\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n1\n\u2212\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n\n\n\n\n)\n\n\n2\n\n\n\n\n{\\displaystyle \\left({\\dfrac {\\delta -({\\dfrac {\\lambda }{d}})}{1-({\\dfrac {\\lambda }{d}})}}\\right)^{2}}\n\n or less.\nIn matrix \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, we can assume that \n\n\n\n\u03bb\n\n/\n\nd\n\n\n{\\displaystyle \\lambda /d}\n\n is bounded away from \n\n\n\n1\n\n\n{\\displaystyle 1}\n\n. For those values of \n\n\n\nd\n\n\n{\\displaystyle d}\n\n in which \n\n\n\nd\n\u2212\n1\n\n\n{\\displaystyle d-1}\n\n is odd prime, there are explicit constructions of sequences of \n\n\n\nd\n\n\n{\\displaystyle d}\n\n - regular bipartite graphs with arbitrarily large number of vertices such that each graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n in the sequence is a Ramanujan graph. It is called Ramanujan graph as it satisfies the inequality \n\n\n\n\u03bb\n(\nG\n)\n\u2264\n2\n\n\nd\n\u2212\n1\n\n\n\n\n{\\displaystyle \\lambda (G)\\leq 2{\\sqrt {d-1}}}\n\n. Certain expansion properties are visible in graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n as the separation between the eigen values \n\n\n\nd\n\n\n{\\displaystyle d}\n\n and \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n. If the graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is Ramanujan graph, then that expression \n\n\n\n(\n1\n)\n\n\n{\\displaystyle (1)}\n\n will become \n\n\n\n0\n\n\n{\\displaystyle 0}\n\n eventually as \n\n\n\nd\n\n\n{\\displaystyle d}\n\n becomes large.\nThe iterative decoding algorithm written below alternates between the vertices \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n in \n\n\n\nG\n\n\n{\\displaystyle G}\n\n and corrects the codeword of \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n in \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and then it switches to correct the codeword \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n in \n\n\n\nB\n\n\n{\\displaystyle B}\n\n. Here edges associated with a vertex on one side of a graph are not incident to other vertex on that side. In fact, it doesn't matter in which order, the set of nodes \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n are processed. The vertex processing can also be done in parallel.\nThe decoder \n\n\n\n\nD\n\n:\n\n\nF\n\n\nd\n\n\n\u2192\n\nC\n\no\n\n\n\n\n{\\displaystyle \\mathbb {D} :\\mathbb {F} ^{d}\\rightarrow C_{o}}\n\nstands for a decoder for \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n that recovers correctly with any codewords with less than \n\n\n\n\n(\n\n\n\nd\n2\n\n\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {d}{2}}\\right)}\n\n errors.\nReceived word\u00a0: \n\n\n\nw\n=\n(\n\nw\n\ne\n\n\n)\n,\ne\n\u2208\nE\n\n\n{\\displaystyle w=(w_{e}),e\\in E}\n\n\n\n\n\n\nz\n\u2190\nw\n\n\n{\\displaystyle z\\leftarrow w}\n\n\nFor \n\n\n\nt\n\u2190\n1\n\n\n{\\displaystyle t\\leftarrow 1}\n\n to \n\n\n\nm\n\n\n{\\displaystyle m}\n\n do //\n\n\n\nm\n\n\n{\\displaystyle m}\n\n is the number of iterations\n{ if (\n\n\n\nt\n\n\n{\\displaystyle t}\n\n is odd) // Here the algorithm will alternate between its two vertex sets.\n\n\n\n\nX\n\u2190\nA\n\n\n{\\displaystyle X\\leftarrow A}\n\n\nelse \n\n\n\nX\n\u2190\nB\n\n\n{\\displaystyle X\\leftarrow B}\n\n\nIteration \n\n\n\nt\n\n\n{\\displaystyle t}\n\n: For every \n\n\n\nv\n\u2208\nX\n\n\n{\\displaystyle v\\in X}\n\n, let \n\n\n\n(\nz\n\n)\n\nv\n\n\n\u2190\n\nD\n\n(\n(\nz\n\n)\n\nv\n\n\n)\n\n\n{\\displaystyle (z)_{v}\\leftarrow \\mathbb {D} ((z)_{v})}\n\n // Decoding \n\n\n\n\nz\n\nv\n\n\n\n\n{\\displaystyle z_{v}}\n\n to its nearest codeword.\n} Output: \n\n\n\nz\n\n\n{\\displaystyle z}\n\n\nSince \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is bipartite, the set \n\n\n\nA\n\n\n{\\displaystyle A}\n\n of vertices induces the partition of the edge set \n\n\n\nE\n\n\n{\\displaystyle E}\n\n = \n\n\n\n\n\u222a\n\nv\n\u2208\nA\n\n\n\nE\n\nv\n\n\n\n\n{\\displaystyle \\cup _{v\\in A}E_{v}}\n\n . The set \n\n\n\nB\n\n\n{\\displaystyle B}\n\n induces another partition, \n\n\n\nE\n\n\n{\\displaystyle E}\n\n = \n\n\n\n\n\u222a\n\nv\n\u2208\nB\n\n\n\nE\n\nv\n\n\n\n\n{\\displaystyle \\cup _{v\\in B}E_{v}}\n\n .\nLet \n\n\n\nw\n\u2208\n{\n0\n,\n1\n\n}\n\nN\n\n\n\n\n{\\displaystyle w\\in \\{0,1\\}^{N}}\n\n be the received vector, and recall that \n\n\n\nN\n=\nd\nn\n\n\n{\\displaystyle N=dn}\n\n. The first iteration of the algorithm consists of applying the complete decoding for the code induced by \n\n\n\n\nE\n\nv\n\n\n\n\n{\\displaystyle E_{v}}\n\n for every \n\n\n\nv\n\u2208\nA\n\n\n{\\displaystyle v\\in A}\n\n . This means that for replacing, for every \n\n\n\nv\n\u2208\nA\n\n\n{\\displaystyle v\\in A}\n\n, the vector \n\n\n\n\n(\n\nw\n\nv\n(\n1\n)\n\n\n,\n\nw\n\nv\n(\n2\n)\n\n\n,\n\u2026\n,\n\nw\n\nv\n(\nd\n)\n\n\n)\n\n\n\n{\\displaystyle \\left(w_{v(1)},w_{v(2)},\\ldots ,w_{v(d)}\\right)}\n\n by one of the closest codewords of \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n. Since the subsets of edges \n\n\n\n\nE\n\nv\n\n\n\n\n{\\displaystyle E_{v}}\n\n are disjoint for \n\n\n\nv\n\u2208\nA\n\n\n{\\displaystyle v\\in A}\n\n, the decoding of these \n\n\n\nn\n\n\n{\\displaystyle n}\n\n subvectors of \n\n\n\nw\n\n\n{\\displaystyle w}\n\n may be done in parallel.\nThe iteration will yield a new vector \n\n\n\nz\n\n\n{\\displaystyle z}\n\n. The next iteration consists of applying the preceding procedure to \n\n\n\nz\n\n\n{\\displaystyle z}\n\n but with \n\n\n\nA\n\n\n{\\displaystyle A}\n\n replaced by \n\n\n\nB\n\n\n{\\displaystyle B}\n\n. In other words, it consists of decoding all the subvectors induced by the vertices of \n\n\n\nB\n\n\n{\\displaystyle B}\n\n. The coming iterations repeat those two steps alternately applying parallel decoding to the subvectors induced by the vertices of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and to the subvectors induced by the vertices of \n\n\n\nB\n\n\n{\\displaystyle B}\n\n.\nNote: [If \n\n\n\nd\n=\nn\n\n\n{\\displaystyle d=n}\n\n and \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is the complete bipartite graph, then \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is a product code of \n\n\n\n\nC\n\no\n\n\n\n\n{\\displaystyle C_{o}}\n\n with itself and the above algorithm reduces to the natural hard iterative decoding of product codes].\nHere, the number of iterations, \n\n\n\nm\n\n\n{\\displaystyle m}\n\n is \n\n\n\n\n(\n\n\n\n\n(\nlog\n\u2061\n\nn\n\n)\n\n\nlog\n\u2061\n(\n2\n\u2212\n\u03b1\n)\n\n\n\n\n)\n\n\n\n{\\displaystyle \\left({\\dfrac {(\\log {n})}{\\log(2-\\alpha )}}\\right)}\n\n. In general, the above algorithm can correct a code word whose Hamming weight is no more than \n\n\n\n(\n\n\n\n1\n2\n\n\n\n)\n.\n\u03b1\nN\n\u03b4\n\n(\n(\n\n\n\n\u03b4\n2\n\n\n\n)\n\u2212\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n)\n\n=\n\n(\n(\n\n\n\n1\n4\n\n\n\n)\n.\n\u03b1\nN\n(\n\n\u03b4\n\n2\n\n\n\u2212\nO\n(\n\n\n\n\u03bb\nd\n\n\n\n)\n)\n\n\n\n{\\displaystyle ({\\dfrac {1}{2}}).\\alpha N\\delta \\left(({\\dfrac {\\delta }{2}})-({\\dfrac {\\lambda }{d}})\\right)=\\left(({\\dfrac {1}{4}}).\\alpha N(\\delta ^{2}-O({\\dfrac {\\lambda }{d}})\\right)}\n\n for values of \n\n\n\n\u03b1\n<\n1\n\n\n{\\displaystyle \\alpha <1}\n\n. Here, the decoding algorithm is implemented as a circuit of size \n\n\n\nO\n(\nN\nlog\n\u2061\n\nN\n\n)\n\n\n{\\displaystyle O(N\\log {N})}\n\n and depth \n\n\n\nO\n(\nlog\n\u2061\n\nN\n\n)\n\n\n{\\displaystyle O(\\log {N})}\n\n that returns the codeword given that error vector has weight less than \n\n\n\n\u03b1\nN\n\n\u03b4\n\n2\n\n\n(\n1\n\u2212\n\u03f5\n)\n\n/\n\n4\n\n\n{\\displaystyle \\alpha N\\delta ^{2}(1-\\epsilon )/4}\n\n .\nIf \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is a Ramanujan graph of sufficiently high degree, for any \n\n\n\n\u03b1\n<\n1\n\n\n{\\displaystyle \\alpha <1}\n\n, the decoding algorithm can correct \n\n\n\n(\n\n\n\n\n\u03b1\n\n\u03b4\n\no\n\n\n2\n\n\n\n4\n\n\n\n)\n(\n1\n\u2212\n\u2208\n)\nN\n\n\n{\\displaystyle ({\\dfrac {\\alpha \\delta _{o}^{2}}{4}})(1-\\in )N}\n\n errors, in \n\n\n\nO\n(\nlog\n\u2061\n\nn\n\n)\n\n\n{\\displaystyle O(\\log {n})}\n\n rounds ( where the big- \n\n\n\nO\n\n\n{\\displaystyle O}\n\n notation hides a dependence on \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\n). This can be implemented in linear time on a single processor; on \n\n\n\nn\n\n\n{\\displaystyle n}\n\n processors each round can be implemented in constant time.\nSince the decoding algorithm is insensitive to the value of the edges and by linearity, we can assume that the transmitted codeword is the all zeros - vector. Let the received codeword be \n\n\n\nw\n\n\n{\\displaystyle w}\n\n. The set of edges which has an incorrect value while decoding is considered. Here by incorrect value, we mean \n\n\n\n1\n\n\n{\\displaystyle 1}\n\n in any of the bits. Let \n\n\n\nw\n=\n\nw\n\n0\n\n\n\n\n{\\displaystyle w=w^{0}}\n\n be the initial value of the codeword, \n\n\n\n\nw\n\n1\n\n\n,\n\nw\n\n2\n\n\n,\n\u2026\n,\n\nw\n\nt\n\n\n\n\n{\\displaystyle w^{1},w^{2},\\ldots ,w^{t}}\n\n be the values after first, second\u00a0.\u00a0.\u00a0. \n\n\n\nt\n\n\n{\\displaystyle t}\n\n stages of decoding. Here, \n\n\n\n\nX\n\ni\n\n\n=\n\ne\n\u2208\nE\n\n|\n\n\nx\n\ne\n\n\ni\n\n\n=\n1\n\n\n\n{\\displaystyle X^{i}={e\\in E|x_{e}^{i}=1}}\n\n, and \n\n\n\n\nS\n\ni\n\n\n=\n\nv\n\u2208\n\nV\n\ni\n\n\n\n|\n\n\nE\n\nv\n\n\n\u2229\n\nX\n\ni\n+\n1\n\n\n!\n=\n\u2205\n\n\n\n{\\displaystyle S^{i}={v\\in V^{i}|E_{v}\\cap X^{i+1}!=\\emptyset }}\n\n. Here \n\n\n\n\nS\n\ni\n\n\n\n\n{\\displaystyle S^{i}}\n\n corresponds to those set of vertices that was not able to successfully decode their codeword in the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n round. From the above algorithm \n\n\n\n\nS\n\n1\n\n\n<\n\nS\n\n0\n\n\n\n\n{\\displaystyle S^{1}<S^{0}}\n\n as number of unsuccessful vertices will be corrected in every iteration. We can prove that \n\n\n\n\nS\n\n0\n\n\n>\n\nS\n\n1\n\n\n>\n\nS\n\n2\n\n\n>\n\u22ef\n\n\n{\\displaystyle S^{0}>S^{1}>S^{2}>\\cdots }\n\nis a decreasing sequence. In fact, \n\n\n\n\n|\n\n\nS\n\ni\n+\n1\n\n\n\n|\n\n<=\n(\n\n\n\n1\n\n2\n\u2212\n\u03b1\n\n\n\n\n)\n\n|\n\n\nS\n\ni\n\n\n\n|\n\n\n\n{\\displaystyle |S_{i+1}|<=({\\dfrac {1}{2-\\alpha }})|S_{i}|}\n\n. As we are assuming, \n\n\n\n\u03b1\n<\n1\n\n\n{\\displaystyle \\alpha <1}\n\n, the above equation is in a geometric decreasing sequence. So, when \n\n\n\n\n|\n\n\nS\n\ni\n\n\n\n|\n\n<\nn\n\n\n{\\displaystyle |S_{i}|<n}\n\n, more than \n\n\n\nl\no\n\ng\n\n2\n\u2212\n\u03b1\n\n\nn\n\n\n{\\displaystyle log_{2-\\alpha }n}\n\n rounds are necessary. Furthermore, \n\n\n\n\u2211\n\n|\n\n\nS\n\ni\n\n\n\n|\n\n=\nn\n\u2211\n(\n\n\n\n1\n\n(\n2\n\u2212\n\u03b1\n\n)\n\ni\n\n\n\n\n\n\n)\n=\nO\n(\nn\n)\n\n\n{\\displaystyle \\sum |S_{i}|=n\\sum ({\\dfrac {1}{(2-\\alpha )^{i}}})=O(n)}\n\n, and if we implement the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n round in \n\n\n\nO\n(\n\n|\n\n\nS\n\ni\n\n\n\n|\n\n)\n\n\n{\\displaystyle O(|S_{i}|)}\n\n time, then the total sequential running time will be linear.\ngiven in.[5]", 
    "dbpedia_url": "http://dbpedia.org/resource/Zemor's_decoding_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Zemor's_decoding_algorithm\n"
}