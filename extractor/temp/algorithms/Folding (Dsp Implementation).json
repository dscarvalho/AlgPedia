{
    "about": "Folding [1] is a transformation technique using in DSP architecture implementation for minimizing the number of functional blocks in synthesizing DSP architecture. Folding was first developed by Keshab K. Parhi and his students in 1992. Its concept is contrary to unfolding. Folding transforms an operation from a unit-time processing to N unit-times processing where N is called folding factor. Therefore, multiple same operations (less than N) used in original system could be replaced with a signal operation block in transformed system. Thus, in N unit-times, a functional block in transformed system could be reused to perform N operations in original system.", 
    "name": "Folding (Dsp Implementation)", 
    "classification": "Digital Signal Processing", 
    "full_text": "Folding [1] is a transformation technique using in DSP architecture implementation for minimizing the number of functional blocks in synthesizing DSP architecture. Folding was first developed by Keshab K. Parhi and his students in 1992. Its concept is contrary to unfolding. Folding transforms an operation from a unit-time processing to N unit-times processing where N is called folding factor. Therefore, multiple same operations (less than N) used in original system could be replaced with a signal operation block in transformed system. Thus, in N unit-times, a functional block in transformed system could be reused to perform N operations in original system.\nWhile the folding transformation reduces the number of functional units in the architecture, it needs more memory element to store the temporary data. The reason is that multiple data produced from an operation block needs to be distinguished from N data produced from original operations. Therefore, the number of register may be increased. Furthermore, it needs additional multiplexer for switching different operation paths. Hence, the number of switching elements would also be increased. To counterattack such issues, the considerations of folding is\n\n\nThe following graph shows the example of folding transformation. The original DSP system produces y(n) at each unit time. The transformed DSP system produces y(n) in each 2 l where each 2 l increase 1 n, index of y. The resource used in original system are 2 adders, and the resource used in transformed system are 1 adder, 1 register, 3 multiplexer. The functional block, adder, is therefore reduced.\nThe DSP implementation in the folding algorithm is a Data flow graph(DFG), which is a graph composed of functional nodes and delay edges.\nAnother input for folding algorithm is folding set which is the function maps an operation unit of original DFG to an operation of transformed DFG with the number n <= N indicated the order of reused operation.\nGiven a DFG, a folding factor N, and folding set. The transformation is performing:\nThe following graph show the example of folding algorithm. The folding set is \n\n\n\n\n{\n\nS\n\ni\n\n\n\n|\n\nj\n}\n\n\n\n{\\displaystyle \\scriptstyle \\{S_{i}|j\\}}\n\n where \n\n\n\n\n\nS\n\ni\n\n\n\n\n\n{\\displaystyle \\scriptstyle S_{i}}\n\n is the transformed operator and \n\n\n\n\nj\n\n\n\n{\\displaystyle \\scriptstyle j}\n\n is the order of such operator. Therefore, the image of the folding set are \n\n\n\n\n\nS\n\n1\n\n\n,\n\nS\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle S_{1},S_{2}}\n\n representing adder and multiplier respectively. Furthermore, in this example, we use the pipelining adder and multiplier which have 1 and 2 delay respectively in right graph.\nNext, we compute the delay elements for storing the data.\nAfter computing the delay element needed, we construct the data path to connect the functional blocks with corresponding multiplexer. The final graph is shown as below where \n\n\n\n\n{\ni\n,\nj\n}\n\n\n\n{\\displaystyle \\scriptstyle \\{i,j\\}}\n\n represents the switching moment.\n[2] In the above example, if we perform register minimization, we could reduce the number of register significantly. The technique for minimizing register is call lifetime analysis, which analyzes the time for when a data is produced and when a data finally s consumed. The time for producing a data is denoted \n\n\n\n\n\nT\n\ni\nn\np\nu\nt\n\n\n\n\n\n{\\displaystyle \\scriptstyle T_{input}}\n\n, and the time for the last consumed data is denoted \n\n\n\n\n\nT\n\no\nu\nt\np\nu\nt\n\n\n\n\n\n{\\displaystyle \\scriptstyle T_{output}}\n\n.\nTherefore, we could perform life time analysis from the above example as following table.\nFrom the life time analyzing above, we could analyze the minimal register needed. In this case, we construct the lifetime chart corresponding to the lifetime table in above. For node 1, we plot a horizontal line from cycle 4 to 9 indicating that the data is need to be stored from cycle 4 to cycle 9. In the same method, we could construct the chart to indicating that how many data need to be stored in each cycle. Hence, cycle 6 needs to store 2 data. Maximum number of data need to be store d in this example is 2. Hence, we allocate 2 delay element for constructing the transformed data path.\n\nAfter allocating 2 delay element for storing the temporary data, we need to schedule data stored at which register. The following table shows the data stored in each register R1 and R2, such that the number of multiplexer could be minimized.\n\nFinally, we could reconstruct the data path with fewer delay element and switching element in the folded design.\n", 
    "dbpedia_url": "http://dbpedia.org/resource/Folding_(DSP_implementation)", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Folding_(DSP_implementation)\n"
}