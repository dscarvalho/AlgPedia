{
    "about": "In the field of mathematical modeling, a radial basis function network is an artificial neural network that uses radial basis functions as activation functions. The output of the network is a linear combination of radial basis functions of the inputs and neuron parameters. Radial basis function networks have many uses, including function approximation, time series prediction, classification, and system control. They were first formulated in a 1988 paper by Broomhead and Lowe, both researchers at the Royal Signals and Radar Establishment.[1][2][3]", 
    "name": "Radial Basis Function Network", 
    "classification": "Computational Statistics", 
    "full_text": "In the field of mathematical modeling, a radial basis function network is an artificial neural network that uses radial basis functions as activation functions. The output of the network is a linear combination of radial basis functions of the inputs and neuron parameters. Radial basis function networks have many uses, including function approximation, time series prediction, classification, and system control. They were first formulated in a 1988 paper by Broomhead and Lowe, both researchers at the Royal Signals and Radar Establishment.[1][2][3]\n\n\nRadial basis function (RBF) networks typically have three layers: an input layer, a hidden layer with a non-linear RBF activation function and a linear output layer. The input can be modeled as a vector of real numbers \n\n\n\n\nx\n\n\u2208\n\n\nR\n\n\nn\n\n\n\n\n{\\displaystyle \\mathbf {x} \\in \\mathbb {R} ^{n}}\n\n. The output of the network is then a scalar function of the input vector, \n\n\n\n\u03c6\n:\n\n\nR\n\n\nn\n\n\n\u2192\n\nR\n\n\n\n{\\displaystyle \\varphi :\\mathbb {R} ^{n}\\to \\mathbb {R} }\n\n, and is given by\nwhere \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is the number of neurons in the hidden layer, \n\n\n\n\n\nc\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {c} _{i}}\n\n is the center vector for neuron \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, and \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n is the weight of neuron \n\n\n\ni\n\n\n{\\displaystyle i}\n\n in the linear output neuron. Functions that depend only on the distance from a center vector are radially symmetric about that vector, hence the name radial basis function. In the basic form all inputs are connected to each hidden neuron. The norm is typically taken to be the Euclidean distance (although the Mahalanobis distance appears to perform better in general[citation needed]) and the radial basis function is commonly taken to be Gaussian\nThe Gaussian basis functions are local to the center vector in the sense that\ni.e. changing parameters of one neuron has only a small effect for input values that are far away from the center of that neuron.\nGiven certain mild conditions on the shape of the activation function, RBF networks are universal approximators on a compact subset of \n\n\n\n\n\nR\n\n\nn\n\n\n\n\n{\\displaystyle \\mathbb {R} ^{n}}\n\n.[4] This means that an RBF network with enough hidden neurons can approximate any continuous function with arbitrary precision.\nThe parameters \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n, \n\n\n\n\n\nc\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {c} _{i}}\n\n, and \n\n\n\n\n\u03b2\n\ni\n\n\n\n\n{\\displaystyle \\beta _{i}}\n\n are determined in a manner that optimizes the fit between \n\n\n\n\u03c6\n\n\n{\\displaystyle \\varphi }\n\n and the data.\nIn addition to the above unnormalized architecture, RBF networks can be normalized. In this case the mapping is\nwhere\nis known as a \"normalized radial basis function\".\nThere is theoretical justification for this architecture in the case of stochastic data flow. Assume a stochastic kernel approximation for the joint probability density\nwhere the weights \n\n\n\n\n\nc\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {c} _{i}}\n\n and \n\n\n\n\ne\n\ni\n\n\n\n\n{\\displaystyle e_{i}}\n\n are exemplars from the data and we require the kernels to be normalized\nand\nThe probability densities in the input and output spaces are\nand\nThe expectation of y given an input \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n is\nwhere\nis the conditional probability of y given \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n. The conditional probability is related to the joint probability through Bayes theorem\nwhich yields\nThis becomes\nwhen the integrations are performed.\nIt is sometimes convenient to expand the architecture to include local linear models. In that case the architectures become, to first order,\nand\nin the unnormalized and normalized cases, respectively. Here \n\n\n\n\n\nb\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {b} _{i}}\n\n are weights to be determined. Higher order linear terms are also possible.\nThis result can be written\nwhere\nand\nin the unnormalized case and\nin the normalized case.\nHere \n\n\n\n\n\u03b4\n\ni\nj\n\n\n\n\n{\\displaystyle \\delta _{ij}}\n\n is a Kronecker delta function defined as\nRBF networks are typically trained by a two-step algorithm. In the first step, the center vectors \n\n\n\n\n\nc\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {c} _{i}}\n\n of the RBF functions in the hidden layer are chosen. This step can be performed in several ways; centers can be randomly sampled from some set of examples, or they can be determined using k-means clustering. Note that this step is unsupervised. A third backpropagation step can be performed to fine-tune all of the RBF net's parameters.[3]\nThe second step simply fits a linear model with coefficients \n\n\n\n\nw\n\ni\n\n\n\n\n{\\displaystyle w_{i}}\n\n to the hidden layer's outputs with respect to some objective function. A common objective function, at least for regression/function estimation, is the least squares function:\nwhere\nWe have explicitly included the dependence on the weights. Minimization of the least squares objective function by optimal choice of weights optimizes accuracy of fit.\nThere are occasions in which multiple objectives, such as smoothness as well as accuracy, must be optimized. In that case it is useful to optimize a regularized objective function such as\nwhere\nand\nwhere optimization of S maximizes smoothness and \n\n\n\n\u03bb\n\n\n{\\displaystyle \\lambda }\n\n is known as a regularization parameter.\nRBF networks can be used to interpolate a function \n\n\n\ny\n:\n\n\nR\n\n\nn\n\n\n\u2192\n\nR\n\n\n\n{\\displaystyle y:\\mathbb {R} ^{n}\\to \\mathbb {R} }\n\n when the values of that function are known on finite number of points: \n\n\n\ny\n(\n\n\nx\n\n\ni\n\n\n)\n=\n\nb\n\ni\n\n\n,\ni\n=\n1\n,\n\u2026\n,\nN\n\n\n{\\displaystyle y(\\mathbf {x} _{i})=b_{i},i=1,\\ldots ,N}\n\n. Taking the known points \n\n\n\n\n\nx\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {x} _{i}}\n\n to be the centers of the radial basis functions and evaluating the values of the basis functions at the same points \n\n\n\n\ng\n\ni\nj\n\n\n=\n\u03c1\n(\n\n|\n\n\n|\n\n\n\nx\n\n\nj\n\n\n\u2212\n\n\nx\n\n\ni\n\n\n\n|\n\n\n|\n\n)\n\n\n{\\displaystyle g_{ij}=\\rho (||\\mathbf {x} _{j}-\\mathbf {x} _{i}||)}\n\n the weights can be solved from the equation\nIt can be shown that the interpolation matrix in the above equation is non-singular, if the points \n\n\n\n\n\nx\n\n\ni\n\n\n\n\n{\\displaystyle \\mathbf {x} _{i}}\n\n are distinct, and thus the weights \n\n\n\nw\n\n\n{\\displaystyle w}\n\n can be solved by simple linear algebra:\nIf the purpose is not to perform strict interpolation but instead more general function approximation or classification the optimization is somewhat more complex because there is no obvious choice for the centers. The training is typically done in two phases first fixing the width and centers and then the weights. This can be justified by considering the different nature of the non-linear hidden neurons versus the linear output neuron.\nBasis function centers can be randomly sampled among the input instances or obtained by Orthogonal Least Square Learning Algorithm or found by clustering the samples and choosing the cluster means as the centers.\nThe RBF widths are usually all fixed to same value which is proportional to the maximum distance between the chosen centers.\nAfter the centers \n\n\n\n\nc\n\ni\n\n\n\n\n{\\displaystyle c_{i}}\n\n have been fixed, the weights that minimize the error at the output are computed with a linear pseudoinverse solution:\nwhere the entries of G are the values of the radial basis functions evaluated at the points \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n: \n\n\n\n\ng\n\nj\ni\n\n\n=\n\u03c1\n(\n\n|\n\n\n|\n\n\nx\n\nj\n\n\n\u2212\n\nc\n\ni\n\n\n\n|\n\n\n|\n\n)\n\n\n{\\displaystyle g_{ji}=\\rho (||x_{j}-c_{i}||)}\n\n.\nThe existence of this linear solution means that unlike multi-layer perceptron (MLP) networks, RBF networks have a unique local minimum (when the centers are fixed).\nAnother possible training algorithm is gradient descent. In gradient descent training, the weights are adjusted at each time step by moving them in a direction opposite from the gradient of the objective function (thus allowing the minimum of the objective function to be found),\nwhere \n\n\n\n\u03bd\n\n\n{\\displaystyle \\nu }\n\n is a \"learning parameter.\"\nFor the case of training the linear weights, \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n, the algorithm becomes\nin the unnormalized case and\nin the normalized case.\nFor local-linear-architectures gradient-descent training is\nFor the case of training the linear weights, \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n and \n\n\n\n\ne\n\ni\nj\n\n\n\n\n{\\displaystyle e_{ij}}\n\n, the algorithm becomes\nin the unnormalized case and\nin the normalized case and\nin the local-linear case.\nFor one basis function, projection operator training reduces to Newton's method.\nThe basic properties of radial basis functions can be illustrated with a simple mathematical map, the logistic map, which maps the unit interval onto itself. It can be used to generate a convenient prototype data stream. The logistic map can be used to explore function approximation, time series prediction, and control theory. The map originated from the field of population dynamics and became the prototype for chaotic time series. The map, in the fully chaotic regime, is given by\nwhere t is a time index. The value of x at time t+1 is a parabolic function of x at time t. This equation represents the underlying geometry of the chaotic time series generated by the logistic map.\nGeneration of the time series from this equation is the forward problem. The examples here illustrate the inverse problem; identification of the underlying dynamics, or fundamental equation, of the logistic map from exemplars of the time series. The goal is to find an estimate\nfor f.\nThe architecture is\nwhere\nSince the input is a scalar rather than a vector, the input dimension is one. We choose the number of basis functions as N=5 and the size of the training set to be 100 exemplars generated by the chaotic time series. The weight \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\n is taken to be a constant equal to 5. The weights \n\n\n\n\nc\n\ni\n\n\n\n\n{\\displaystyle c_{i}}\n\n are five exemplars from the time series. The weights \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n are trained with projection operator training:\nwhere the learning rate \n\n\n\n\u03bd\n\n\n{\\displaystyle \\nu }\n\n is taken to be 0.3. The training is performed with one pass through the 100 training points. The rms error is 0.15.\nThe normalized RBF architecture is\nwhere\nAgain:\nAgain, we choose the number of basis functions as five and the size of the training set to be 100 exemplars generated by the chaotic time series. The weight \n\n\n\n\u03b2\n\n\n{\\displaystyle \\beta }\n\n is taken to be a constant equal to 6. The weights \n\n\n\n\nc\n\ni\n\n\n\n\n{\\displaystyle c_{i}}\n\n are five exemplars from the time series. The weights \n\n\n\n\na\n\ni\n\n\n\n\n{\\displaystyle a_{i}}\n\n are trained with projection operator training:\nwhere the learning rate \n\n\n\n\u03bd\n\n\n{\\displaystyle \\nu }\n\n is again taken to be 0.3. The training is performed with one pass through the 100 training points. The rms error on a test set of 100 exemplars is 0.084, smaller than the unnormalized error. Normalization yields accuracy improvement. Typically accuracy with normalized basis functions increases even more over unnormalized functions as input dimensionality increases.\nOnce the underlying geometry of the time series is estimated as in the previous examples, a prediction for the time series can be made by iteration:\nA comparison of the actual and estimated time series is displayed in the figure. The estimated times series starts out at time zero with an exact knowledge of x(0). It then uses the estimate of the dynamics to update the time series estimate for several time steps.\nNote that the estimate is accurate for only a few time steps. This is a general characteristic of chaotic time series. This is a property of the sensitive dependence on initial conditions common to chaotic time series. A small initial error is amplified with time. A measure of the divergence of time series with nearly identical initial conditions is known as the Lyapunov exponent.\nWe assume the output of the logistic map can be manipulated through a control parameter \n\n\n\nc\n[\nx\n(\nt\n)\n,\nt\n]\n\n\n{\\displaystyle c[x(t),t]}\n\n such that\nThe goal is to choose the control parameter in such a way as to drive the time series to a desired output \n\n\n\nd\n(\nt\n)\n\n\n{\\displaystyle d(t)}\n\n. This can be done if we choose the control paramer to be\nwhere\nis an approximation to the underlying natural dynamics of the system.\nThe learning algorithm is given by\nwhere", 
    "dbpedia_url": "http://dbpedia.org/resource/Radial_basis_function_network", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Radial_basis_function_network\n"
}