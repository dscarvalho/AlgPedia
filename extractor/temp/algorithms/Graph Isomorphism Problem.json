{
    "about": "The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic.", 
    "name": "Graph Isomorphism Problem", 
    "classification": "Graph Algorithms", 
    "full_text": "The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic.\nThe problem is not known to be solvable in polynomial time nor to be NP-complete, and therefore may be in the computational complexity class NP-intermediate. It is known that the graph isomorphism problem is in the low hierarchy of class NP, which implies that it is not NP-complete unless the polynomial time hierarchy collapses to its second level.[1] At the same time, isomorphism for many special classes of graphs can be solved in polynomial time, and in practice graph isomorphism can often be solved efficiently.[2]\nThis problem is a special case of the subgraph isomorphism problem,[3] which is known to be NP-complete. It is also known to be a special case of the non-abelian hidden subgroup problem over the symmetric group.[4]\n\n\nThe best currently accepted theoretical algorithm is due to Babai & Luks (1983), and is based on the earlier work by Luks (1982) combined with a subfactorial algorithm due to Zemlyachenko, Korneenko & Tyshkevich (1985). The algorithm has run time 2O(\u221an\u00a0log\u00a0n) for graphs with n vertices and relies on the classification of finite simple groups. Without CFSG, a slightly weaker bound 2O(\u221an\u00a0log2\u00a0n) was obtained first for strongly regular graphs by L\u00e1szl\u00f3 Babai\u00a0(1980), and then extended to general graphs by Babai & Luks (1983). Improvement of the exponent \u221an is a major open problem; for strongly regular graphs this was done by Spielman (1996). For hypergraphs of bounded rank, a subexponential upper bound matching the case of graphs was obtained by Babai & Codenotti (2008).\nIn November 2015, Babai announced a quasipolynomial time algorithm for all graphs, that is, one with running time \n\n\n\n\n2\n\nO\n(\n(\nlog\n\u2061\nn\n\n)\n\nc\n\n\n)\n\n\n\n\n{\\displaystyle 2^{O((\\log n)^{c})}}\n\n for some fixed \n\n\n\nc\n>\n0\n\n\n{\\displaystyle c>0}\n\n.[5][6][7] In January 2017, Babai retracted the quasi-polynomial claim and stated a sub-exponential time bound instead, but later claimed he had discovered a workaround, which has yet to be published.[8][9]\nThere are several competing practical algorithms for graph isomorphism, such as those due to McKay (1981), Schmidt & Druffel (1976), and Ullman (1976). While they seem to perform well on random graphs, a major drawback of these algorithms is their exponential time performance in the worst case.[10]\nThe graph isomorphism problem is computationally equivalent to the problem of computing the automorphism group of a graph, and is weaker than the permutation group isomorphism problem and the permutation group intersection problem. For the latter two problems, Babai, Kantor & Luks (1983) obtained complexity bounds similar to that for graph isomorphism.\nA number of important special cases of the graph isomorphism problem have efficient, polynomial-time solutions:\nSince the graph isomorphism problem is neither known to be NP-complete nor known to be tractable, researchers have sought to gain insight into the problem by defining a new class GI, the set of problems with a polynomial-time Turing reduction to the graph isomorphism problem.[23] If in fact the graph isomorphism problem is solvable in polynomial time, GI would equal P.\nAs is common for complexity classes within the polynomial time hierarchy, a problem is called GI-hard if there is a polynomial-time Turing reduction from any problem in GI to that problem, i.e., a polynomial-time solution to a GI-hard problem would yield a polynomial-time solution to the graph isomorphism problem (and so all problems in GI). A problem \n\n\n\nX\n\n\n{\\displaystyle X}\n\n is called complete for GI, or GI-complete, if it is both GI-hard and a polynomial-time solution to the GI problem would yield a polynomial-time solution to \n\n\n\nX\n\n\n{\\displaystyle X}\n\n.\nThe graph isomorphism problem is contained in both NP and co-AM. GI is contained in and low for Parity P, as well as contained in the potentially much smaller class SPP.[24] That it lies in Parity P means that the graph isomorphism problem is no harder than determining whether a polynomial-time nondeterministic Turing machine has an even or odd number of accepting paths. GI is also contained in and low for ZPPNP.[25] This essentially means that an efficient Las Vegas algorithm with access to an NP oracle can solve graph isomorphism so easily that it gains no power from being given the ability to do so in constant time.\nThere are a number of classes of mathematical objects for which the problem of isomorphism is a GI-complete problem. A number of them are graphs endowed with additional properties or restrictions:[26]\nA class of graphs is called GI-complete if recognition of isomorphism for graphs from this subclass is a GI-complete problem. The following classes are GI-complete:[26]\nMany classes of digraphs are also GI-complete.\nThere are other nontrivial GI-complete problems in addition to isomorphism problems.\nManuel Blum and Sampath Kannan\u00a0(1995) have shown a program checker for graph isomorphism. Suppose P is a claimed polynomial-time procedure that checks if two graphs are isomorphic, but it is not trusted. To check if G and H are isomorphic:\nThis procedure is polynomial-time and gives the correct answer if P is a correct program for graph isomorphism. If P is not a correct program, but answers correctly on G and H, the checker will either give the correct answer, or detect invalid behaviour of P. If P is not a correct program, and answers incorrectly on G and H, the checker will detect invalid behaviour of P with high probability, or answer wrong with probability 2\u2212100.\nNotably, P is used only as a blackbox.\nIn cheminformatics and in mathematical chemistry, graph isomorphism testing is used to identify a chemical compound within a chemical database.[36] Also, in organic mathematical chemistry graph isomorphism testing is useful for generation of molecular graphs and for computer synthesis.\nChemical database search is an example of graphical data mining, where the graph canonization approach is often used.[37] In particular, a number of identifiers for chemical substances, such as SMILES and InChI, designed to provide a standard and human-readable way to encode molecular information and to facilitate the search for such information in databases and on the web, use canonization step in their computation, which is essentially the canonization of the graph which represents the molecule.\nIn electronic design automation graph isomorphism is the basis of the Layout Versus Schematic (LVS) circuit design step, which is a verification whether the electric circuits represented by a circuit schematic and an integrated circuit layout are the same.[38]", 
    "dbpedia_url": "http://dbpedia.org/resource/Graph_isomorphism_problem", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Graph_isomorphism_problem\n"
}