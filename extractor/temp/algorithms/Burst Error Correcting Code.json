{
    "about": "In coding theory, burst error-correcting codes employ methods of correcting burst errors, which are errors that occur in many consecutive bits rather than occurring in bits independently of each other.", 
    "classification": "Error Detection And Correction", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Burst_error-correcting_code\n", 
    "full_text": "In coding theory, burst error-correcting codes employ methods of correcting burst errors, which are errors that occur in many consecutive bits rather than occurring in bits independently of each other.\nMany codes have been designed to correct random errors. Sometimes, however, channels may introduce errors which are localized in a short interval. Such errors occur in a burst (called burst errors) because they occur in many consecutive bits. Examples of burst errors can be found extensively in storage mediums. These errors may be due to physical damage such as scratch on a disc or a stroke of lightning in case of wireless channels. They are not independent; they tend to be spatially concentrated. If one bit has an error, it is likely that the adjacent bits could also be corrupted. The methods used to correct random errors are inefficient to correct burst errors.\n\n\nA burst of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n[1]\nSay a codeword \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is transmitted, and it is received as \n\n\n\nY\n=\nC\n+\nE\n.\n\n\n{\\displaystyle Y=C+E.}\n\n Then, the error vector \n\n\n\nE\n\n\n{\\displaystyle E}\n\n is called a burst of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n if the nonzero components of \n\n\n\nE\n\n\n{\\displaystyle E}\n\n are confined to \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n consecutive components. For example, \n\n\n\nE\n=\n(\n0\n\n\n1000011\n\n\n0\n)\n\n\n{\\displaystyle E=(0{\\textbf {1000011}}0)}\n\n is a burst of length \n\n\n\n\u2113\n=\n7.\n\n\n{\\displaystyle \\ell =7.}\n\n\nAlthough this definition is sufficient to describe what a burst error is, the majority of the tools developed for burst error correction rely on cyclic codes. This motivates our next definition.\nA cyclic burst of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n[1]\nAn error vector \n\n\n\nE\n\n\n{\\displaystyle E}\n\n is called a cyclic burst error of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n if its nonzero components are confined to \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n cyclically consecutive components. For example, the previously considered error vector \n\n\n\nE\n=\n(\n010000110\n)\n\n\n{\\displaystyle E=(010000110)}\n\n, is a cyclic burst of length \n\n\n\n\u2113\n=\n5\n\n\n{\\displaystyle \\ell =5}\n\n, since we consider the error starting at position \n\n\n\n6\n\n\n{\\displaystyle 6}\n\n and ending at position \n\n\n\n1\n\n\n{\\displaystyle 1}\n\n. Notice the indices are \n\n\n\n0\n\n\n{\\displaystyle 0}\n\n-based, that is, the first element is at position \n\n\n\n0\n\n\n{\\displaystyle 0}\n\n.\nFor the remainder of this article, we will use the term burst to refer to a cyclic burst, unless noted otherwise.\nIt is often useful to have a compact definition of a burst error, that encompasses not only its length, but also the pattern, and location of such error. We define a burst description to be a tuple \n\n\n\n(\nP\n,\nL\n)\n\n\n{\\displaystyle (P,L)}\n\n where \n\n\n\nP\n\n\n{\\displaystyle P}\n\n is the pattern of the error (that is the string of symbols beginning with the first nonzero entry in the error pattern, and ending with the last nonzero symbol), and \n\n\n\nL\n\n\n{\\displaystyle L}\n\n is the location, on the codeword, where the burst can be found.[1]\nFor example, the burst description of the error pattern \n\n\n\nE\n=\n(\n010000110\n)\n\n\n{\\displaystyle E=(010000110)}\n\n is \n\n\n\nD\n=\n(\n1000011\n,\n1\n)\n\n\n{\\displaystyle D=(1000011,1)}\n\n. Notice that such description is not unique, because \n\n\n\n\nD\n\u2032\n\n=\n(\n11001\n,\n6\n)\n\n\n{\\displaystyle D'=(11001,6)}\n\n describes the same burst error. In general, if the number of nonzero components in \n\n\n\nE\n\n\n{\\displaystyle E}\n\n is \n\n\n\nw\n\n\n{\\displaystyle w}\n\n, then \n\n\n\nE\n\n\n{\\displaystyle E}\n\n will have \n\n\n\nw\n\n\n{\\displaystyle w}\n\n different burst descriptions each starting at a different nonzero entry of \n\n\n\nE\n\n\n{\\displaystyle E}\n\n. To remedy the issues that arise by the ambiguity of burst descriptions with the theorem below, however before doing so we need a definition first.\nDefinition. The number of symbols in a given error pattern \n\n\n\ny\n,\n\n\n{\\displaystyle y,}\n\n is denoted by \n\n\n\n\nl\ne\nn\ng\nt\nh\n\n(\ny\n)\n.\n\n\n{\\displaystyle \\mathrm {length} (y).}\n\n\nA corollary of the above theorem is that we cannot have two distinct burst descriptions for bursts of length \n\n\n\n\n\n\n1\n2\n\n\n\n(\nn\n+\n1\n)\n.\n\n\n{\\displaystyle {\\tfrac {1}{2}}(n+1).}\n\n\nCyclic codes are defined as follows: think of the \n\n\n\nq\n\n\n{\\displaystyle q}\n\n symbols as elements in \n\n\n\n\n\nF\n\n\nq\n\n\n\n\n{\\displaystyle \\mathbb {F} _{q}}\n\n. Now, we can think of words as polynomials over \n\n\n\n\n\nF\n\n\nq\n\n\n,\n\n\n{\\displaystyle \\mathbb {F} _{q},}\n\n where the individual symbols of a word correspond to the different coefficients of the polynomial. To define a cyclic code, we pick a fixed polynomial, called generator polynomial. The codewords of this cyclic code are all the polynomials that are divisible by this generator polynomial.\nCodewords are polynomials of degree \n\n\n\n\u2a7d\nn\n\u2212\n1\n\n\n{\\displaystyle \\leqslant n-1}\n\n. Suppose that the generator polynomial \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n has degree \n\n\n\nr\n\n\n{\\displaystyle r}\n\n. Polynomials of degree \n\n\n\n\u2a7d\nn\n\u2212\n1\n\n\n{\\displaystyle \\leqslant n-1}\n\n that are divisible by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n result from multiplying \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n by polynomials of degree \n\n\n\n\u2a7d\nn\n\u2212\n1\n\u2212\nr\n\n\n{\\displaystyle \\leqslant n-1-r}\n\n. We have \n\n\n\n\nq\n\nn\n\u2212\nr\n\n\n\n\n{\\displaystyle q^{n-r}}\n\n such polynomials. Each one of them corresponds to a codeword. Therefore, \n\n\n\nk\n=\nn\n\u2212\nr\n\n\n{\\displaystyle k=n-r}\n\n for cyclic codes.\nCyclic codes can detect all bursts of length up to \n\n\n\n\u2113\n=\nn\n\u2212\nk\n=\nr\n\n\n{\\displaystyle \\ell =n-k=r}\n\n. We will see later that the burst error detection ability of any \n\n\n\n(\nn\n,\nk\n)\n\n\n{\\displaystyle (n,k)}\n\n code is bounded from above by \n\n\n\n\u2113\n\u2a7d\nn\n\u2212\nk\n\n\n{\\displaystyle \\ell \\leqslant n-k}\n\n. Cyclic codes are considered optimal for burst error detection since they meet this upper bound:\nThe above proof suggests a simple algorithm for burst error detection/correction in cyclic codes: given a transmitted word (i.e. a polynomial of degree \n\n\n\n\u2a7d\nn\n\u2212\n1\n\n\n{\\displaystyle \\leqslant n-1}\n\n), compute the remainder of this word when divided by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n. If the remainder is zero (i.e. if the word is divisible by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n), then it is a valid codeword. Otherwise, report an error. To correct this error, subtract this remainder from the transmitted word. The subtraction result is going to be divisible by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n (i.e. it is going to be a valid codeword).\nBy the upper bound on burst error detection (\n\n\n\n\u2113\n\u2a7d\nn\n\u2212\nk\n=\nr\n\n\n{\\displaystyle \\ell \\leqslant n-k=r}\n\n), we know that a cyclic code can not detect all bursts of length \n\n\n\n\u2113\n>\nr\n\n\n{\\displaystyle \\ell >r}\n\n. However cyclic codes can indeed detect most bursts of length \n\n\n\n>\nr\n\n\n{\\displaystyle >r}\n\n. The reason is that detection fails only when the burst is divisible by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n. Over binary alphabets, there exist \n\n\n\n\n2\n\n\u2113\n\u2212\n2\n\n\n\n\n{\\displaystyle 2^{\\ell -2}}\n\n bursts of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n. Out of those, only \n\n\n\n\n2\n\n\u2113\n\u2212\n2\n\u2212\nr\n\n\n\n\n{\\displaystyle 2^{\\ell -2-r}}\n\n are divisible by \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n. Therefore, the detection failure probability is very small (\n\n\n\n\n2\n\n\u2212\nr\n\n\n\n\n{\\displaystyle 2^{-r}}\n\n) assuming a uniform distribution over all bursts of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n.\nWe now consider a fundamental theorem about cyclic codes that will aid in designing efficient burst-error correcting codes, by categorizing bursts into different cosets.\nBy upper bound, we mean a limit on our error detection ability that we can never go beyond. Suppose that we want to design an \n\n\n\n(\nn\n,\nk\n)\n\n\n{\\displaystyle (n,k)}\n\n code that can detect all burst errors of length \n\n\n\n\u2a7d\n\u2113\n.\n\n\n{\\displaystyle \\leqslant \\ell .}\n\n A natural question to ask is: given \n\n\n\nn\n\n\n{\\displaystyle n}\n\n and \n\n\n\nk\n\n\n{\\displaystyle k}\n\n, what is the maximum \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n that we can never achieve beyond? In other words, what is the upper bound on the length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n of bursts that we can detect using any \n\n\n\n(\nn\n,\nk\n)\n\n\n{\\displaystyle (n,k)}\n\n code? The following theorem provides an answer to this question.\nNow, we repeat the same question but for error correction: given \n\n\n\nn\n\n\n{\\displaystyle n}\n\n and \n\n\n\nk\n\n\n{\\displaystyle k}\n\n, what is the upper bound on the length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n of bursts that we can correct using any \n\n\n\n(\nn\n,\nk\n)\n\n\n{\\displaystyle (n,k)}\n\n code? The following theorem provides a preliminary answer to this question:\nA stronger result is given by the Rieger bound:\nDefinition. A linear burst-error-correcting code achieving the above Rieger bound is called an optimal burst-error-correcting code.\nThere is more than one upper bound on the achievable code rate of linear block codes for multiple phased-burst correction (MPBC). One such bound is constrained to a maximum correctable cyclic burst length within every subblock, or equivalently a constraint on the minimum error free length or gap within every phased-burst. This bound, when reduced to the special case of a bound for single burst correction, is the Abramson bound (a corollary of the Hamming bound for burst-error correction) when the cyclic burst length is less than half the block length.[3]\nRemark. \n\n\n\nr\n=\nn\n\u2212\nk\n\n\n{\\displaystyle r=n-k}\n\n is called the redundancy of the code and in an alternative formulation for the Abramson's bounds is \n\n\n\nr\n\u2a7e\n\u2308\n\nlog\n\n2\n\n\n\u2061\n(\nn\n+\n1\n)\n\u2309\n+\n\u2113\n\u2212\n1.\n\n\n{\\displaystyle r\\geqslant \\lceil \\log _{2}(n+1)\\rceil +\\ell -1.}\n\n\nWhile cyclic codes in general are powerful tools for detecting burst errors, we now consider a family of binary cyclic codes named Fire Codes, which possess good single burst error correction capabilities. By single burst, say of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n, we mean that all errors that a received codeword possess lie within a fixed span of \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n digits.\nLet \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n be an irreducible polynomial of degree \n\n\n\nm\n\n\n{\\displaystyle m}\n\n over \n\n\n\n\n\nF\n\n\n2\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2}}\n\n, and let \n\n\n\np\n\n\n{\\displaystyle p}\n\n be the period of \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n. The period of \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n, and indeed of any polynomial, is defined to be the least positive integer \n\n\n\nr\n\n\n{\\displaystyle r}\n\n such that \n\n\n\np\n(\nx\n)\n\n|\n\n\nx\n\nr\n\n\n\u2212\n1.\n\n\n{\\displaystyle p(x)|x^{r}-1.}\n\n Let \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n be a positive integer satisfying \n\n\n\n\u2113\n\u2a7d\nm\n\n\n{\\displaystyle \\ell \\leqslant m}\n\n and \n\n\n\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle 2\\ell -1}\n\n not divisible by \n\n\n\np\n\n\n{\\displaystyle p}\n\n, where \n\n\n\np\n\n\n{\\displaystyle p}\n\n is the period of \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n. Define the Fire Code \n\n\n\nG\n\n\n{\\displaystyle G}\n\n by the following generator polynomial:\nWe will show that \n\n\n\nG\n\n\n{\\displaystyle G}\n\n is an \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n-burst-error correcting code.\nA corollary to Lemma 2 is that since \n\n\n\np\n(\nx\n)\n=\n\nx\n\np\n\n\n\u2212\n1\n\n\n{\\displaystyle p(x)=x^{p}-1}\n\n has period \n\n\n\np\n\n\n{\\displaystyle p}\n\n, then \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n divides \n\n\n\n\nx\n\nk\n\n\n\u2212\n1\n\n\n{\\displaystyle x^{k}-1}\n\n if and only if \n\n\n\np\n\n|\n\nk\n\n\n{\\displaystyle p|k}\n\n.\nIf we can show that all bursts of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n or less occur in different cosets, we can use them as coset leaders that form correctable error patterns. The reason is simple: we know that each coset has a unique syndrome decoding associated with it, and if all bursts of different lengths occur in different cosets, then all have unique syndromes, facilitating error correction.\nLet \n\n\n\n\nx\n\ni\n\n\na\n(\nx\n)\n\n\n{\\displaystyle x^{i}a(x)}\n\n and \n\n\n\n\nx\n\nj\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle x^{j}b(x)}\n\n be polynomials with degrees \n\n\n\n\n\u2113\n\n1\n\n\n\u2212\n1\n\n\n{\\displaystyle \\ell _{1}-1}\n\n and \n\n\n\n\n\u2113\n\n2\n\n\n\u2212\n1\n\n\n{\\displaystyle \\ell _{2}-1}\n\n, representing bursts of length \n\n\n\n\n\u2113\n\n1\n\n\n\n\n{\\displaystyle \\ell _{1}}\n\n and \n\n\n\n\n\u2113\n\n2\n\n\n\n\n{\\displaystyle \\ell _{2}}\n\n respectively with \n\n\n\n\n\u2113\n\n1\n\n\n,\n\n\u2113\n\n2\n\n\n\u2a7d\n\u2113\n.\n\n\n{\\displaystyle \\ell _{1},\\ell _{2}\\leqslant \\ell .}\n\n The integers \n\n\n\ni\n,\nj\n\n\n{\\displaystyle i,j}\n\n represent the starting positions of the bursts, and are less than the block length of the code. For contradiction sake, assume that \n\n\n\n\nx\n\ni\n\n\na\n(\nx\n)\n\n\n{\\displaystyle x^{i}a(x)}\n\n and \n\n\n\n\nx\n\nj\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle x^{j}b(x)}\n\n are in the same coset. Then, \n\n\n\nv\n(\nx\n)\n=\n\nx\n\ni\n\n\na\n(\nx\n)\n+\n\nx\n\nj\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle v(x)=x^{i}a(x)+x^{j}b(x)}\n\n is a valid codeword (since both terms are in the same coset). Without loss of generality, pick \n\n\n\ni\n\u2a7d\nj\n\n\n{\\displaystyle i\\leqslant j}\n\n. By the division theorem we can write: \n\n\n\nj\n\u2212\ni\n=\ng\n(\n2\n\u2113\n\u2212\n1\n)\n+\nr\n,\n\n\n{\\displaystyle j-i=g(2\\ell -1)+r,}\n\n for integers \n\n\n\ng\n\n\n{\\displaystyle g}\n\n and \n\n\n\nr\n,\n0\n\u2a7d\nr\n<\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle r,0\\leqslant r<2\\ell -1}\n\n. We rewrite the polynomial \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n as follows:\nNotice that at the second manipulation, we introduced the term \n\n\n\n2\n\nx\n\ni\n+\nr\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle 2x^{i+r}b(x)}\n\n. We are allowed to do so, since Fire Codes operate on \n\n\n\n\n\nF\n\n\n2\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2}}\n\n. By our assumption, \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n is a valid codeword, and thus, must be a multiple of \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n. As mentioned earlier, since the factors of \n\n\n\ng\n(\nx\n)\n\n\n{\\displaystyle g(x)}\n\n are relatively prime, \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n has to be divisible by \n\n\n\n\nx\n\n2\n\u2113\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle x^{2\\ell -1}+1}\n\n. Looking closely at the last expression derived for \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n we notice that \n\n\n\n\nx\n\ng\n(\n2\n\u2113\n\u2212\n1\n)\n\n\n+\n1\n\n\n{\\displaystyle x^{g(2\\ell -1)}+1}\n\n is divisible by \n\n\n\n\nx\n\n2\n\u2113\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle x^{2\\ell -1}+1}\n\n (by the corollary of Lemma 2). Therefore, \n\n\n\na\n(\nx\n)\n+\n\nx\n\nb\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle a(x)+x^{b}b(x)}\n\n is either divisible by \n\n\n\n\nx\n\n2\n\u2113\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle x^{2\\ell -1}+1}\n\n or is \n\n\n\n0\n\n\n{\\displaystyle 0}\n\n. Applying the division theorem again, we see that there exists a polynomial \n\n\n\nd\n(\nx\n)\n\n\n{\\displaystyle d(x)}\n\n with degree \n\n\n\n\u03b4\n\n\n{\\displaystyle \\delta }\n\n such that:\nThen we may write:\nEquating the degree of both sides, gives us \n\n\n\nb\n=\n2\n\u2113\n\u2212\n\n\u2113\n\n2\n\n\n+\n\u03b4\n.\n\n\n{\\displaystyle b=2\\ell -\\ell _{2}+\\delta .}\n\n Since \n\n\n\n\n\u2113\n\n1\n\n\n,\n\n\u2113\n\n2\n\n\n\u2a7d\n\u2113\n\n\n{\\displaystyle \\ell _{1},\\ell _{2}\\leqslant \\ell }\n\n we can conclude \n\n\n\nb\n\u2a7e\n\u2113\n+\n\u03b4\n,\n\n\n{\\displaystyle b\\geqslant \\ell +\\delta ,}\n\n which implies \n\n\n\nb\n>\n\u2113\n\u2212\n1\n\n\n{\\displaystyle b>\\ell -1}\n\n and \n\n\n\nb\n>\n\u03b4\n\n\n{\\displaystyle b>\\delta }\n\n. Notice that in the expansion:\nthe term \n\n\n\n\nx\n\nb\n\n\n\n\n{\\displaystyle x^{b}}\n\n appears, but since \n\n\n\n\u03b4\n<\nb\n<\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle \\delta <b<2\\ell -1}\n\n, the resulting expression \n\n\n\nd\n(\nx\n)\n(\n\nx\n\n2\n\u2113\n\u2212\n1\n\n\n+\n1\n)\n\n\n{\\displaystyle d(x)(x^{2\\ell -1}+1)}\n\n does not contain \n\n\n\n\nx\n\nb\n\n\n\n\n{\\displaystyle x^{b}}\n\n, therefore \n\n\n\nd\n(\nx\n)\n=\n0\n\n\n{\\displaystyle d(x)=0}\n\n and subsequently \n\n\n\na\n(\nx\n)\n+\n\nx\n\nb\n\n\nb\n(\nx\n)\n=\n0.\n\n\n{\\displaystyle a(x)+x^{b}b(x)=0.}\n\n This requires that \n\n\n\nb\n=\n0\n\n\n{\\displaystyle b=0}\n\n, and \n\n\n\na\n(\nx\n)\n=\nb\n(\nx\n)\n\n\n{\\displaystyle a(x)=b(x)}\n\n. We can further revise our division of \n\n\n\nj\n\u2212\ni\n\n\n{\\displaystyle j-i}\n\n by \n\n\n\ng\n(\n2\n\u2113\n\u2212\n1\n)\n\n\n{\\displaystyle g(2\\ell -1)}\n\n to reflect \n\n\n\nb\n=\n0\n,\n\n\n{\\displaystyle b=0,}\n\n that is \n\n\n\nj\n\u2212\ni\n=\ng\n(\n2\n\u2113\n\u2212\n1\n)\n\n\n{\\displaystyle j-i=g(2\\ell -1)}\n\n. Substituting back into \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n gives us,\nSince \n\n\n\ndeg\n\u2061\n(\nb\n(\nx\n)\n)\n=\n\n\u2113\n\n2\n\n\n\u2212\n1\n<\n\u2113\n\n\n{\\displaystyle \\deg(b(x))=\\ell _{2}-1<\\ell }\n\n, we have \n\n\n\ndeg\n\u2061\n(\nb\n(\nx\n)\n)\n<\ndeg\n\u2061\n(\np\n(\nx\n)\n)\n=\nm\n\n\n{\\displaystyle \\deg(b(x))<\\deg(p(x))=m}\n\n. But \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n is irreducible, therefore \n\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle b(x)}\n\n and \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n must be relatively prime. Since \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n is a codeword, \n\n\n\n\nx\n\nj\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle x^{j-1}+1}\n\n must be divisible by \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n, as it cannot be divisible by \n\n\n\n\nx\n\n2\n\u2113\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle x^{2\\ell -1}+1}\n\n. Therefore, \n\n\n\nj\n\u2212\ni\n\n\n{\\displaystyle j-i}\n\n must be a multiple of \n\n\n\np\n\n\n{\\displaystyle p}\n\n. But it must also be a multiple of \n\n\n\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle 2\\ell -1}\n\n, which implies it must be a multiple of \n\n\n\nn\n=\n\nlcm\n\n(\n2\n\u2113\n\u2212\n1\n,\np\n)\n\n\n{\\displaystyle n={\\text{lcm}}(2\\ell -1,p)}\n\n but that is precisely the block-length of the code. Therefore, \n\n\n\nj\n\u2212\ni\n\n\n{\\displaystyle j-i}\n\n cannot be a multiple of \n\n\n\nn\n\n\n{\\displaystyle n}\n\n since they are both less than \n\n\n\nn\n\n\n{\\displaystyle n}\n\n. Thus, our assumption of \n\n\n\nv\n(\nx\n)\n\n\n{\\displaystyle v(x)}\n\n being a codeword is incorrect, and therefore \n\n\n\n\nx\n\ni\n\n\na\n(\nx\n)\n\n\n{\\displaystyle x^{i}a(x)}\n\n and \n\n\n\n\nx\n\nj\n\n\nb\n(\nx\n)\n\n\n{\\displaystyle x^{j}b(x)}\n\n are in different cosets, with unique syndromes, and therefore correctable.\nWith the theory presented in the above section, let us consider the construction of a \n\n\n\n5\n\n\n{\\displaystyle 5}\n\n-burst error correcting Fire Code. Remember that to construct a Fire Code, we need an irreducible polynomial \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n, an integer \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n, representing the burst error correction capability of our code, and we need to satisfy the property that \n\n\n\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle 2\\ell -1}\n\n is not divisible by the period of \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n. With these requirements in mind, consider the irreducible polynomial \n\n\n\np\n(\nx\n)\n=\n1\n+\n\nx\n\n2\n\n\n+\n\nx\n\n5\n\n\n\n\n{\\displaystyle p(x)=1+x^{2}+x^{5}}\n\n, and let \n\n\n\n\u2113\n=\n5\n\n\n{\\displaystyle \\ell =5}\n\n. Since \n\n\n\np\n(\nx\n)\n\n\n{\\displaystyle p(x)}\n\n is a primitive polynomial, its period is \n\n\n\n\n2\n\n5\n\n\n\u2212\n1\n=\n31\n\n\n{\\displaystyle 2^{5}-1=31}\n\n. We confirm that \n\n\n\n2\n\u2113\n\u2212\n1\n=\n9\n\n\n{\\displaystyle 2\\ell -1=9}\n\n is not divisible by \n\n\n\n31\n\n\n{\\displaystyle 31}\n\n. Thus,\nis a Fire Code generator. We can calculate the block-length of the code by evaluating the least common multiple of \n\n\n\np\n\n\n{\\displaystyle p}\n\n and \n\n\n\n2\n\u2113\n\u2212\n1\n\n\n{\\displaystyle 2\\ell -1}\n\n. In other words, \n\n\n\nn\n=\n\nlcm\n\n(\n9\n,\n31\n)\n=\n279\n\n\n{\\displaystyle n={\\text{lcm}}(9,31)=279}\n\n. Thus, the Fire Code above is a cyclic code capable of correcting any burst of length \n\n\n\n5\n\n\n{\\displaystyle 5}\n\n or less.\nCertain families of codes, such as Reed\u2013Solomon, operate on alphabet sizes larger than binary. This property awards such codes powerful burst error correction capabilities. Consider a code operating on \n\n\n\n\n\nF\n\n\n\n2\n\nm\n\n\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2^{m}}}\n\n. Each symbol of the alphabet can be represented by \n\n\n\nm\n\n\n{\\displaystyle m}\n\n bits. If \n\n\n\nC\n\n\n{\\displaystyle C}\n\n is an \n\n\n\n(\nn\n,\nk\n)\n\n\n{\\displaystyle (n,k)}\n\n Reed\u2013Solomon code over \n\n\n\n\n\nF\n\n\n\n2\n\nm\n\n\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2^{m}}}\n\n, we can think of \n\n\n\nC\n\n\n{\\displaystyle C}\n\n as an \n\n\n\n[\nm\nn\n,\nm\nk\n\n]\n\n2\n\n\n\n\n{\\displaystyle [mn,mk]_{2}}\n\n code over \n\n\n\n\n\nF\n\n\n2\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2}}\n\n.\nThe reason such codes are powerful for burst error correction is that each symbol is represented by \n\n\n\nm\n\n\n{\\displaystyle m}\n\n bits, and in general, it is irrelevant how many of those \n\n\n\nm\n\n\n{\\displaystyle m}\n\n bits are erroneous; whether a single bit, or all of the \n\n\n\nm\n\n\n{\\displaystyle m}\n\n bits contain errors, from a decoding perspective it is still a single symbol error. In other words, since burst errors tend to occur in clusters, there is a strong possibility of several binary errors contributing to a single symbol error.\nNotice that a burst of \n\n\n\n(\nm\n+\n1\n)\n\n\n{\\displaystyle (m+1)}\n\n errors can affect at most \n\n\n\n2\n\n\n{\\displaystyle 2}\n\n symbols, and a burst of \n\n\n\n2\nm\n+\n1\n\n\n{\\displaystyle 2m+1}\n\n can affect at most \n\n\n\n3\n\n\n{\\displaystyle 3}\n\n symbols. Then, a burst of \n\n\n\nt\nm\n+\n1\n\n\n{\\displaystyle tm+1}\n\n can affect at most \n\n\n\nt\n+\n1\n\n\n{\\displaystyle t+1}\n\n symbols; this implies that a \n\n\n\nt\n\n\n{\\displaystyle t}\n\n-symbols-error correcting code can correct a burst of length at most \n\n\n\n(\nt\n\u2212\n1\n)\nm\n+\n1\n\n\n{\\displaystyle (t-1)m+1}\n\n.\nIn general, a \n\n\n\nt\n\n\n{\\displaystyle t}\n\n-error correcting Reed\u2013Solomon code over \n\n\n\n\n\nF\n\n\n\n2\n\nm\n\n\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2^{m}}}\n\n can correct any combination of\nor fewer bursts of length \n\n\n\nl\n\n\n{\\displaystyle l}\n\n, on top of being able to correct \n\n\n\nt\n\n\n{\\displaystyle t}\n\n-random worst case errors.\nLet \n\n\n\nG\n\n\n{\\displaystyle G}\n\n be a \n\n\n\n[\n255\n,\n223\n,\n33\n]\n\n\n{\\displaystyle [255,223,33]}\n\n RS code over \n\n\n\n\n\nF\n\n\n\n2\n\n8\n\n\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2^{8}}}\n\n. This code was employed by NASA in their Cassini-Huygens spacecraft.[6] It is capable of correcting \n\n\n\n\u230a\n33\n\n/\n\n2\n\u230b\n=\n16\n\n\n{\\displaystyle \\lfloor 33/2\\rfloor =16}\n\n symbol errors. We now construct a Binary RS Code \n\n\n\n\nG\n\u2032\n\n\n\n{\\displaystyle G'}\n\n from \n\n\n\nG\n\n\n{\\displaystyle G}\n\n. Each symbol will be written using \n\n\n\n\u2308\n\nlog\n\n2\n\n\n\u2061\n(\n255\n)\n\u2309\n=\n8\n\n\n{\\displaystyle \\lceil \\log _{2}(255)\\rceil =8}\n\n bits. Therefore, the Binary RS code will have \n\n\n\n[\n2040\n,\n1784\n,\n33\n\n]\n\n2\n\n\n\n\n{\\displaystyle [2040,1784,33]_{2}}\n\n as its parameters. It is capable of correcting any single burst of length \n\n\n\nl\n=\n121\n\n\n{\\displaystyle l=121}\n\n.\nInterleaving is used to convert convolutional codes from random error correctors to burst error correctors. The basic idea behind the use of interleaved codes is to jumble symbols at the receiver. This leads to randomization of bursts of received errors which are closely located and we can then apply the analysis for random channel. Thus, the main function performed by the interleaver at transmitter is to alter the input symbol sequence. At the receiver, the deinterleaver will alter the received sequence to get back the original unaltered sequence at the transmitter.\nThe figure below shows a 4 by 3 interleaver.\nThe above interleaver is called as a block interleaver. Here, the input symbols are written sequentially in the rows and the output symbols are obtained by reading the columns sequentially. Thus, this is in the form of \n\n\n\nM\n\u00d7\nN\n\n\n{\\displaystyle M\\times N}\n\n array. Generally, \n\n\n\nN\n\n\n{\\displaystyle N}\n\n is length of the codeword.\nCapacity of block interleaver: For an \n\n\n\nM\n\u00d7\nN\n\n\n{\\displaystyle M\\times N}\n\n block interleaver and burst of length \n\n\n\n\u2113\n,\n\n\n{\\displaystyle \\ell ,}\n\n the upper limit on number of errors is \n\n\n\n\n\n\n\u2113\nM\n\n\n\n.\n\n\n{\\displaystyle {\\tfrac {\\ell }{M}}.}\n\n This is obvious from the fact that we are reading the output column wise and the number of rows is \n\n\n\nM\n\n\n{\\displaystyle M}\n\n. By the theorem above for error correction capacity up to \n\n\n\nt\n,\n\n\n{\\displaystyle t,}\n\n the maximum burst length allowed is \n\n\n\nM\nt\n.\n\n\n{\\displaystyle Mt.}\n\n For burst length of \n\n\n\nM\nt\n+\n1\n\n\n{\\displaystyle Mt+1}\n\n, the decoder may fail.\nEfficiency of block interleaver (\n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n): It is found by taking ratio of burst length where decoder may fail to the interleaver memory. Thus, we can formulate \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n as\nDrawbacks of block interleaver\u00a0: As it is clear from the figure, the columns are read sequentially, the receiver can interpret single row only after it receives complete message and not before that. Also, the receiver requires a considerable amount of memory in order to store the received symbols and has to store the complete message. Thus, these factors give rise to two drawbacks, one is the latency and other is the storage (fairly large amount of memory). These drawbacks can be avoided by using the convolutional interleaver described below.\nCross interleaver is a kind of multiplexer-demultiplexer system. In this system, delay lines are used to progressively increase length. Delay line is basically an electronic circuit used to delay the signal by certain time duration. Let \n\n\n\nn\n\n\n{\\displaystyle n}\n\n be the number of delay lines and \n\n\n\nd\n\n\n{\\displaystyle d}\n\n be the number of symbols introduced by each delay line. Thus, the separation between consecutive inputs = \n\n\n\nn\nd\n\n\n{\\displaystyle nd}\n\n symbols Let the length of codeword \n\n\n\n\u2a7d\nn\n.\n\n\n{\\displaystyle \\leqslant n.}\n\n Thus, each symbol in the input codeword will be on distinct delay line. Let a burst error of length \n\n\n\n\u2113\n\n\n{\\displaystyle \\ell }\n\n occur. Since the separation between consecutive symbols is \n\n\n\nn\nd\n,\n\n\n{\\displaystyle nd,}\n\n the number of errors that the deinterleaved output may contain is \n\n\n\n\n\n\n\u2113\n\nn\nd\n+\n1\n\n\n\n\n.\n\n\n{\\displaystyle {\\tfrac {\\ell }{nd+1}}.}\n\n By the theorem above, for error correction capacity up to \n\n\n\nt\n\n\n{\\displaystyle t}\n\n, maximum burst length allowed is \n\n\n\n(\nn\nd\n+\n1\n)\n(\nt\n\u2212\n1\n)\n.\n\n\n{\\displaystyle (nd+1)(t-1).}\n\n For burst length of \n\n\n\n(\nn\nd\n+\n1\n)\n(\nt\n\u2212\n1\n)\n+\n1\n,\n\n\n{\\displaystyle (nd+1)(t-1)+1,}\n\n decoder may fail.\nEfficiency of cross interleaver (\n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n): It is found by taking the ratio of burst length where decoder may fail to the interleaver memory. In this case, the memory of interleaver can be calculated as\nThus, we can formulate \n\n\n\n\u03b3\n\n\n{\\displaystyle \\gamma }\n\n as follows:\nPerformance of cross interleaver\u00a0: As shown in the above interleaver figure, the output is nothing but the diagonal symbols generated at the end of each delay line. In this case, when the input multiplexer switch completes around half switching, we can read first row at the receiver. Thus, we need to store maximum of around half message at receiver in order to read first row. This drastically brings down the storage requirement by half. Since just half message is now required to read first row, the latency is also reduced by half which is good improvement over the block interleaver. Thus, the total interleaver memory is split between transmitter and receiver.\nWithout error correcting codes, digital audio would not be technically feasible.[7] The Reed\u2013Solomon codes can correct a corrupted symbol with a single bit error just as easily as it can correct a symbol with all bits wrong. This makes the RS codes particularly suitable for correcting burst errors.[5] By far, the most common application of RS codes is in compact discs. In addition to basic error correction provided by RS codes, protection against burst errors due to scratches on the disc is provided by a cross interleaver.[3]\nCurrent compact disc digital audio system was developed by N. V. Philips of The Netherlands and Sony Corporation of Japan (agreement signed in 1979).\nA compact disc comprises a 120\u00a0mm aluminized disc coated with a clear plastic coating, with spiral track, approximately 5\u00a0km in length, which is optically scanned by a laser of wavelength ~0.8 \u03bcm, at a constant speed of ~1.25\u00a0m/s. For achieving this constant speed, rotation of the disc is varied from ~8 rev/s while scanning at the inner portion of the track to ~3.5 rev/s at the outer portion. Pits and lands are the depressions (0.12 \u03bcm deep) and flat segments constituting the binary data along the track (0.6 \u03bcm width).[8]\nThe CD process can be abstracted as a sequence of the following sub-processes: -> Channel encoding of source of signals -> Mechanical sub-processes of preparing a master disc, producing user discs and sensing the signals embedded on user discs while playing \u2013 the channel -> Decoding the signals sensed from user discs\nThe process is subject to both burst errors and random errors.[7] Burst errors include those due to disc material (defects of aluminum reflecting film, poor reflective index of transparent disc material), disc production (faults during disc forming and disc cutting etc.), disc handling (scratches \u2013 generally thin, radial and orthogonal to direction of recording) and variations in play-back mechanism. Random errors include those due to jitter of reconstructed signal wave and interference in signal. CIRC (Cross-Interleaved Reed\u2013Solomon code) is the basis for error detection and correction in the CD process. It corrects error bursts up to 3,500 bits in sequence (2.4\u00a0mm in length as seen on CD surface) and compensates for error bursts up to 12,000 bits (8.5\u00a0mm) that may be caused by minor scratches.\nEncoding: Sound-waves are sampled and converted to digital form by an A/D converter. The sound wave is sampled for amplitude (at 44.1\u00a0kHz or 44,100 pairs, one each for the left and right channels of the stereo sound). The amplitude at an instance is assigned a binary string of length 16. Thus, each sample produces two binary vectors from \n\n\n\n\n\nF\n\n\n2\n\n\n16\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2}^{16}}\n\n or 4 \n\n\n\n\n\nF\n\n\n2\n\n\n8\n\n\n\n\n{\\displaystyle \\mathbb {F} _{2}^{8}}\n\n bytes of data. Every second of sound recorded results in 44,100\u00a0\u00d7\u00a032 = 1,411,200 bits (176,400 bytes) of data.[5] The 1.41 Mbit/s sampled data stream passes through the error correction system eventually getting converted to a stream of 1.88 Mbit/s.\nInput for the encoder consists of input frames each of 24 8-bit symbols (12 16-bit samples from the A/D converter, 6 each from left and right data (sound) sources). A frame can be represented by \n\n\n\n\nL\n\n1\n\n\n\nR\n\n1\n\n\n\nL\n\n2\n\n\n\nR\n\n2\n\n\n\u2026\n\nL\n\n6\n\n\n\nR\n\n6\n\n\n\n\n{\\displaystyle L_{1}R_{1}L_{2}R_{2}\\ldots L_{6}R_{6}}\n\n where \n\n\n\n\nL\n\ni\n\n\n\n\n{\\displaystyle L_{i}}\n\n and \n\n\n\n\nR\n\ni\n\n\n\n\n{\\displaystyle R_{i}}\n\n are bytes from the left and right channels from the \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n sample of the frame.\nInitially, the bytes are permuted to form new frames represented by \n\n\n\n\nL\n\n1\n\n\n\nL\n\n3\n\n\n\nL\n\n5\n\n\n\nR\n\n1\n\n\n\nR\n\n3\n\n\n\nR\n\n5\n\n\n\nL\n\n2\n\n\n\nL\n\n4\n\n\n\nL\n\n6\n\n\n\nR\n\n2\n\n\n\nR\n\n4\n\n\n\nR\n\n6\n\n\n\n\n{\\displaystyle L_{1}L_{3}L_{5}R_{1}R_{3}R_{5}L_{2}L_{4}L_{6}R_{2}R_{4}R_{6}}\n\n where \n\n\n\n\nL\n\ni\n\n\n,\n\nR\n\ni\n\n\n\n\n{\\displaystyle L_{i},R_{i}}\n\nrepresent \n\n\n\n\ni\n\nt\nh\n\n\n\n\n{\\displaystyle i^{th}}\n\n left and right samples from the frame after 2 intervening frames.\nNext, these 24 message symbols are encoded using C2 (28,24,5) Reed\u2013Solomon code which is a shortened RS code over \n\n\n\n\n\nF\n\n\n256\n\n\n\n\n{\\displaystyle \\mathbb {F} _{256}}\n\n. This is two-error-correcting, being of minimum distance 5. This adds 4 bytes of redundancy, \n\n\n\n\nP\n\n1\n\n\n\nP\n\n2\n\n\n\n\n{\\displaystyle P_{1}P_{2}}\n\n forming a new frame: \n\n\n\n\nL\n\n1\n\n\n\nL\n\n3\n\n\n\nL\n\n5\n\n\n\nR\n\n1\n\n\n\nR\n\n3\n\n\n\nR\n\n5\n\n\n\nP\n\n1\n\n\n\nP\n\n2\n\n\n\nL\n\n2\n\n\n\nL\n\n4\n\n\n\nL\n\n6\n\n\n\nR\n\n2\n\n\n\nR\n\n4\n\n\n\nR\n\n6\n\n\n\n\n{\\displaystyle L_{1}L_{3}L_{5}R_{1}R_{3}R_{5}P_{1}P_{2}L_{2}L_{4}L_{6}R_{2}R_{4}R_{6}}\n\n. The resulting 28-symbol codeword is passed through a (28.4) cross interleaver leading to 28 interleaved symbols. These are then passed through C1 (32,28,5) RS code, resulting in codewords of 32 coded output symbols. Further regrouping of odd numbered symbols of a codeword with even numbered symbols of the next codeword is done to break up any short bursts that may still be present after the above 4-frame delay interleaving. Thus, for every 24 input symbols there will be 32 output symbols giving \n\n\n\nR\n=\n24\n\n/\n\n32\n\n\n{\\displaystyle R=24/32}\n\n. Finally one byte of control and display information is added.[5] Each of the 33 bytes is then converted to 17 bits through EFM (eight to fourteen modulation) and addition of 3 merge bits. Therefore, the frame of six samples results in 33 bytes \u00d7\u00a017 bits (561 bits) to which are added 24 synchronization bits and 3 merging bits yielding a total of 588 bits.\nDecoding: The CD player (CIRC decoder) receives the 32 output symbol data stream. This stream passes through the decoder D1 first. It is up to individual designers of CD systems to decide on decoding methods and optimize their product performance. Being of minimum distance 5 The D1,D2 decoders can each correct a combination of \n\n\n\ne\n\n\n{\\displaystyle e}\n\n errors and \n\n\n\nf\n\n\n{\\displaystyle f}\n\n erasures such that \n\n\n\n2\ne\n+\nf\n<\n5\n\n\n{\\displaystyle 2e+f<5}\n\n.[5] In most decoding solutions, D1 is designed to correct single error. And in case of more than 1 error, this decoder outputs 28 erasures. The deinterlever at the succeeding stage distributes these erasures across 28 D2 codewords. Again in most solutions, D2 is set to deal with erasures only (a simpler and less expensive solution). If more than 4 erasures were to be encountered, 24 erasures are output by D2. Thereafter, an error concealment system attempts to interpolate (from neighboring symbols) in case of uncorrectable symbols, failing which sounds corresponding to such erroneous symbols get muted.\nPerformance of CIRC:[7] CIRC conceals long bust errors by simple linear interpolation. 2.5\u00a0mm of track length (4000 bits) is the maximum completely correctable burst length. 7.7\u00a0mm track length (12,300 bits) is the maximum burst length that can be interpolated. Sample interpolation rate is one every 10 hours at Bit Error Rate (BER) \n\n\n\n=\n\n10\n\n\u2212\n4\n\n\n\n\n{\\displaystyle =10^{-4}}\n\n and 1000 samples per minute at BER = \n\n\n\n\n10\n\n\u2212\n3\n\n\n\n\n{\\displaystyle 10^{-3}}\n\n Undetectable error samples (clicks): less than one every 750 hours at BER = \n\n\n\n\n10\n\n\u2212\n3\n\n\n\n\n{\\displaystyle 10^{-3}}\n\n and negligible at BER = \n\n\n\n\n10\n\n\u2212\n4\n\n\n\n\n{\\displaystyle 10^{-4}}\n\n.", 
    "name": "Burst Error Correcting Code"
}