{
    "about": "Because matrix multiplication is such a central operation in many numerical algorithms, much work has been invested in making matrix multiplication algorithms efficient. Applications of matrix multiplication in computational problems are found in many fields including scientific computing and pattern recognition and in seemingly unrelated problems such counting the paths through a graph.[1] Many different algorithms have been designed for multiplying matrices on different types of hardware, including parallel and distributed systems, where the computational work is spread over multiple processors (perhaps over a network).", 
    "name": "Matrix Multiplication Algorithm", 
    "classification": "Matrix Multiplication Algorithms", 
    "full_text": "Because matrix multiplication is such a central operation in many numerical algorithms, much work has been invested in making matrix multiplication algorithms efficient. Applications of matrix multiplication in computational problems are found in many fields including scientific computing and pattern recognition and in seemingly unrelated problems such counting the paths through a graph.[1] Many different algorithms have been designed for multiplying matrices on different types of hardware, including parallel and distributed systems, where the computational work is spread over multiple processors (perhaps over a network).\nDirectly applying the mathematical definition of matrix multiplication gives an algorithm that takes time on the order of n3 to multiply two n \u00d7 n matrices (\u0398(n3) in big O notation). Better asymptotic bounds on the time required to multiply matrices have been known since the work of Strassen in the 1960s, but it is still unknown what the optimal time is (i.e., what the complexity of the problem is).\n\n\nThe definition of matrix multiplication is that if C = AB for an n \u00d7 m matrix A and an m \u00d7 p matrix B, then C is an n \u00d7 p matrix with entries\nFrom this, a simple algorithm can be constructed which loops over the indices i from 1 through n and j from 1 through p, computing the above using a nested loop:\nThis algorithms takes time \u0398(nmp) (in asymptotic notation).[1] A common simplification for the purpose of algorithms analysis is to assume that the inputs are all square matrices of size n \u00d7 n, in which case the running time is \u0398(n3), i.e., cubic.[2]\nThe three loops in iterative matrix multiplication can be arbitrarily swapped with each other without an effect on correctness or asymptotic running time. However, the order can have a considerable impact on practical performance due to the memory access patterns and cache use of the algorithm;[1] which order is best also depends on whether the matrices are stored in row-major order, column-major order, or a mix of both.\nIn particular, in the idealized case of a fully associative cache consisting of M cache lines of b bytes each, the above algorithm is sub-optimal for A and B stored in row-major order. When n > M/b, every iteration of the inner loop (a simultaneous sweep through a row of A and a column of B) incurs a cache miss when accessing an element of B. This means that the algorithm incurs \u0398(n3) cache misses in the worst case. As of 2010[update], the speed of memories compared to that of processors is such that the cache misses, rather than the actual calculations, dominate the running time for sizable matrices.[3]\nThe optimal variant of the iterative algorithm for A and B in row-major layout is a tiled version, where the matrix is implicitly divided into square tiles of size \u221aM by \u221aM:[3][4]\nIn the idealized cache model, this algorithm incurs only \u0398(n3/b \u221aM) cache misses; the divisor b \u221aM amounts to several orders of magnitude on modern machines, so that the actual calculations dominate the running time, rather than the cache misses.[3]\nAn alternative to the iterative algorithm is the divide and conquer algorithm for matrix multiplication. This relies on the block partitioning\nwhich works for all square matrices whose dimensions are powers of two, i.e., the shapes are 2n \u00d7 2n for some n. The matrix product is now\nwhich consists of eight multiplications of pairs of submatrices, followed by an addition step. The divide and conquer algorithm computes the smaller multiplications recursively, using the scalar multiplication c11 = a11b11 as its base case.\nThe complexity of this algorithm as a function of n is given by the recurrence[2]\naccounting for the eight recursive calls on matrices of size n/2 and \u0398(n2) to sum the four pairs of resulting matrices element-wise. Application of the master theorem shows this recursion to have the solution \u0398(n3), the same as the iterative algorithm.[2]\nA variant of this algorithm that works for matrices of arbitrary shapes and is faster in practice[3] splits matrices in two instead of four submatrices, as follows.[5] Splitting a matrix now means dividing it into two parts of equal size, or as close to equal sizes as possible in the case of odd dimensions.\nThe cache miss rate of recursive matrix multiplication is the same as that of a tiled iterative version, but unlike that algorithm, the recursive algorithm is cache-oblivious:[5] there is no tuning parameter required to get optimal cache performance, and it behaves well in a multiprogramming environment where cache sizes are effectively dynamic due to other processes taking up cache space.[3] (The simple iterative algorithm is cache-oblivious as well, but much slower in practice if the matrix layout is not adapted to the algorithm.)\nThe number of cache misses incurred by this algorithm, on a machine with M lines of ideal cache, each of size b bytes, is bounded by[5]:13\nAlgorithms exist that provide better running times than the straightforward ones. The first to be discovered was Strassen's algorithm, devised by Volker Strassen in 1969 and often referred to as \"fast matrix multiplication\". It is based on a way of multiplying two 2 \u00d7 2-matrices which requires only 7 multiplications (instead of the usual 8), at the expense of several additional addition and subtraction operations. Applying this recursively gives an algorithm with a multiplicative cost of \n\n\n\nO\n(\n\nn\n\n\nlog\n\n2\n\n\n\u2061\n7\n\n\n)\n\u2248\nO\n(\n\nn\n\n2.807\n\n\n)\n\n\n{\\displaystyle O(n^{\\log _{2}7})\\approx O(n^{2.807})}\n\n. Strassen's algorithm is more complex, and the numerical stability is reduced compared to the na\u00efve algorithm,[6] but it is faster in cases where n > 100 or so[1] and appears in several libraries, such as BLAS.[7] It is very useful for large matrices over exact domains such as finite fields, where numerical stability is not an issue.\nThe current O(nk) algorithm with the lowest known exponent k is a generalization of the Coppersmith\u2013Winograd algorithm that has an asymptotic complexity of O(n2.3728639), by Fran\u00e7ois Le Gall.[8] The Le Gall algorithm, and the Coppersmith\u2013Winograd algorithm on which it is based, are similar to Strassen's algorithm: a way is devised for multiplying two k \u00d7 k-matrices with fewer than k3 multiplications, and this technique is applied recursively. However, the constant coefficient hidden by the Big O notation is so large that these algorithms are only worthwhile for matrices that are too large to handle on present-day computers.[9][10]\nSince any algorithm for multiplying two n \u00d7 n-matrices has to process all 2n2 entries, there is an asymptotic lower bound of \u03a9(n2) operations. Raz proved a lower bound of \u03a9(n2 log(n)) for bounded coefficient arithmetic circuits over the real or complex numbers.[11]\nCohn et al. put methods such as the Strassen and Coppersmith\u2013Winograd algorithms in an entirely different group-theoretic context, by utilising triples of subsets of finite groups which satisfy a disjointness property called the triple product property (TPP). They show that if families of wreath products of Abelian groups with symmetric groups realise families of subset triples with a simultaneous version of the TPP, then there are matrix multiplication algorithms with essentially quadratic complexity.[12][13] Most researchers believe that this is indeed the case.[10] However, Alon, Shpilka and Chris Umans have recently shown that some of these conjectures implying fast matrix multiplication are incompatible with another plausible conjecture, the sunflower conjecture.[14]\nFreivalds' algorithm is a simple Monte Carlo algorithm that, given matrices A, B and C, verifies in \u0398(n2) time if AB = C.\nThe divide and conquer algorithm sketched earlier can be parallelized in two ways for shared-memory multiprocessors. These are based on the fact that the eight recursive matrix multiplications in\ncan be performed independently of each other, as can the four summations (although the algorithm needs to \"join\" the multiplications before doing the summations). Exploiting the full parallelism of the problem, one obtains an algorithm that can be expressed in fork\u2013join style pseudocode:[15]\nProcedure multiply(C, A, B):\nProcedure add(C, T) adds T into C, element-wise:\nHere, fork is a keyword that signal a computation may be run in parallel with the rest of the function call, while join waits for all previously \"forked\" computations to complete. partition achieves its goal by pointer manipulation only.\nThis algorithm has a critical path length of \u0398(log2 n) steps, meaning it takes that much time on an ideal machine with an infinite number of processors; therefore, it has a maximum possible speedup of \u0398(n3/log2 n) on any real computer. The algorithm isn't practical due to the communication cost inherent in moving data to and from the temporary matrix T, but a more practical variant achieves \u0398(n2) speedup, without using a temporary.[15]\nOn modern architectures with hierarchical memory, the cost of loading and storing input matrix elements tends to dominate the cost of arithmetic. On a single machine this is the amount of data transferred between RAM and cache, while on a distributed memory multi-node machine it is the amount transferred between nodes; in either case it is called the communication bandwidth. The na\u00efve algorithm using three nested loops uses \u03a9(n3) communication bandwidth.\nCannon's algorithm, also known as the 2D algorithm, is a communication-avoiding algorithm that partitions each input matrix into a block matrix whose elements are submatrices of size \u221aM/3 by \u221aM/3, where M is the size of fast memory.[16] The na\u00efve algorithm is then used over the block matrices, computing products of submatrices entirely in fast memory. This reduces communication bandwidth to O(n3/\u221aM), which is asymptotically optimal (for algorithms performing \u03a9(n3) computation).[17][18]\nIn a distributed setting with p processors arranged in a \u221ap by \u221ap 2D mesh, one submatrix of the result can be assigned to each processor, and the product can be computed with each processor transmitting O(n2/\u221ap) words, which is asymptotically optimal assuming that each node stores the minimum O(n2/p) elements.[18] This can be improved by the 3D algorithm, which arranges the processors in a 3D cube mesh, assigning every product of two input submatrices to a single processor. The result submatrices are then generated by performing a reduction over each row.[19] This algorithm transmits O(n2/p2/3) words per processor, which is asymptotically optimal.[18] However, this requires replicating each input matrix element p1/3 times, and so requires a factor of p1/3 more memory than is needed to store the inputs. This algorithm can be combined with Strassen to further reduce runtime.[19] \"2.5D\" algorithms provide a continuous tradeoff between memory usage and communication bandwidth.[20] On modern distributed computing environments such as MapReduce, specialized multiplication algorithms have been developed.[21]\nThere are a variety of algorithms for multiplication on meshes. For multiplication of two n\u00d7n on a standard two-dimensional mesh using the 2D Cannon's algorithm, one can complete the multiplication in 3n-2 steps although this is reduced to half this number for repeated computations.[22] The standard array is inefficient because the data from the two matrices does not arrive simultaneously and it must be padded with zeroes.\nThe result is even faster on a two-layered cross-wired mesh, where only 2n-1 steps are needed.[23] The performance improves further for repeated computations leading to 100% efficiency.[24] The cross-wired mesh array may be seen as a special case of a non-planar (i.e. multilayered) processing structure.[25]", 
    "dbpedia_url": "http://dbpedia.org/resource/Matrix_multiplication_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Matrix_multiplication_algorithm\n"
}