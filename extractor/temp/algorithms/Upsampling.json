{
    "about": "Upsampling is interpolation, applied in the context of digital signal processing and sample rate conversion. When upsampling is performed on a sequence of samples of a continuous function or signal, it produces an approximation of the sequence that would have been obtained by sampling the signal at a higher rate (or density, as in the case of a photograph). For example, if compact disc audio is upsampled by a factor of 5/4, the resulting sample-rate increases from 44,100 Hz to 55,125\u00a0Hz.", 
    "name": "Upsampling", 
    "classification": "Digital Signal Processing", 
    "full_text": "Upsampling is interpolation, applied in the context of digital signal processing and sample rate conversion. When upsampling is performed on a sequence of samples of a continuous function or signal, it produces an approximation of the sequence that would have been obtained by sampling the signal at a higher rate (or density, as in the case of a photograph). For example, if compact disc audio is upsampled by a factor of 5/4, the resulting sample-rate increases from 44,100 Hz to 55,125\u00a0Hz.\n\n\nInterpolation by an integer factor L can be explained as a 2-step process, with an equivalent implementation that is more efficient:\nIn this application the filter is called an interpolation filter, and its design is discussed below. When the interpolation filter is an FIR type, its efficiency can be improved, because the zeros contribute nothing to its dot product calculations. It is an easy matter to omit them from both the data stream and the calculations. The calculation performed by an efficient interpolating FIR filter for each output sample is a dot product:\nwhere the h[\u2022] sequence is the impulse response, and K is the largest value of k for which h[j\u00a0+\u00a0kL] is non-zero. In the case L\u00a0=\u00a02, h[\u2022] can be designed as a half-band filter, where almost half of the coefficients are zero and need not be included in the dot products. Impulse response coefficients taken at intervals of L form a subsequence, and there are L such subsequences (called phases) multiplexed together. Each of L phases of the impulse response is filtering the same sequential values of the x[\u2022] data stream and producing one of L sequential output values. In some multi-processor architectures, these dot products are performed simultaneously, in which case it is called a polyphase filter.\nFor completeness, we now mention that a possible, but unlikely, implementation of each phase is to replace the coefficients of the other phases with zeros in a copy of the h[\u2022] array, and process the \n\n\n\n\n\nx\n\nL\n\n\n[\nn\n]\n,\n\n\n\n{\\displaystyle \\scriptstyle x_{L}[n],}\n\n sequence at L times faster than the original input rate. L\u00a0\u2212\u00a01 of every L outputs are zero, and the real values are supplied by the other phases. Adding them all together produces the desired y[\u2022] sequence. Adding a zero is equivalent to discarding it. The equivalence of computing and discarding L\u00a0\u2212\u00a01 zeros vs computing just every Lth output is known as the second Noble identity.[1]\nLet X(f) be the Fourier transform of any function, x(t), whose samples at some interval, T, equal the x[n] sequence. Then the discrete-time Fourier transform (DTFT) of the x[n] sequence is the Fourier series representation of a periodic summation of X(f):\n\n\n\n\n\n\n\n\n\n\u2211\n\nn\n=\n\u2212\n\u221e\n\n\n\u221e\n\n\n\n\n\n\nx\n(\nn\nT\n)\n\n\u23de\n\n\n\nx\n[\nn\n]\n\n\n\u00a0\n\ne\n\n\u2212\ni\n2\n\u03c0\nf\nn\nT\n\n\n\n\u23df\n\n\n\nDTFT\n\n\n=\n\n\n1\nT\n\n\n\n\u2211\n\nk\n=\n\u2212\n\u221e\n\n\n\u221e\n\n\nX\n(\nf\n\u2212\nk\n\n/\n\nT\n)\n.\n\n\n{\\displaystyle \\underbrace {\\sum _{n=-\\infty }^{\\infty }\\overbrace {x(nT)} ^{x[n]}\\ e^{-i2\\pi fnT}} _{\\text{DTFT}}={\\frac {1}{T}}\\sum _{k=-\\infty }^{\\infty }X(f-k/T).}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(Eq.1)\nWhen T has units of seconds, \n\n\n\n\nf\n\n\n\n{\\displaystyle \\scriptstyle f}\n\n has units of hertz. Sampling L times faster (at interval T/L) increases the periodicity by a factor of L:\n\n\n\n\n\n\nL\nT\n\n\n\n\u2211\n\nk\n=\n\u2212\n\u221e\n\n\n\u221e\n\n\nX\n\n(\nf\n\u2212\nk\n\u22c5\n\n\nL\nT\n\n\n)\n\n,\n\n\n{\\displaystyle {\\frac {L}{T}}\\sum _{k=-\\infty }^{\\infty }X\\left(f-k\\cdot {\\frac {L}{T}}\\right),}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(Eq.2)\nwhich is also the desired result of interpolation. An example of both these distributions is depicted in the top two graphs of Fig.1.\nWhen the additional samples are inserted zeros, they increase the data rate, but they have no effect on the frequency distribution until the zeros are replaced by the interpolation filter. Many filter design programs use frequency units of cycles/sample, which is achieved by normalizing the frequency axis, based on the new data rate (L/T). The result is shown in the third graph of Fig.1. Also shown is the passband of the interpolation filter needed to make the third graph resemble the second one. Its cutoff frequency is \u00a0\n\n\n\n\n\n\n0.5\nL\n\n\n\n.\n\n\n{\\displaystyle {\\tfrac {0.5}{L}}.}\n\n[note 1] In terms of actual frequency, the cutoff is \u00a0\n\n\n\n\n\n\n0.5\nT\n\n\n\n\n\n{\\displaystyle {\\tfrac {0.5}{T}}}\n\n Hz, which is the Nyquist frequency of the original x[n] sequence.\nThe same result can be obtained from Z-transforms, constrained to values of complex-variable, z, of the form \n\n\n\nz\n=\n\ne\n\ni\n\u03c9\n\n\n.\n\n\n{\\displaystyle z=e^{i\\omega }.}\n\n\u00a0 Then the transform is the same Fourier series with different frequency normalization. By comparison with Eq.1, we deduce:\nwhich is depicted by the fourth graph in Fig.1.\u00a0 When the zeros are inserted, the transform becomes:\ndepicted by the bottom graph. In these normalizations, the effective data-rate is always represented by the constant 2\u03c0 (radians/sample) instead of 1.\u00a0 In those units, the interpolation filter bandwidth is \u03c0/L, as show on the bottom graph. The corresponding physical frequency is \u00a0\n\n\n\n\n\n\n\u03c0\nL\n\n\n\n\u22c5\n\n\n\nL\n\n2\n\u03c0\nT\n\n\n\n\n=\n\n\n\n0.5\nT\n\n\n\n\n\n{\\displaystyle {\\tfrac {\\pi }{L}}\\cdot {\\tfrac {L}{2\\pi T}}={\\tfrac {0.5}{T}}}\n\n\u00a0 Hz, the original Nyquist frequency.\nLet L/M denote the upsampling factor, where L\u00a0>\u00a0M.\nUpsampling requires a lowpass filter after increasing the data rate, and downsampling requires a lowpass filter before decimation. Therefore, both operations can be accomplished by a single filter with the lower of the two cutoff frequencies. For the L\u00a0>\u00a0M case, the interpolation filter cutoff, \u00a0\n\n\n\n\n\n\n0.5\nL\n\n\n\n\n\n{\\displaystyle {\\tfrac {0.5}{L}}}\n\n cycles per intermediate sample, is the lower frequency.", 
    "dbpedia_url": "http://dbpedia.org/resource/Upsampling", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Upsampling\n"
}