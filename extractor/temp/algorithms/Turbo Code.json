{
    "about": "In information theory, turbo codes (originally in French Turbocodes) are a class of high-performance forward error correction (FEC) codes developed around 1990\u201391 (but first published in 1993), which were the first practical codes to closely approach the channel capacity, a theoretical maximum for the code rate at which reliable communication is still possible given a specific noise level. Turbo codes are used in 3G/4G mobile communications (e.g., in UMTS and LTE) and in (deep space) satellite communications as well as other applications where designers seek to achieve reliable information transfer over bandwidth- or latency-constrained communication links in the presence of data-corrupting noise. Turbo codes are nowadays competing with LDPC codes, which provide similar performance.", 
    "name": "Turbo Code", 
    "classification": "Error Detection And Correction", 
    "full_text": "In information theory, turbo codes (originally in French Turbocodes) are a class of high-performance forward error correction (FEC) codes developed around 1990\u201391 (but first published in 1993), which were the first practical codes to closely approach the channel capacity, a theoretical maximum for the code rate at which reliable communication is still possible given a specific noise level. Turbo codes are used in 3G/4G mobile communications (e.g., in UMTS and LTE) and in (deep space) satellite communications as well as other applications where designers seek to achieve reliable information transfer over bandwidth- or latency-constrained communication links in the presence of data-corrupting noise. Turbo codes are nowadays competing with LDPC codes, which provide similar performance.\nThe name \"turbo code\" arose from the feedback loop used during normal turbo code decoding, which was analogized to the exhaust feedback used for engine turbocharging. Hagenauer has argued the term turbo code is a misnomer since there is no feedback involved in the encoding process.[1]\n\n\nThe fundamental patent application for turbo codes was filed on April 23, 1991. The patent application lists Claude Berrou as the sole inventor of turbo codes. The patent filing resulted in several patents including US Patent 5,446,747, which expired August 29, 2013.\nThe first public paper on turbo codes was \"Near Shannon Limit Error-correcting Coding and Decoding: Turbo-codes\".[2] This paper was published 1993 in the Proceedings of IEEE International Communications Conference. The 1993 paper was formed from three separate submissions that were combined due to space constraints. The merger caused the paper to list three authors: Berrou, Glavieux, and Thitimajshima (from T\u00e9l\u00e9com Bretagne, former ENST Bretagne, France). However, it is clear from the original patent filing that Claude Berrou is the sole inventor of turbo codes and that the other authors of the paper contributed material other than the core concepts of turbo codes.\nTurbo codes were so revolutionary at the time of their introduction that many experts in the field of coding did not believe the reported results. When the performance was confirmed a small revolution in the world of coding took place that led to the investigation of many other types of iterative signal processing.\nThe first class of turbo code was the parallel concatenated convolutional code (PCCC). Since the introduction of the original parallel turbo codes in 1993, many other classes of turbo code have been discovered, including serial versions Serial concatenated convolutional codes and Repeat-accumulate codes. Iterative turbo decoding methods have also been applied to more conventional FEC systems, including Reed-Solomon corrected convolutional codes, although these systems are too complex for practical implementations of iterative decoders. Turbo equalization also flowed from the concept of turbo coding.\nIn addition to the invention of Turbo Codes, Claude Berrou also invented recursive systematic convolutional (RSC) codes, which are used in the example implementation of turbo codes described in the patent. Turbo Codes that use RSC codes seems to perform better than Turbo codes that do not use RSC codes.\nPrior to turbo codes, the best constructions were serial concatenated codes based on an outer Reed-Solomon error correction code combined with an inner Viterbi-decoded short constraint length convolutional code, also known as RSV codes.\nIn a later paper, Berrou generously gave credit to the intuition of \"G. Battail, J. Hagenauer and P. Hoeher, who, in the late 80s, highlighted the interest of probabilistic processing.\" He adds \"R. Gallager and M. Tanner had already imagined coding and decoding techniques whose general principles are closely related,\" although the necessary calculations were impractical at that time.[3]\nThere are many different instances of turbo codes, using different component encoders, input/output ratios, interleavers, and puncturing patterns. This example encoder implementation describes a classic turbo encoder, and demonstrates the general design of parallel turbo codes.\nThis encoder implementation sends three sub-blocks of bits. The first sub-block is the m-bit block of payload data. The second sub-block is n/2 parity bits for the payload data, computed using a recursive systematic convolutional code (RSC code). The third sub-block is n/2 parity bits for a known permutation of the payload data, again computed using an RSC code. Thus, two redundant but different sub-blocks of parity bits are sent with the payload. The complete block has m + n bits of data with a code rate of m/(m + n). The permutation of the payload data is carried out by a device called an interleaver.\nHardware-wise, this turbo-code encoder consists of two identical RSC coders, \u04211 and C2, as depicted in the figure, which are connected to each other using a concatenation scheme, called parallel concatenation:\n\nIn the figure, M is a memory register. The delay line and interleaver force input bits dk to appear in different sequences. At first iteration, the input sequence dk appears at both outputs of the encoder, xk and y1k or y2k due to the encoder's systematic nature. If the encoders C1 and C2 are used respectively in n1 and n2 iterations, their rates are respectively equal to\nThe decoder is built in a similar way to the above encoder. Two elementary decoders are interconnected to each other, but in serial way, not in parallel. The \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n decoder operates on lower speed (i.e., \n\n\n\n\n\nR\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle R_{1}}\n\n), thus, it is intended for the \n\n\n\n\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle C_{1}}\n\n encoder, and \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n is for \n\n\n\n\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle C_{2}}\n\n correspondingly. \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n yields a soft decision which causes \n\n\n\n\n\nL\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle L_{1}}\n\n delay. The same delay is caused by the delay line in the encoder. The \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n's operation causes \n\n\n\n\n\nL\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle L_{2}}\n\n delay.\n\nAn interleaver installed between the two decoders is used here to scatter error bursts coming from \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n output. DI block is a demultiplexing and insertion module. It works as a switch, redirecting input bits to \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n at one moment and to \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n at another. In OFF state, it feeds both \n\n\n\n\n\ny\n\n1\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle y_{1k}}\n\n and \n\n\n\n\n\ny\n\n2\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle y_{2k}}\n\n inputs with padding bits (zeros).\nConsider a memoryless AWGN channel, and assume that at k-th iteration, the decoder receives a pair of random variables:\nwhere \n\n\n\n\n\na\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle a_{k}}\n\n and \n\n\n\n\n\nb\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle b_{k}}\n\n are independent noise components having the same variance \n\n\n\n\n\n\u03c3\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle \\sigma ^{2}}\n\n. \n\n\n\n\n\nY\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle Y_{k}}\n\n is a k-th bit from \n\n\n\n\n\ny\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle y_{k}}\n\n encoder output.\nRedundant information is demultiplexed and sent through DI to \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n (when \n\n\n\n\n\ny\n\nk\n\n\n\n=\n\n\ny\n\n1\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle y_{k}\\;=\\;y_{1k}}\n\n) and to \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n (when \n\n\n\n\n\ny\n\nk\n\n\n\n=\n\n\ny\n\n2\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle y_{k}\\;=\\;y_{2k}}\n\n).\n\n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n yields a soft decision; i.e.:\nand delivers it to \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n. \n\n\n\n\n\u039b\n(\n\nd\n\nk\n\n\n)\n\n\n\n{\\displaystyle \\scriptstyle \\Lambda (d_{k})}\n\n is called the logarithm of the likelihood ratio (LLR). \n\n\n\n\np\n(\n\nd\n\nk\n\n\n\n=\n\ni\n)\n,\n\ni\n\n\u2208\n\n{\n0\n,\n\n1\n}\n\n\n\n{\\displaystyle \\scriptstyle p(d_{k}\\;=\\;i),\\,i\\,\\in \\,\\{0,\\,1\\}}\n\n is the a posteriori probability (APP) of the \n\n\n\n\n\nd\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle d_{k}}\n\n data bit which shows the probability of interpreting a received \n\n\n\n\n\nd\n\nk\n\n\n\n\n\n{\\displaystyle \\scriptstyle d_{k}}\n\n bit as \n\n\n\n\ni\n\n\n\n{\\displaystyle \\scriptstyle i}\n\n. Taking the LLR into account, \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n yields a hard decision; i.e., a decoded bit.\nIt is known that the Viterbi algorithm is unable to calculate APP, thus it cannot be used in \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n. Instead of that, a modified BCJR algorithm is used. For \n\n\n\n\nD\nE\n\nC\n\n2\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{2}}\n\n, the Viterbi algorithm is an appropriate one.\nHowever, the depicted structure is not an optimal one, because \n\n\n\n\nD\nE\n\nC\n\n1\n\n\n\n\n\n{\\displaystyle \\scriptstyle DEC_{1}}\n\n uses only a proper fraction of the available redundant information. In order to improve the structure, a feedback loop is used (see the dotted line on the figure).\nThe decoder front-end produces an integer for each bit in the data stream. This integer is a measure of how likely it is that the bit is a 0 or 1 and is also called soft bit. The integer could be drawn from the range [\u2212127, 127], where:\nThis introduces a probabilistic aspect to the data-stream from the front end, but it conveys more information about each bit than just 0 or 1.\nFor example, for each bit, the front end of a traditional wireless-receiver has to decide if an internal analog voltage is above or below a given threshold voltage level. For a turbo-code decoder, the front end would provide an integer measure of how far the internal voltage is from the given threshold.\nTo decode the m + n-bit block of data, the decoder front-end creates a block of likelihood measures, with one likelihood measure for each bit in the data stream. There are two parallel decoders, one for each of the \u200an\u20442-bit parity sub-blocks. Both decoders use the sub-block of m likelihoods for the payload data. The decoder working on the second parity sub-block knows the permutation that the coder used for this sub-block.\nThe key innovation of turbo codes is how they use the likelihood data to reconcile differences between the two decoders. Each of the two convolutional decoders generates a hypothesis (with derived likelihoods) for the pattern of m bits in the payload sub-block. The hypothesis bit-patterns are compared, and if they differ, the decoders exchange the derived likelihoods they have for each bit in the hypotheses. Each decoder incorporates the derived likelihood estimates from the other decoder to generate a new hypothesis for the bits in the payload. Then they compare these new hypotheses. This iterative process continues until the two decoders come up with the same hypothesis for the m-bit pattern of the payload, typically in 15 to 18 cycles.\nAn analogy can be drawn between this process and that of solving cross-reference puzzles like crossword or sudoku. Consider a partially completed, possibly garbled crossword puzzle. Two puzzle solvers (decoders) are trying to solve it: one possessing only the \"down\" clues (parity bits), and the other possessing only the \"across\" clues. To start, both solvers guess the answers (hypotheses) to their own clues, noting down how confident they are in each letter (payload bit). Then, they compare notes, by exchanging answers and confidence ratings with each other, noticing where and how they differ. Based on this new knowledge, they both come up with updated answers and confidence ratings, repeating the whole process until they converge to the same solution.\nTurbo codes perform well due to the attractive combination of the code's random appearance on the channel together with the physically realisable decoding structure. Turbo codes are affected by an error floor.\nTelecommunications:\nFrom an artificial intelligence viewpoint, turbo codes can be considered as an instance of loopy belief propagation in Bayesian networks.[5]", 
    "dbpedia_url": "http://dbpedia.org/resource/Turbo_code", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Turbo_code\n"
}