{
    "about": "In mathematics, the minimum k-cut, is a combinatorial optimization problem that requires finding a set of edges whose removal would partition the graph to k connected components. These edges are referred to as k-cut. The goal is to find the minimum-weight k-cut. This partitioning can have applications in VLSI design, data-mining, finite elements and communication in parallel computing.", 
    "classification": "Approximation Algorithms", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Minimum_k-cut\n", 
    "full_text": "In mathematics, the minimum k-cut, is a combinatorial optimization problem that requires finding a set of edges whose removal would partition the graph to k connected components. These edges are referred to as k-cut. The goal is to find the minimum-weight k-cut. This partitioning can have applications in VLSI design, data-mining, finite elements and communication in parallel computing.\n\n\nGiven an undirected graph G\u00a0=\u00a0(V,\u00a0E) with an assignment of weights to the edges w:\u00a0E\u00a0\u2192\u00a0N and an integer k\u00a0\u2208\u00a0{2,\u00a03,\u00a0\u2026,\u00a0|V|}, partition V into k disjoint sets F\u00a0=\u00a0{C1,\u00a0C2,\u00a0\u2026,\u00a0Ck} while minimizing\nFor a fixed k, the problem is polynomial time solvable in O(|V|k2).[1] However, the problem is NP-complete if k is part of the input.[2] It is also NP-complete if we specify \n\n\n\nk\n\n\n{\\displaystyle k}\n\n vertices and ask for the minimum \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-cut which separates these vertices among each of the sets.[3]\nSeveral approximation algorithms exist with an approximation of 2\u00a0\u2212\u00a02/k. A simple greedy algorithm that achieves this approximation factor computes a minimum cut in each connected components and removes the lightest one. This algorithm requires a total of n\u00a0\u2212\u00a01 max flow computations. Another algorithm achieving the same guarantee uses the Gomory\u2013Hu tree representation of minimum cuts. Constructing the Gomory\u2013Hu tree requires n\u00a0\u2212\u00a01 max flow computations, but the algorithm requires an overall O(kn) max flow computations. Yet, it is easier to analyze the approximation factor of the second algorithm.[4][5]\nIf we restrict the graph to a metric space, meaning a complete graph that satisfies the triangle inequality, and enforce that the output partitions are each of pre-specified sizes, the problem is approximable to within a factor of 3 for any fixed k.[6] More recently, polynomial time approximation schemes (PTAS) were discovered for those problems.[7]", 
    "name": "Minimum K Cut"
}