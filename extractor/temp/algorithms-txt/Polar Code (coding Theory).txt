ABOUT
In information theory, a polar code is a linear block error correcting code. The code construction is based on a multiple recursive concatenation of a short kernel code which transforms the physical channel into virtual outer channels. When the number of recursions becomes large, the virtual channels tend to either have high reliability or low reliability (in other words, they polarize), and the data bits are allocated to the most reliable channels. The construction itself was first described by Stolte,[1] and later independently by Erdal Arıkan.[2] It is the first code with an explicit construction to provably achieve the channel capacity for symmetric binary-input, discrete, memoryless channels (B-DMC) with polynomial dependence on the gap to capacity. Notably, polar codes have encoding and decoding complexity 



O
(
n
log
⁡
n
)


{\displaystyle O(n\log n)}

, which renders them attractive for many applications.
FULL TEXT
In information theory, a polar code is a linear block error correcting code. The code construction is based on a multiple recursive concatenation of a short kernel code which transforms the physical channel into virtual outer channels. When the number of recursions becomes large, the virtual channels tend to either have high reliability or low reliability (in other words, they polarize), and the data bits are allocated to the most reliable channels. The construction itself was first described by Stolte,[1] and later independently by Erdal Arıkan.[2] It is the first code with an explicit construction to provably achieve the channel capacity for symmetric binary-input, discrete, memoryless channels (B-DMC) with polynomial dependence on the gap to capacity. Notably, polar codes have encoding and decoding complexity 



O
(
n
log
⁡
n
)


{\displaystyle O(n\log n)}

, which renders them attractive for many applications.


One can implement a simulation environment of polar codes in any programming language such as MATLAB, C++ etc.
It typically involves modelling an encoder, a decoder, a channel (such as AWGN, BSC, BEC), and a code-construction module.
An example MATLAB implementation is available at,[3] including a series of introductory video tutorials.
There are many aspects that polar codes should investigate further before considering for industry applications. Especially, the original design of the polar codes achieves capacity when block sizes are asymptotically large with successive cancellation decoder. However, in block sizes that industry applications are operating, the performance of the successive cancellation is poor compared to the well-defined and implemented coding schemes such as LDPC and Turbo. Polar performance can be improved with successive cancellation list decoding, but, their usability in real applications still questionable due to very poor implementation efficiencies.[4]
In October 2016 Huawei announced that it had achieved 27Gbps in 5G field trial tests using the Polar codes for channel coding. The improvements has been introduced so that the channel performance is now has almost closed the gap between the Shannon limit which sets the bar for the maximum rate for the given bandwidth for a given noise level. Huawei has announced that they have achieved three times the spectral efficiency compared to current coding mechanisms using Polar codes.[5]
