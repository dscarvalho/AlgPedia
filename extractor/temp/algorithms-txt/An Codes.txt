ABOUT
AN codes[1] are error-correcting code that are used in arithmetic applications. Arithmetic codes were commonly used in computer processors to ensure the accuracy of its arithmetic operations when electronics were more unreliable. Arithmetic codes help the processor to detect when an error is made and correct it. Without these codes, processors would be unreliable since any errors would go undetected. AN codes are arithmetic codes that are named for the integers 



A


{\displaystyle A}

 and 



N


{\displaystyle N}

 that are used to encode and decode the codewords.
FULL TEXT
AN codes[1] are error-correcting code that are used in arithmetic applications. Arithmetic codes were commonly used in computer processors to ensure the accuracy of its arithmetic operations when electronics were more unreliable. Arithmetic codes help the processor to detect when an error is made and correct it. Without these codes, processors would be unreliable since any errors would go undetected. AN codes are arithmetic codes that are named for the integers 



A


{\displaystyle A}

 and 



N


{\displaystyle N}

 that are used to encode and decode the codewords.
These codes differ from most other codes in that they use arithmetic weight to maximize the arithmetic distance between codewords as opposed to the hamming weight and hamming distance. The arithmetic distance between two words is a measure of the number of errors made while computing an arithmetic operation. Using the arithmetic distance is necessary since one error in an arithmetic operation can cause a large hamming distance between the received answer and the correct answer.


The arithmetic weight of an integer 



x


{\displaystyle x}

 in base 



r


{\displaystyle r}

 is defined by
where 




|



a

i




|



{\displaystyle |{a_{i}}|}

< 



r


{\displaystyle r}

, 



n
(
i
)
≥
0


{\displaystyle n(i)\geq 0}

, and 



r
,
n
(
i
)
∈

Z



{\displaystyle r,n(i)\in \mathbb {Z} }

. The arithmetic distance of a word is upper bounded by its hamming weight since any integer can be represented by its standard polynomial form of 



x
=

∑

i
=
1


n



b

i



r

i




{\displaystyle x=\sum _{i=1}^{n}b_{i}r^{i}}

 where the 




b

i




{\displaystyle b_{i}}

 are the digits in the integer. Removing all the terms where 




b

i


=
0


{\displaystyle b_{i}=0}

 will simulate a 



t


{\displaystyle t}

 equal to its hamming weight. The arithmetic weight will usually be less than the hamming weight since the 




a

i




{\displaystyle a_{i}}

 are allowed to be negative. For example, the integer 



x
=
29


{\displaystyle x=29}

 which is 



11101


{\displaystyle 11101}

 in binary has a hamming weight of 



4


{\displaystyle 4}

. This is a quick upper bound on the arithmetic weight since 



x
=

2

0


+

2

2


+

2

3


+

2

4




{\displaystyle x=2^{0}+2^{2}+2^{3}+2^{4}}

. However, since the 




a

i




{\displaystyle a_{i}}

 can be negative, we can write 



x
=

2

5


−

2

1


−

2

0




{\displaystyle x=2^{5}-2^{1}-2^{0}}

 which makes the arithmetic weight equal to 



3


{\displaystyle 3}

.
The arithmetic distance between two integers is defined by
This is one of the primary metrics used when analyzing arithmetic codes.[citation needed]
AN codes are defined by integers 



A


{\displaystyle A}

 and 



B


{\displaystyle B}

 and are used to encode integers from 



0


{\displaystyle 0}

 to 



B
−
1


{\displaystyle B-1}

 such that
Each choice of 



A


{\displaystyle A}

 will result in a different code, while 



B


{\displaystyle B}

 serves as a limiting factor to ensure useful properties in the distance of the code. If 



B


{\displaystyle B}

 is too large, it could let a codeword with a very small arithmetic weight into the code which will degrade the distance of the entire code. To utilize these codes, before an arithmetic operation is performed on two integers, each integer is multiplied by 



A


{\displaystyle A}

. Let the result of the operation on the codewords be 



R


{\displaystyle R}

. Note that 



R


{\displaystyle R}

 must also be between 



0


{\displaystyle 0}

 to 



B
−
1


{\displaystyle B-1}

 for proper decoding. To decode, simply divide 



R

/

A


{\displaystyle R/A}

. If 



A


{\displaystyle A}

 is not a factor of 



R


{\displaystyle R}

, then at least one error has occurred and the most likely solution will be the codeword with the least arithmetic distance from 



R


{\displaystyle R}

. As with codes using hamming distance, AN codes can correct up to 



⌊



d
−
1

2


⌋


{\displaystyle \lfloor {\frac {d-1}{2}}\rfloor }

 errors where 



d


{\displaystyle d}

 is the distance of the code.
For example, an AN code with 



A
=
3


{\displaystyle A=3}

, the operation of adding 



15


{\displaystyle 15}

 and 



16


{\displaystyle 16}

 will start by encoding both operands. This results in the operation 



R
=
45
+
48
=
93


{\displaystyle R=45+48=93}

. Then, to find the solution we divide 



93

/

3
=
31


{\displaystyle 93/3=31}

. As long as 



B


{\displaystyle B}

>



31


{\displaystyle 31}

, this will be a possible operation under the code. Suppose an error occurs in each of the binary representation of the operands such that 



45
=
101101
→
101111


{\displaystyle 45=101101\rightarrow 101111}

 and 



48
=
110000
→
110001


{\displaystyle 48=110000\rightarrow 110001}

, then 



R
=
101111
+
110001
=
1100000


{\displaystyle R=101111+110001=1100000}

. Notice that since 



93
=
1011101


{\displaystyle 93=1011101}

, the hamming weight between the received word and the correct solution is 



5


{\displaystyle 5}

 after just 



2


{\displaystyle 2}

 errors. To compute the arithmetic weight, we take 



1100000
−
1011101
=
11


{\displaystyle 1100000-1011101=11}

 which can be represented as 



11
=

2

0


+

2

1




{\displaystyle 11=2^{0}+2^{1}}

 or 



11
=

2

2


−

2

0




{\displaystyle 11=2^{2}-2^{0}}

. In either case, the arithmetic distance is 



2


{\displaystyle 2}

 as expected since this is the number of errors that were made. To correct this error, an algorithm would be used to compute the nearest codeword to the received word in terms of arithmetic distance. We will not describe the algorithms in detail.
To ensure that the distance of the code will not be too small, we will define modular AN codes. A modular AN code 



C


{\displaystyle C}

 is a subgroup of 




Z


/

m

Z



{\displaystyle \mathbb {Z} /m\mathbb {Z} }

, where 



m
=
A
B


{\displaystyle m=AB}

. The codes are measured in terms of modular distance which is defined in terms of a graph with vertices being the elements of 




Z


/

m

Z



{\displaystyle \mathbb {Z} /m\mathbb {Z} }

. Two vertices 



x


(
mod

m
)



{\displaystyle x{\pmod {m}}}

 and 




x
′



(
mod

m
)



{\displaystyle x'{\pmod {m}}}

 are connected iff
where 



c
,
j
∈

Z



{\displaystyle c,j\in \mathbb {Z} }

 and 



0


{\displaystyle 0}

<



c


{\displaystyle c}

<



r


{\displaystyle r}

, 



j
≥
0


{\displaystyle j\geq 0}

. Then the modular distance between two words is the length of the shortest path between their nodes in the graph. The modular weight of a word is its distance from 



0


{\displaystyle 0}

 which is equal to
In practice, the value of 



m


{\displaystyle m}

 is typically chosen such that 



m
=

r

n


−
1


{\displaystyle m=r^{n}-1}

 since most computer arithmetic is computed 




mod



2

n


−
1


{\displaystyle \mod 2^{n}-1}

 so there is no additional loss of data due to the code going out of bounds since the computer will also be out of bounds. Choosing 



m
=

r

n


−
1


{\displaystyle m=r^{n}-1}

 also tends to result in codes with larger distances than other codes.
By using modular weight with 



m
=

r

n


−
1


{\displaystyle m=r^{n}-1}

, the AN codes will be cyclic code.
definition: A cyclic AN code is a code 



C


{\displaystyle C}

 that is a subgroup of 



[

r

n


−
1
]


{\displaystyle [r^{n}-1]}

, where 



[

r

n


−
1
]
=
{
0
,
1
,
2
,
…
,

r

n


−
1
}


{\displaystyle [r^{n}-1]=\{0,1,2,\dots ,r^{n}-1\}}

.
A cyclic AN code is a principal ideal of the ring 



[

r

n


−
1
]


{\displaystyle [r^{n}-1]}

. There are integers 



A


{\displaystyle A}

 and 



B


{\displaystyle B}

 where 



A
B
=

r

n


−
1


{\displaystyle AB=r^{n}-1}

 and 



A
,
B


{\displaystyle A,B}

 satisfy the definition of an AN code. Cyclic AN codes are a subset of cyclic codes and have the same properties.
The Mandelbaum-Barrows Codes are a type of cyclic AN codes introduced by D. Mandelbaum and J. T. Barrows.[2][3] These codes are created by choosing 



B


{\displaystyle B}

 to be a prime number that does not divide 



r


{\displaystyle r}

 such that 




Z


/

B

Z



{\displaystyle \mathbb {Z} /B\mathbb {Z} }

 is generated by 



r


{\displaystyle r}

 and 



−
1


{\displaystyle -1}

, and 



m
=

r

n


−
1


{\displaystyle m=r^{n}-1}

. Let 



n


{\displaystyle n}

 be a positive integer where 




r

n


≡
1


(
mod

B
)



{\displaystyle r^{n}\equiv 1{\pmod {B}}}

 and 



A
=
(

r

n


−
1
)

/

B


{\displaystyle A=(r^{n}-1)/B}

. For example, choosing 



r
=
2
,
B
=
5
,
n
=
4


{\displaystyle r=2,B=5,n=4}

, and 



A
=
(

r

n


−
1
)

/

B
=
3


{\displaystyle A=(r^{n}-1)/B=3}

 the result will be a Mandelbaum-Barrows Code such that 



C
=
{
3
N

|

N
∈

Z

,
0
≤
N


{\displaystyle C=\{3N|N\in \mathbb {Z} ,0\leq N}

<



5
}


{\displaystyle 5\}}

 in base 



2


{\displaystyle 2}

.
To analyze the distance of the Mandelbaum-Barrows Codes, we will need the following theorem.
theorem: Let 



C
⊂
[

r

n


−
1
]


{\displaystyle C\subset [r^{n}-1]}

 be a cyclic AN code with generator 



A


{\displaystyle A}

, and
Then,
proof: Assume that each 



x
∈
C


{\displaystyle x\in C}

 has a unique cyclic NAF[4] representation which is
We define an 



n
×
B


{\displaystyle n\times B}

 matrix with elements 




c

i
,
x




{\displaystyle c_{i,x}}

 where 



0
≤
i
≤
n
−
1


{\displaystyle 0\leq i\leq n-1}

 and 



x
∈
C


{\displaystyle x\in C}

. This matrix is essentially a list of all the codewords in 



C


{\displaystyle C}

 where each column is a codeword. Since 



C


{\displaystyle C}

 is cyclic, each column of the matrix has the same number of zeros. We must now calculate 



n

|

{
x
∈
C

|


c

n
−
1
,
x


≠
0
}

|



{\displaystyle n|\{x\in C|c_{n-1,x}\neq 0\}|}

, which is 



n


{\displaystyle n}

 times the number of codewords that don't end with a 



0


{\displaystyle 0}

. As a property of being in cyclic NAF, 




c

n
−
1
,
x


≠
0


{\displaystyle c_{n-1,x}\neq 0}

 iff there is a 



y
∈

Z



{\displaystyle y\in \mathbb {Z} }

 with 



y
≡
x


(
mod


r

n


−
1
)

,


m

r
+
1





{\displaystyle y\equiv x{\pmod {r^{n}-1}},{\frac {m}{r+1}}}

<



y
≤



m
r


r
+
1





{\displaystyle y\leq {\frac {mr}{r+1}}}

. Since 



x
=
A
N


(
mod


r

n


−
1
)



{\displaystyle x=AN{\pmod {r^{n}-1}}}

 with 



0
≤
N


{\displaystyle 0\leq N}

<



B


{\displaystyle B}

, then 





B

r
+
1





{\displaystyle {\frac {B}{r+1}}}

<



N
≤



B
r


r
+
1





{\displaystyle N\leq {\frac {Br}{r+1}}}

. Then the number of integers that have a zero as their last bit are 



⌊



r
B


r
+
1



⌋
−
⌊


B

r
+
1



⌋


{\displaystyle \lfloor {\frac {rB}{r+1}}\rfloor -\lfloor {\frac {B}{r+1}}\rfloor }

. Multiplying this by the 



n


{\displaystyle n}

 characters in the codewords gives us a sum of the weights of the codewords of 



n
(
⌊



r
B


r
+
1



⌋
−
⌊


B

r
+
1



⌋
)


{\displaystyle n(\lfloor {\frac {rB}{r+1}}\rfloor -\lfloor {\frac {B}{r+1}}\rfloor )}

 as desired.
We will now use the previous theorem to show that the Mandelbaum-Barrows Codes are equidistant(which means that every pair of codewords have the same distance), with a distance of
proof: Let 



x
∈
C
,
x
≠
0


{\displaystyle x\in C,x\neq 0}

, then 



x
=
A
N


(
mod


r

n


−
1
)



{\displaystyle x=AN{\pmod {r^{n}-1}}}

 and 



N


{\displaystyle N}

 is not divisible by 



B


{\displaystyle B}

. This implies there 



∃
j
(
N
≡
±

r

j




(
mod

B
)

)


{\displaystyle \exists j(N\equiv \pm r^{j}{\pmod {B}})}

. Then 




w

m


(
x
)
=

w

m


(
±

r

j


A
)
=

w

m


(
A
)


{\displaystyle w_{m}(x)=w_{m}(\pm r^{j}A)=w_{m}(A)}

. This proves that 



C


{\displaystyle C}

 is equidistant since all codewords have the same weight as 



A


{\displaystyle A}

. Since all codewords have the same weight, and by the previous theorem we know the total weight of all codewords, the distance of the code is found by dividing the total weight by the number of codewords(excluding 0).