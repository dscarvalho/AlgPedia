ABOUT
In operations research, cuckoo search is an optimization algorithm developed by Xin-she Yang and Suash Deb in 2009.[1][2] It was inspired by the obligate brood parasitism of some cuckoo species by laying their eggs in the nests of other host birds (of other species). Some host birds can engage direct conflict with the intruding cuckoos. For example, if a host bird discovers the eggs are not their own, it will either throw these alien eggs away or simply abandon its nest and build a new nest elsewhere. Some cuckoo species such as the New World brood-parasitic Tapera have evolved in such a way that female parasitic cuckoos are often very specialized in the mimicry in colors and pattern of the eggs of a few chosen host species [3] Cuckoo search idealized such breeding behavior, and thus can be applied for various optimization problems.
FULL TEXT
In operations research, cuckoo search is an optimization algorithm developed by Xin-she Yang and Suash Deb in 2009.[1][2] It was inspired by the obligate brood parasitism of some cuckoo species by laying their eggs in the nests of other host birds (of other species). Some host birds can engage direct conflict with the intruding cuckoos. For example, if a host bird discovers the eggs are not their own, it will either throw these alien eggs away or simply abandon its nest and build a new nest elsewhere. Some cuckoo species such as the New World brood-parasitic Tapera have evolved in such a way that female parasitic cuckoos are often very specialized in the mimicry in colors and pattern of the eggs of a few chosen host species [3] Cuckoo search idealized such breeding behavior, and thus can be applied for various optimization problems.


Cuckoo search (CS) uses the following representations:
Each egg in a nest represents a solution, and a cuckoo egg represents a new solution. The aim is to use the new and potentially better solutions (cuckoos) to replace a not-so-good solution in the nests. In the simplest form, each nest has one egg. The algorithm can be extended to more complicated cases in which each nest has multiple eggs representing a set of solutions.
CS is based on three idealized rules:
In addition, Yang and Deb discovered that the random-walk style search is better performed by Lévy flights rather than simple random walk.
The pseudo-code can be summarized as:
An important advantage of this algorithm is its simplicity. In fact, comparing with other population- or agent-based metaheuristic algorithms such as particle swarm optimization and harmony search, there is essentially only a single parameter 




p

a




{\displaystyle p_{a}}

 in CS (apart from the population size 



n


{\displaystyle n}

). Therefore, it is very easy to implement.
An important issue is the applications of Lévy flights and random walks in the generic equation for generating new solutions
where 




E

t




{\displaystyle E_{t}}

 is drawn from a standard normal distribution with zero mean and unity standard deviation for random walks, or drawn from Lévy distribution for Lévy flights. Obviously, the random walks can also be linked with the similarity between a cuckoo's egg and the host's egg which can be tricky in implementation. Here the step size 



s


{\displaystyle s}

 determines how far a random walker can go for a fixed number of iterations. The generation of Lévy step size is often tricky, and a comparison of three algorithms (including Mantegna's[4]) was performed by Leccardi[5] who found an implementation of Chambers et al.'s approach[6] to be the most computationally efficient due to the low number of random numbers required.
If s is too large, then the new solution generated will be too far away from the old solution (or even jump out side of the bounds). Then, such a move is unlikely to be accepted. If s is too small, the change is too small to be significant, and consequently such search is not efficient. So a proper step size is important to maintain the search as efficient as possible.
As an example, for simple isotropic random walks, we know that the average distance 



r


{\displaystyle r}

 traveled in the d-dimension space is
where 



D
=

s

2



/

2
τ


{\displaystyle D=s^{2}/2\tau }

 is the effective diffusion coefficient. Here 



s


{\displaystyle s}

 is the step size or distance traveled at each jump, and 



τ


{\displaystyle \tau }

 is the time taken for each jump. The above equation implies that[7]
For a typical length scale L of a dimension of interest, the local search is typically limited in a region of 



r
=
L

/

10


{\displaystyle r=L/10}

. For 



τ
=
1


{\displaystyle \tau =1}

 and t=100 to 1000, we have 



s
≈
0.01
L


{\displaystyle s\approx 0.01L}

 for d=1, and 



s
≈
0.001
L


{\displaystyle s\approx 0.001L}

 for d=10. Therefore, we can use s/L=0.001 to 0.01 for most problems. Though the exact derivation may require detailed analysis of the behaviour of Lévy flights.[8]
Algorithm and convergence analysis will be fruitful, because there are many open problems related to metaheuristics[9]