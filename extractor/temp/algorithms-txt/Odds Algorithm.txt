ABOUT
The odds-algorithm is a mathematical method for computing optimal strategies for a class of problems that belong to the domain of optimal stopping problems. Their solution follows from the odds-strategy, and the importance of the odds-strategy lies in its optimality, as explained below. This was used to devise betting strategies called martingales.
FULL TEXT
The odds-algorithm is a mathematical method for computing optimal strategies for a class of problems that belong to the domain of optimal stopping problems. Their solution follows from the odds-strategy, and the importance of the odds-strategy lies in its optimality, as explained below. This was used to devise betting strategies called martingales.
The odds-algorithm applies to a class of problems called last-success-problems. Formally, the objective in these problems is to maximize the probability of identifying in a sequence of sequentially observed independent events the last event satisfying a specific criterion (a "specific event"). This identification must be done at the time of observation. No revisiting of preceding observations is permitted. Usually, a specific event is defined by the decision maker as an event that is of true interest in the view of "stopping" to take a well-defined action. Such problems are encountered in several situations.


Two different situations exemplify the interest in maximizing the probability to stop on a last specific event.
Consider a sequence of n independent events. Associate with this sequence another sequence 




I

1


,


I

2


,

…
,


I

n




{\displaystyle I_{1},\,I_{2},\,\dots ,\,I_{n}}

 with values 1 or 0. Here 





I

k


=
1


{\displaystyle \,I_{k}=1}

 stands for the event that the kth observation is interesting (as defined by the decision maker), and 





I

k


=
0


{\displaystyle \,I_{k}=0}

 for non-interesting. Let 





p

k


=
P
(


I

k



=
1
)


{\displaystyle \,p_{k}=P(\,I_{k}\,=1)}

 be the probability that the kth event is interesting. Further let 





q

k


=

1
−

p

k




{\displaystyle \,q_{k}=\,1-p_{k}}

 and 





r

k


=

p

k



/


q

k




{\displaystyle \,r_{k}=p_{k}/q_{k}}

. Note that 





r

k




{\displaystyle \,r_{k}}

 represents the odds of the kth event turning out to be interesting, explaining the name of the odds-algorithm.
The odds-algorithm sums up the odds in reverse order
until this sum reaches or exceeds the value 1 for the first time. If this happens at index s, it saves s and the corresponding sum
If the sum of the odds does not reach 1, it sets s = 1. At the same time it computes
The output is
The odds-strategy is the rule to observe the events one after the other and to stop on the first interesting event from index s onwards (if any), where s is the stopping threshold of output a.
The importance of the odds-strategy, and hence of the odds-algorithm, lies in the following odds-theorem.
The odds-theorem states that
The odds-algorithm computes the optimal strategy and the optimal win probability at the same time. Also, the number of operations of the odds-algorithm is (sub)linear in n. Hence no quicker algorithm can possibly exist for all sequences, so that the odds-algorithm is, at the same time, optimal as an algorithm.
F. T. Bruss (2000) devised the odds algorithm, and coined its name. It is also known as Bruss-algorithm (strategy). Free implementations can be found on the web.
Applications reach from medical questions in clinical trials over sales problems, secretary problems, portfolio selection, (one-way) search strategies, trajectory problems and the parking problem to problems in on-line maintenance and others.
There exists, in the same spirit, an Odds-Theorem for continuous-time arrival processes with independent increments such as the Poisson process (Bruss (2000)). In some cases, the odds are not necessarily known in advance (as in Example 2 above) so that the application of the odds-algorithm is not directly possible. In this case each step can use sequential estimates of the odds. This is meaningful, if the number of unknown parameters is not large compared with the number n of observations. The question of optimality is then more complicated, however, and requires additional studies. Generalizations of the odds-algorithm allow for different rewards for failing to stop and wrong stops as well as replacing independence assumptions by weaker ones (Ferguson (2008)).
Bruss and Paindaveine (2000) discussed a problem of selecting the last 



k


{\displaystyle k}

 successes. Tamaki (2010) proved a multiplicative odds theorem which deals with a problem of stopping at any of the last 



k


{\displaystyle k}

 successes.