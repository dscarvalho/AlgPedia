ABOUT
In cryptography, a public key exchange algorithm is a cryptographic algorithm which allows two parties to create and share a secret key, which they can use to encrypt messages between themselves. The Ring Learning with Errors Key Exchange (RLWE-KEX) is one of a new class of public key exchange algorithms that are designed to be secure against an adversary that possesses a quantum computer. This is important because the vast majority of public key algorithms in use today are easily broken by a quantum computer and scientists are making steady progress toward creating such a computer. RLWE-KEX is one of a set of Post Quantum cryptographic algorithms which are based on the difficulty of solving certain mathematical problems involving lattices. Unlike older lattice based cryptographic algorithms, the RLWE-KEX is provably reducible to a known hard problem in lattices.
FULL TEXT
In cryptography, a public key exchange algorithm is a cryptographic algorithm which allows two parties to create and share a secret key, which they can use to encrypt messages between themselves. The Ring Learning with Errors Key Exchange (RLWE-KEX) is one of a new class of public key exchange algorithms that are designed to be secure against an adversary that possesses a quantum computer. This is important because the vast majority of public key algorithms in use today are easily broken by a quantum computer and scientists are making steady progress toward creating such a computer. RLWE-KEX is one of a set of Post Quantum cryptographic algorithms which are based on the difficulty of solving certain mathematical problems involving lattices. Unlike older lattice based cryptographic algorithms, the RLWE-KEX is provably reducible to a known hard problem in lattices.


Since the 1980s the security of cryptographic key exchanges and digital signatures over the Internet has been primarily based on a small number of public key algorithms. The security of these algorithms is based on a similarly small number of computationally hard problems in classical computing. These problems are the difficulty of factoring the product of two carefully chosen prime numbers, the difficulty to compute discrete logarithms in a carefully chosen finite field, and the difficulty of computing discrete logarithms in a carefully chosen elliptic curve group. These problems are very difficult to solve on a classical computer (the type of computer the world has known since the 1940s through today) but are rather easily solved by a relatively small quantum computer using only 5 to 10 thousand of bits of memory. There is optimism in the computer industry that larger scale quantum computers will be available around 2030. If a quantum computer of sufficient size were built, all of the public key algorithms based on these three classically hard problems would be insecure. This public key cryptography is used today to secure Internet websites, protect computer login information, and prevent our computers from accepting malicious software.
Cryptography that is not susceptible to attack by a quantum computer is referred to as Quantum Safe, or Post-Quantum cryptography. One class of quantum resistant cryptographic algorithms is based on a concept called "Learning with errors" introduced by Oded Regev in 2005.[1] A specialized form of Learning with errors operates within the Ring of Polynomials over a Finite Field. This specialized form is called Ring Learning with Errors or RLWE.
There are a variety of cryptographic algorithms which work using the RLWE paradigm. There are public key encryption algorithms, homomorphic encryption algorithms, and RLWE digital signature algorithms in addition to the public key, key exchange algorithm presented in this article
A key exchange algorithm is a type of public key algorithm which establishes a shared secret key between two communicants on a communications link. The classic example of a key exchange is the Diffie-Hellman key exchange. The exchange consists of one transmission from one end of the line and one transmission from the other end of the link. Diffie-Hellman and Elliptic Curve Diffie-Hellman are the two most popular key exchange algorithms.
The RLWE Key Exchange is designed to be a "quantum safe" replacement for the widely used Diffie-Hellman and Elliptic Curve Diffie-Hellman key exchanges that are used to secure the establishment of secret keys over untrusted communications channels. Like Diffie-Hellman and Elliptic Curve Diffie-Hellman, the Ring-LWE key exchange provides a cryptographic property called "forward secrecy"; the aim of which is to reduce the effectiveness of mass surveillance programs and ensure that there are no long term secret keys that can be compromised that would enable bulk decryption.
Starting with a prime integer q, the Ring-LWE key exchange works in the ring of polynomials modulo a polynomial Φ(x) with coefficients in the field of integers mod q (i.e. the ring Rq = 



Z
q


{\displaystyle Zq}

[x]/Φ(x) ). Multiplication and addition of polynomials will work in the usual fashion with results of a multiplication reduced mod Φ(x).
The fundamental idea of using LWE and Ring LWE for key exchange was proposed and filed at the University of Cincinnati in 2011 by Jintai Ding. The basic idea comes from the associativity of matrix multiplications, and the errors are used to provide the security. The paper[2] appeared in 2012 after a provisional patent application was filed in 2012.
In 2014, Peikert[3] presented a key transport scheme following the same basic idea of Ding's, where the new idea of sending additional 1 bit signal for rounding in Ding's construction is also utilized. For somewhat greater than 128 bits of security, Singh presents a set of parameters which have 6956-bit public keys for the Peikert's scheme.[4] The corresponding private key would be roughly 14000 bits. An RLWE version of the classic MQV variant of a Diffie-Hellman key exchange was later published by Zhang et al. in 2014. The security of both key exchanges is directly related to the problem of finding approximate short vectors in an ideal lattice.This article will closely follow the RLWE work of Ding in "A Simple Provably Secure Key Exchange Scheme Based on the Learning with Errors Problem".[2] For this presentation a typical polynomial is expressed as:
a(x) = a0 + a1x + a2x2 + ... + an-3xn-3 + an-2xn-2 + an-1xn-1
The coefficients of this polynomial, the ai's, are integers mod q. The polynomial Φ(x) will be the cyclotomic polynomial. When n is a power of 2 then Φ(x) = xn +1.[4][5]
The RLWE-KEX uses polynomials which are considered "small" with respect to a measure called the "infinity norm." The infinity norm for a polynomial is simply the value of the largest coefficient of the polynomial when the coefficients are considered as integers in Z rather than 



Z
q


{\displaystyle Zq}

(i.e.from the set {-(q-1)/2,..., 0, ... (q-1)/2} ). The algorithm's security depends on an ability to generate random polynomials which are small with respect to the infinity norm. This is done simply by randomly generating the coefficients for a polynomial (sn-1, ..., s0) which are guaranteed or very likely to be small. There are two common ways to do this:
For the rest of this article, the random small polynomials will be sampled according to a distribution which is simply specified as D. Further q will be an odd prime such that q is congruent to 1 mod 4 and 1 mod 2n. Other cases for q and n are thoroughly discussed in "A Toolkit for Ring-LWE Cryptography" and in Singh's "Even More Practical Key Exchange for the Internet using Lattice Cryptography."[7][8] and another paper by Singh. A fixed public polynomial, a(x), shared by all users of the network. It is deterministically generated from a cryptographically secure source.
Given a(x) as stated, we can randomly choose small polynomials s(x) and e(x) to be the "private key" in a public key exchange. The corresponding public key will be the polynomial p(x) = a(x)s(x) + 2e(x).
The key exchange will take place between two devices. There will be an initiator for the key exchange designated as (I) and a respondent designated as (R). Both I and R know q, n, a(x), and have the ability to generate small polynomials according to the distribution 




χ

α




{\displaystyle \chi _{\alpha }}

 with parameter 



α


{\displaystyle \alpha }

. The distribution 




χ

α




{\displaystyle \chi _{\alpha }}

 is usually the discrete gaussian distribution on the ring Rq = 



Z
q


{\displaystyle Zq}

[x]/Φ(x). The description which follows does not contain any explanation of why the key exchange results in the same key at both ends of a link. Rather, it succinctly specifies the steps to be taken. For a thorough understanding of why the key exchange results in the initiator and responder having the same key, the reader should look at the referenced work by Ding et al.[2]
The key exchange begins with the initiator (I) doing the following:
Initiation:
Response:
Finish:
In the above key exchange, 



S
i
g


{\displaystyle Sig}

 is the signal function defined as below:
Define subset E:=



{
−
⌊


q
4


⌋
,
.
.
.
,
⌊


q
4


⌉
}


{\displaystyle \{-\lfloor {\frac {q}{4}}\rfloor ,...,\lfloor {\frac {q}{4}}\rceil \}}

 of 



Z
q


{\displaystyle Zq}

 = 



{
−



q
−
1

2


,
.
.
.
,



q
−
1

2


}


{\displaystyle \{-{\frac {q-1}{2}},...,{\frac {q-1}{2}}\}}

. Here, 



⌊
.
⌋


{\displaystyle \lfloor .\rfloor }

 and 



⌊
.
⌉


{\displaystyle \lfloor .\rceil }

denotes the floor and the rounding to the nearest integer respectively.
Function 



S
i
g


{\displaystyle Sig}

 is the characteristic function of the complement of E.




S
i
g
:
Z
q
→
{
0
,
1
}


{\displaystyle Sig:Zq\rightarrow \{0,1\}}

: 



S
i
g
(
v
)
=


{



0
,



if 

v
∈
E




1
,



if 

v
∉
E








{\displaystyle Sig(v)={\begin{cases}0,&{\text{if }}v\in E\\1,&{\text{if }}v\notin E\end{cases}}}






M
o

d

2




{\displaystyle Mod_{2}}

 is the mod 2 operation to eliminate the error terms defined as follows: 



M
o

d

2


(
v
,
w
)
=


(


v
+
w
.



q
−
1

2




)



 mod 

q

 mod 2



{\displaystyle Mod_{2}(v,w)={\biggl (}v+w.{\frac {q-1}{2}}{\Biggr )}{\text{ mod }}q{\text{ mod 2}}}


Note that the values of 




k

I




{\displaystyle k_{I}}

 and 




k

R




{\displaystyle k_{R}}

 are only approximately equal. In order to extract a shared key using this approximate equal values, a reconciliation function, also known as a signal function is used. This function indicates the region in which each coefficient of a polynomial 



v


{\displaystyle v}

 in 




R

q




{\displaystyle R_{q}}

 lies and helps to make sure that the error terms in 




k

R




{\displaystyle k_{R}}

 and 




k

I




{\displaystyle k_{I}}

 do not result in different mod q operations.
The methods of reconciliation and key string generation depends on the specific RLWE-KEX scheme in question. Some method is based on modular arithmetic, while others may be based on high-dimension geometry.[4][9]
If the key exchange worked properly, the initiator's string and the respondent's string will be the same.
Depending on the specifics of the parameters chosen, there is an extremely small probability that this key exchange will fail to produce the same key. Parameters for the key exchange can be chosen to make the probability of failure in the key exchange very small; much less than the probability of undetectable garbles or device failures.
The RWLE-KEX exchange presented above worked in the Ring of Polynomials of degree n-1 or less mod a polynomial Φ(x). The presentation assumed that n was a power of 2 and that q was a prime which was congruent to 1 (mod 2n). Following the guidance given in Peikert's paper, Singh suggested two sets of parameters for the RLWE-KEX.
For 128 bits of security, n = 512, q = 25601, and Φ(x) = x512 + 1
For 256 bits of security, n = 1024, q = 40961, and Φ(x) = x1024 + 1
Because the key exchange uses random sampling and fixed bounds there is a small probability that the key exchange will fail to produce the same key for the initiator and responder. If we assume that the Gaussian parameter σ is 8/sqrt(2π) and the uniform sampling bound (b) = 5 (see Singh),[4] then the probability of key agreement failure is less than 2−71 for the 128-bit secure parameters and less than 2−91 for the 256-bit secure parameters.
In their November 2015 paper, Alkim, Ducas, Popplemann, and Schwabe recommend the following parameters n = 1024, q =12289, and Φ(x) = x1024 + 1.[9] This represents a 70% reduction in public key size over the n = 1024 parameters of Singh. A listing of a number of different parameter choices for key exchanges using the Ring Learning with Errors problem are given at this link (click here).[10]
The security of this key exchange is based on the underlying hardness of Ring Learning With Errors problem that has been proven to be as hard as the worst case solution to the Shortest Vector Problem (SVP) in an Ideal Lattice.[1][2] The best method to gauge the practical security of a given set of lattice parameters is the BKZ 2.0 lattice reduction algorithm.[11] According to the BKZ 2.0 algorithm the key exchange parameters listed above will provide greater than 128 or 256 bits of security, respectively.
In 2014 Douglas Stebila made a patch for OpenSSL 1.0.1f. based on his work and others published in "Post-quantum key exchange for the TLS protocol from the ring learning with errors problem."[12] Software implementing the work of Singh is found on GitHub at https://github.com/vscrypto/ringlwe.[4]
A variant of the approach described above is an authenticated version in the work of Zhang, Zhang, Ding, Snook and Dagdelen in their paper, "Post Quantum Authenticated Key Exchange from Ideal Lattices."[13] The concept of creating what has been called a Diffie-Hellman-like Key Exchange using lattices with a reconciliation function appears to have first been presented by French researchers Aguilar, Gaborit, Lacharme, Schrek, and Zemor at PQCrypto 2010 in their talk, "Noisy Diffie-Hellman Protocols."[14]
In November 2015, Alkim, Ducas, Popplemann, and Schwabe built on the prior work of Peikert and used what they believe is a more precise costing of lattice attacks to recommend parameters.[9] Software based on the work of Alkim, Ducas, Popplemann, and Schwabe is found on GitHub at https://github.com/tpoeppelmann/newhope[9]