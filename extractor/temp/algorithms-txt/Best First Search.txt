ABOUT
Best-first search is a search algorithm which explores a graph by expanding the most promising node chosen according to a specified rule.
FULL TEXT
Best-first search is a search algorithm which explores a graph by expanding the most promising node chosen according to a specified rule.
Judea Pearl described best-first search as estimating the promise of node n by a "heuristic evaluation function 



f
(
n
)


{\displaystyle f(n)}

 which, in general, may depend on the description of n, the description of the goal, the information gathered by the search up to that point, and most important, on any extra knowledge about the problem domain."[1][2]
Some authors have used "best-first search" to refer specifically to a search with a heuristic that attempts to predict how close the end of a path is to a solution, so that paths which are judged to be closer to a solution are extended first. This specific type of search is called greedy best-first search[2] or pure heuristic search.[3]
Efficient selection of the current best candidate for extension is typically implemented using a priority queue.
The A* search algorithm is an example of best-first search, as is B*. Best-first algorithms are often used for path finding in combinatorial search. (Neither A* nor B* is a greedy best-first search as they incorporate the distance from start in addition to estimated distances to the goal.)


An algorithm implementing best-first search follows.[4]
This version of the algorithm is not complete, i.e. it does not always find a possible path between two nodes, even if there is one. For example, it gets stuck in a loop if it arrives at a dead end, that is a node with the only successor being its parent. It would then go back to its parent, add the dead-end successor to the OPEN list again, and so on.
The following version extends the algorithm to use an additional CLOSED list, containing all nodes that have been evaluated and will not be looked at again. As this will avoid any node being evaluated twice, it is not subject to infinite loops.
The given pseudo code of both versions just terminates when no path is found. An actual implementation would of course require special handling of this case.
Using a greedy algorithm, expand the first successor of the parent. After a successor is generated:[5]