ABOUT
In bioinformatics, neighbor joining is a bottom-up (agglomerative) clustering method for the creation of phylogenetic trees, created by Naruya Saitou and Masatoshi Nei in 1987.[2] Usually used for trees based on DNA or protein sequence data, the algorithm requires knowledge of the distance between each pair of taxa (e.g., species or sequences) to form the tree.[3]
FULL TEXT
In bioinformatics, neighbor joining is a bottom-up (agglomerative) clustering method for the creation of phylogenetic trees, created by Naruya Saitou and Masatoshi Nei in 1987.[2] Usually used for trees based on DNA or protein sequence data, the algorithm requires knowledge of the distance between each pair of taxa (e.g., species or sequences) to form the tree.[3]


Neighbor joining takes as input a distance matrix specifying the distance between each pair of taxa. The algorithm starts with a completely unresolved tree, whose topology corresponds to that of a star network, and iterates over the following steps until the tree is completely resolved and all branch lengths are known:
Based on a distance matrix relating the 



n


{\displaystyle n}

 taxa, calculate 



Q


{\displaystyle Q}

 as follows:




Q
(
i
,
j
)
=
(
n
−
2
)
d
(
i
,
j
)
−

∑

k
=
1


n


d
(
i
,
k
)
−

∑

k
=
1


n


d
(
j
,
k
)


{\displaystyle Q(i,j)=(n-2)d(i,j)-\sum _{k=1}^{n}d(i,k)-\sum _{k=1}^{n}d(j,k)}



 
 
 
 
(1)
where 



d
(
i
,
j
)


{\displaystyle d(i,j)}

 is the distance between taxa 



i


{\displaystyle i}

 and 



j


{\displaystyle j}

.
For each of the taxa in the pair being joined, use the following formula to calculate the distance to the new node:




δ
(
f
,
u
)
=


1
2


d
(
f
,
g
)
+


1

2
(
n
−
2
)




[

∑

k
=
1


n


d
(
f
,
k
)
−

∑

k
=
1


n


d
(
g
,
k
)
]




{\displaystyle \delta (f,u)={\frac {1}{2}}d(f,g)+{\frac {1}{2(n-2)}}\left[\sum _{k=1}^{n}d(f,k)-\sum _{k=1}^{n}d(g,k)\right]\quad }



 
 
 
 
(2)
and:
Taxa 



f


{\displaystyle f}

 and 



g


{\displaystyle g}

 are the paired taxa and 



u


{\displaystyle u}

 is the newly created node. The branches joining 



f


{\displaystyle f}

 and 



u


{\displaystyle u}

 and 



g


{\displaystyle g}

 and 



u


{\displaystyle u}

, and their lengths, 



δ
(
f
,
u
)


{\displaystyle \delta (f,u)}

 and 



δ
(
g
,
u
)


{\displaystyle \delta (g,u)}

 are part of the tree which is gradually being created; they neither affect nor are affected by later neighbor-joining steps.
For each taxon not considered in the previous step, we calculate the distance to the new node as follows:




d
(
u
,
k
)
=


1
2


[
d
(
f
,
k
)
+
d
(
g
,
k
)
−
d
(
f
,
g
)
]


{\displaystyle d(u,k)={\frac {1}{2}}[d(f,k)+d(g,k)-d(f,g)]}



 
 
 
 
(3)
where 



u


{\displaystyle u}

 is the new node, 



k


{\displaystyle k}

 is the node which we want to calculate the distance to and 



f


{\displaystyle f}

 and 



g


{\displaystyle g}

 are the members of the pair just joined.
Neighbor joining on a set of 



n


{\displaystyle n}

 taxa requires 



n
−
3


{\displaystyle n-3}

 iterations. At each step one has to build and search a 



Q


{\displaystyle Q}

 matrix. Initially the 



Q


{\displaystyle Q}

 matrix is size 



n
×
n


{\displaystyle n\times n}

, then the next step it is 



(
n
−
1
)
×
(
n
−
1
)


{\displaystyle (n-1)\times (n-1)}

, etc. Implementing this in a straightforward way leads to an algorithm with a time complexity of 



O
(

n

3


)


{\displaystyle O(n^{3})}

; implementations exist which use heuristics to do much better than this on average.
Let us assume that we have five taxa 



(
a
,
b
,
c
,
d
,
e
)


{\displaystyle (a,b,c,d,e)}

 and the following distance matrix:
We obtain the following values for the 



Q


{\displaystyle Q}

 matrix (the diagonal elements of the matrix are not used and are omitted here):
In the example above, 



Q
(
a
,
b
)
=
−
50


{\displaystyle Q(a,b)=-50}

. This is the smallest value of 



Q


{\displaystyle Q}

, so we join nodes 



a


{\displaystyle a}

 and 



b


{\displaystyle b}

. Let 



u


{\displaystyle u}

 denote the new node; the branches joining 



a


{\displaystyle a}

 and 



b


{\displaystyle b}

 to 



u


{\displaystyle u}

 then have lengths 



δ
(
a
,
u
)
=
2


{\displaystyle \delta (a,u)=2}

 and 



δ
(
b
,
u
)
=
3


{\displaystyle \delta (b,u)=3}

, by equation (2), above.
We then proceed to update the distance matrix; using equation (3) above, we compute the distance from 



u


{\displaystyle u}

 to each of the other nodes besides 



a


{\displaystyle a}

 and 



b


{\displaystyle b}

. In this case, we obtain 



d
(
u
,
c
)
=
7


{\displaystyle d(u,c)=7}

, 



d
(
u
,
d
)
=
7


{\displaystyle d(u,d)=7}

, and 



d
(
u
,
e
)
=
6


{\displaystyle d(u,e)=6}

. The resulting distance matrix is:
The corresponding Q matrix is:
We may choose either to join 



u


{\displaystyle u}

 and 



c


{\displaystyle c}

, or to join 



d


{\displaystyle d}

 and 



e


{\displaystyle e}

; both pairs have the minimal 



Q


{\displaystyle Q}

 value of 



−
28


{\displaystyle -28}

, and either choice leads to the same result. For concreteness, let us join 



u


{\displaystyle u}

 and 



c


{\displaystyle c}

 and call the new node 



v


{\displaystyle v}

; this gives branch lengths 



δ
(
u
,
v
)
=
3


{\displaystyle \delta (u,v)=3}

 and 



δ
(
c
,
v
)
=
4


{\displaystyle \delta (c,v)=4}

 as shown in the figure, and the distance matrix for the remaining 3 nodes, 



v


{\displaystyle v}

, 



d


{\displaystyle d}

, and 



e


{\displaystyle e}

, is:
The tree topology is fully resolved at this point, so we don't need to calculate 



Q


{\displaystyle Q}

 or do any more joining of neighbors. However, we can use these distances to get the remaining 3 branch-lengths, as shown in the figure.
This example represents an idealized case: note that if we move from any taxon to any other along the branches of the tree, and sum the lengths of the branches traversed, the result is equal to the distance between those taxa in the input distance matrix. For example, going from 



d


{\displaystyle d}

 to 



b


{\displaystyle b}

 we have 



2
+
2
+
3
+
3
=
10


{\displaystyle 2+2+3+3=10}

. A distance matrix whose distances agree in this way with some tree is said to be 'additive', a property which is rare in practice. Nonetheless it is important to note that, given an additive distance matrix as input, neighbor joining is guaranteed to find the tree whose distances between taxa agree with it.
Neighbor joining may be viewed as a greedy algorithm for optimizing a tree according to the 'balanced minimum evolution'[4] (BME) criterion. For each topology, BME defines the tree length (sum of branch lengths) to be a particular weighted sum of the distances in the distance matrix, with the weights depending on the topology. The BME optimal topology is the one which minimizes this tree length. Neighbor joining at each step greedily joins that pair of taxa which will give the greatest decrease in the estimated tree length. This procedure is not guaranteed to find the topology which is optimal by the BME criterion, although it often does and is usually quite close.
The main virtue of NJ is that it is fast. This makes it practical for analyzing large data sets (hundreds or thousands of taxa) and for bootstrapping, for which purposes other means of analysis (e.g. maximum parsimony, maximum likelihood) may be computationally prohibitive.
Neighbor joining has the property that if the input distance matrix is correct, then the output tree will be correct. Furthermore, the correctness of the output tree topology is guaranteed as long as the distance matrix is 'nearly additive', specifically if each entry in the distance matrix differs from the true distance by less than half of the shortest branch length in the tree.[5] In practice the distance matrix rarely satisfies this condition, but neighbor joining often constructs the correct tree topology anyway.[6] The correctness of neighbor joining for nearly additive distance matrices implies that it is statistically consistent under many models of evolution; given data of sufficient length, neighbor joining will reconstruct the true tree with high probability. Compared with UPGMA and WPGMA, neighbor joining has the advantage that it does not assume all lineages evolve at the same rate (molecular clock hypothesis).
Nevertheless, neighbor joining has been largely superseded by phylogenetic methods that do not rely on distance measures and offer superior accuracy under most conditions.[citation needed] Neighbor joining has the undesirable feature that it often assigns negative lengths to some of the branches.
There are many programs available implementing neighbor joining. RapidNJ and NINJA are fast implementations with typical run times proportional to approximately the square of the number of taxa. BIONJ and Weighbor are variants of neighbor joining which improve on its accuracy by making use of the fact that the shorter distances in the distance matrix are generally better known than the longer distances. FastME is an implementation of the closely related balanced minimum evolution method.