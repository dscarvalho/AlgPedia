ABOUT
In computer vision and pattern recognition, point set registration, also known as point matching, is the process of finding a spatial transformation that aligns two point sets. The purpose of finding such a transformation includes merging multiple data sets into a globally consistent model, and mapping a new measurement to a known data set to identify features or to estimate its pose. A point set may be raw data from 3D scanning or an array of rangefinders. For use in image processing and feature-based image registration, a point set may be a set of features obtained by feature extraction from an image, for example corner detection. Point set registration is used in optical character recognition[1][2] and aligning data from magnetic resonance imaging with computer aided tomography scans.[3][4]
FULL TEXT
In computer vision and pattern recognition, point set registration, also known as point matching, is the process of finding a spatial transformation that aligns two point sets. The purpose of finding such a transformation includes merging multiple data sets into a globally consistent model, and mapping a new measurement to a known data set to identify features or to estimate its pose. A point set may be raw data from 3D scanning or an array of rangefinders. For use in image processing and feature-based image registration, a point set may be a set of features obtained by feature extraction from an image, for example corner detection. Point set registration is used in optical character recognition[1][2] and aligning data from magnetic resonance imaging with computer aided tomography scans.[3][4]


The problem may be summarized as follows:[5] Let 



{


M


,


S


}


{\displaystyle \lbrace {\mathcal {M}},{\mathcal {S}}\rbrace }

 be two finite size point sets in a finite-dimensional real vector space 





R


d




{\displaystyle \mathbb {R} ^{d}}

, which contain 



M


{\displaystyle M}

 and 



N


{\displaystyle N}

 points respectively. The problem is to find a transformation to be applied to the moving "model" point set 





M




{\displaystyle {\mathcal {M}}}

 such that the difference between 





M




{\displaystyle {\mathcal {M}}}

 and the static "scene" set 





S




{\displaystyle {\mathcal {S}}}

 is minimized. In other words, a mapping from 





R


d




{\displaystyle \mathbb {R} ^{d}}

 to 





R


d




{\displaystyle \mathbb {R} ^{d}}

 is desired which yields the best alignment between the transformed "model" set and the "scene" set. The mapping may consist of a rigid or non-rigid transformation. The transformation model may be written as 



T


{\displaystyle T}

 where the transformed, registered model point set is:




T
(


M


)


{\displaystyle T({\mathcal {M}})}



 
 
 
 
(1)
It is useful to define an optimization parameter 



θ


{\displaystyle \theta }

:




T
(


M


,
θ
)


{\displaystyle T({\mathcal {M}},\theta )}



 
 
 
 
(2)
such that it is clear that the optimizing algorithm adjusts 



θ


{\displaystyle \theta }

. Depending on the problem and number of dimensions, there may be more such parameters. The output of a point set registration algorithm is therefore the transformation parameter 



θ


{\displaystyle \theta }

 of model 



T


{\displaystyle T}

 so that 





M




{\displaystyle {\mathcal {M}}}

 is optimally aligned to 





S




{\displaystyle {\mathcal {S}}}

.
In convergence, it is desired for the distance between the two point sets to reach a global minimum. This is difficult without exhausting all possible transformations, so a local minimum suffices. The distance function between a transformed model point set 



T
(


M


)


{\displaystyle T({\mathcal {M}})}

 and the scene point set 





S




{\displaystyle {\mathcal {S}}}

 is given by some function 



dist


{\displaystyle \operatorname {dist} }

. A simple approach is to take the square of the Euclidean distance for every pair of points:




dist
⁡
(
T
(


M


)
,


S


)
=

∑

m
∈
T
(


M


)



∑

s
∈


S




(
m
−
s

)

2




{\displaystyle \operatorname {dist} (T({\mathcal {M}}),{\mathcal {S}})=\sum _{m\in T({\mathcal {M}})}\sum _{s\in {\mathcal {S}}}(m-s)^{2}}



 
 
 
 
(3)
Minimizing such a function in rigid registration is equivalent to solving a least squares problem. However, this function is sensitive to outlier data and consequently algorithms based on this function tend to be less robust against noisy data. A more robust formulation of the cost function uses some robust function 



g


{\displaystyle g}

:





dist

robust


⁡
(
T
(


M


)
,


S


)
=

∑

m
∈
T
(


M


)



∑

s
∈


S




g
(
(
m
−
s

)

2


)


{\displaystyle \operatorname {dist} _{\operatorname {robust} }(T({\mathcal {M}}),{\mathcal {S}})=\sum _{m\in T({\mathcal {M}})}\sum _{s\in {\mathcal {S}}}g((m-s)^{2})}



 
 
 
 
(4)
Such a formulation is known as an M-estimator. The robust function 



g


{\displaystyle g}

 is chosen such that the local configuration of the point set is insensitive to distant points, hence making it robust against outliers and noise.[6]
Given two point sets, rigid registration yields a rigid transformation which maps one point set to the other. A rigid transformation is defined as a transformation that does not change the distance between any two points. Typically such a transformation consists of translation and rotation.[2] In rare cases, the point set may also be mirrored.
Given two point sets, non-rigid registration yields a non-rigid transformation which maps one point set to the other. Non-rigid transformations include affine transformations such as scaling and shear mapping. However, in the context of point set registration, non-rigid registration typically involves nonlinear transformation. If the eigenmodes of variation of the point set are known, the nonlinear transformation may be parametrized by the eigenvalues.[7] A nonlinear transformation may also be parametrized as a thin plate spline.[1][7]
Some approaches to point set registration use algorithms that solve the more general graph matching problem.[5] However, the computational complexity of such methods tend to be high and they are limited to rigid registrations. Algorithms specific to the point set registration problem are described in the following sections.
The iterative closest point (ICP) algorithm was introduced by Besl and McKay.[8] The algorithm performs rigid registration in an iterative fashion by assuming that every point in 





M




{\displaystyle {\mathcal {M}}}

 corresponds with the closest point to it in 





S




{\displaystyle {\mathcal {S}}}

, and then finding the least squares rigid transformation. As such, it works best if the initial pose of 





M




{\displaystyle {\mathcal {M}}}

 is sufficiently close to 





S




{\displaystyle {\mathcal {S}}}

. In pseudocode, the basic algorithm is implemented as follows:
Here, the function least_squares performs least squares regression to minimize the distance in each of the 



⟨

m

i


,




s
^




j


⟩


{\displaystyle \langle m_{i},{\hat {s}}_{j}\rangle }

 pairs, i.e. minimizing the distance function in Equation (3).
Because the cost function of registration depends on finding the closest point in 





S




{\displaystyle {\mathcal {S}}}

 to every point in 





M




{\displaystyle {\mathcal {M}}}

, it can change as the algorithm is running. As such, it is difficult to prove that ICP will in fact converge exactly to the local optimum.[6] In fact, empirically, ICP and EM-ICP do not converge to the local minimum of the cost function.[6] Nonetheless, because ICP is intuitive to understand and straightforward to implement, it remains the most commonly used point set registration algorithm.[6] Many variants of ICP have been proposed, affecting all phases of the algorithm from the selection and matching of points to the minimization strategy.[7][9] For example, the expectation maximization algorithm is applied to the ICP algorithm to form the EM-ICP method, and the Levenberg-Marquardt algorithm is applied to the ICP algorithm to form the LM-ICP method.[2]
Robust point matching (RPM) was introduced by Gold et al.[10] The method performs registration using deterministic annealing and soft assignment of correspondences between point sets. Whereas in ICP the correspondence generated by the nearest-neighbour heuristic is binary, RPM uses a soft correspondence where the correspondence between any two points can be anywhere from 0 to 1, although it ultimately converges to either 0 or 1. The correspondences found in RPM is always one-to-one, which is not always the case in ICP.[1] Let 




m

i




{\displaystyle m_{i}}

 be the 



i


{\displaystyle i}

th point in 





M




{\displaystyle {\mathcal {M}}}

 and 




s

j




{\displaystyle s_{j}}

 be the 



j


{\displaystyle j}

th point in 





S




{\displaystyle {\mathcal {S}}}

. The match matrix 




μ



{\displaystyle \mathbf {\mu } }

 is defined as such:





μ

i
j


=

{




1



if point 


m

i



 corresponds to point 


s

j






0



otherwise









{\displaystyle \mu _{ij}=\left\lbrace {\begin{matrix}1&{\text{if point }}m_{i}{\text{ corresponds to point }}s_{j}\\0&{\text{otherwise}}\end{matrix}}\right.}



 
 
 
 
(rpm.1)
The problem is then defined as: Given two point sets 





M




{\displaystyle {\mathcal {M}}}

 and 





S




{\displaystyle {\mathcal {S}}}

 find the Affine transformation 



T


{\displaystyle T}

 and the match matrix 




μ



{\displaystyle \mathbf {\mu } }

 that best relates them.[10] Knowing the optimal transformation makes it easy to determine the match matrix, and vice versa. However, the RPM algorithm determines both simultaneously. The transformation may be decomposed into a translation vector and a transformation matrix:
The matrix 




A



{\displaystyle \mathbf {A} }

 in 2D is composed of four separate parameters 



{
a
,
θ
,
b
,
c
}


{\displaystyle \lbrace a,\theta ,b,c\rbrace }

, which are scale, rotation, and the vertical and horizontal shear components respectively. The cost function is then:




cost
=

∑

j
=
1


N



∑

i
=
1


M



μ

i
j


∥

s

j


−

t

−

A


m

i



∥

2


+
g
(

A

)
−
α

∑

j
=
1


N



∑

i
=
1


M



μ

i
j




{\displaystyle \operatorname {cost} =\sum _{j=1}^{N}\sum _{i=1}^{M}\mu _{ij}\lVert s_{j}-\mathbf {t} -\mathbf {A} m_{i}\rVert ^{2}+g(\mathbf {A} )-\alpha \sum _{j=1}^{N}\sum _{i=1}^{M}\mu _{ij}}



 
 
 
 
(rpm.2)
subject to 



∀
j
 

∑

i
=
1


M



μ

i
j


≤
1


{\displaystyle \forall j~\sum _{i=1}^{M}\mu _{ij}\leq 1}

, 



∀
i
 

∑

j
=
1


N



μ

i
j


≤
1


{\displaystyle \forall i~\sum _{j=1}^{N}\mu _{ij}\leq 1}

, 



∀
i
j
 

μ

i
j


∈
{
0
,
1
}


{\displaystyle \forall ij~\mu _{ij}\in \lbrace 0,1\rbrace }

. The 



α


{\displaystyle \alpha }

 term biases the objective towards stronger correlation by decreasing the cost if the match matrix has more ones in it. The function 



g
(

A

)


{\displaystyle g(\mathbf {A} )}

 serves to regularize the Affine transformation by penalizing large values of the scale and shear components:
for some regularization parameter 



γ


{\displaystyle \gamma }

.
The RPM method optimizes the cost function using the Softassign algorithm. The 1D case will be derived here. Given a set of variables 



{

Q

j


}


{\displaystyle \lbrace Q_{j}\rbrace }

 where 




Q

j


∈


R


1




{\displaystyle Q_{j}\in \mathbb {R} ^{1}}

. A variable 




μ

j




{\displaystyle \mu _{j}}

 is associated with each 




Q

j




{\displaystyle Q_{j}}

 such that 




∑

j
=
1


J



μ

j


=
1


{\displaystyle \sum _{j=1}^{J}\mu _{j}=1}

. The goal is to find 




μ



{\displaystyle \mathbf {\mu } }

 that maximizes 




∑

j
=
1


J



μ

j



Q

j




{\displaystyle \sum _{j=1}^{J}\mu _{j}Q_{j}}

. This can be formulated as a continuous problem by introducing a control parameter 



β
>
0


{\displaystyle \beta >0}

. In the deterministic annealing method, the control parameter 



β


{\displaystyle \beta }

 is slowly increased as the algorithm runs. Let 




μ



{\displaystyle \mathbf {\mu } }

 be:





μ



j
^




=



exp
⁡

(
β

Q



j
^




)




∑

j
=
1


J


exp
⁡

(
β

Q

j


)






{\displaystyle \mu _{\hat {j}}={\frac {\exp {(\beta Q_{\hat {j}})}}{\sum _{j=1}^{J}\exp {(\beta Q_{j})}}}}



 
 
 
 
(rpm.3)
this is known as the softmax function. As 



β


{\displaystyle \beta }

 increases, it approaches a binary value as desired in Equation (rpm.1). The problem may now be generalized to the 2D case, where instead of maximizing 




∑

j
=
1


J



μ

j



Q

j




{\displaystyle \sum _{j=1}^{J}\mu _{j}Q_{j}}

, the following is maximized:




E
(
μ
)
=

∑

j
=
1


N



∑

i
=
0


M



μ

i
j



Q

i
j




{\displaystyle E(\mu )=\sum _{j=1}^{N}\sum _{i=0}^{M}\mu _{ij}Q_{ij}}



 
 
 
 
(rpm.4)
where
This is straightforward, except that now the constraints on 



μ


{\displaystyle \mu }

 are doubly stochastic matrix constraints: 



∀
j
 

∑

i
=
1


M



μ

i
j


=
1


{\displaystyle \forall j~\sum _{i=1}^{M}\mu _{ij}=1}

 and 



∀
i
 

∑

j
=
1


N



μ

i
j


=
1


{\displaystyle \forall i~\sum _{j=1}^{N}\mu _{ij}=1}

. As such the denominator from Equation (rpm.3) cannot be expressed for the 2D case simply. To satisfy the constraints, it is possible to use a result due to Sinkhorn,[10] which states that a doubly stochastic matrix is obtained from any square matrix with all positive entries by the iterative process of alternating row and column normalizations. Thus the algorithm is written as such:[10]
where the deterministic annealing control parameter 



β


{\displaystyle \beta }

 is initially set to 




β

0




{\displaystyle \beta _{0}}

 and increases by factor 




β

r




{\displaystyle \beta _{r}}

 until it reaches the maximum value 




β

f




{\displaystyle \beta _{f}}

. The summations in the normalization steps sum to 



M
+
1


{\displaystyle M+1}

 and 



N
+
1


{\displaystyle N+1}

 instead of just 



M


{\displaystyle M}

 and 



N


{\displaystyle N}

 because the constraints on 



μ


{\displaystyle \mu }

 are inequalities. As such the 



M
+
1


{\displaystyle M+1}

th and 



N
+
1


{\displaystyle N+1}

th elements are slack variables.
The algorithm can also be extended for point sets in 3D or higher dimensions. The constraints on the correspondence matrix 




μ



{\displaystyle \mathbf {\mu } }

 are the same in the 3D case as in the 2D case. Hence the structure of the algorithm remains unchanged, with the main difference being how the rotation and translation matrices are solved.[10]
The thin plate spline robust point matching (TPS-RPM) algorithm by Chui and Rangarajan augments the RPM method to perform non-rigid registration by parametrizing the transformation as a thin plate spline.[1] However, because the thin plate spline parametrization only exists in three dimensions, the method cannot be extended to problems involving four or more dimensions.
The kernel correlation (KC) approach of point set registration was introduced by Tsin and Kanade.[6] Compared with ICP, the KC algorithm is more robust against noisy data. Unlike ICP, where, for every model point, only the closest scene point is considered, here every scene point affects every model point.[6] As such this is a multiply-linked registration algorithm. For some kernel function 



K


{\displaystyle K}

, the kernel correlation 



K
C


{\displaystyle KC}

 of two points 




x

i


,

x

j




{\displaystyle x_{i},x_{j}}

 is defined thus:[6]




K
C
(

x

i


,

x

j


)
=
∫
K
(
x
,

x

i


)
⋅
K
(
x
,

x

j


)
d
x


{\displaystyle KC(x_{i},x_{j})=\int K(x,x_{i})\cdot K(x,x_{j})dx}



 
 
 
 
(kc.1)
The kernel function 



K


{\displaystyle K}

 chosen for point set registration is typically symmetric and non-negative kernel, similar to the ones used in the Parzen window density estimation. The Gaussian kernel typically used for its simplicity, although other ones like the Epanechnikov kernel and the tricube kernel may be substituted.[6] The kernel correlation of an entire point set 





χ




{\displaystyle {\mathcal {\chi }}}

 is defined as the sum of the kernel correlations of every point in the set to every other point in the set:[6]




K
C
(


X


)
=

∑

i
≠
j


K
C
(

x

i


,

x

j


)
=
2

∑

i
<
j


K
C
(

x

i


,

x

j


)


{\displaystyle KC({\mathcal {X}})=\sum _{i\neq j}KC(x_{i},x_{j})=2\sum _{i<j}KC(x_{i},x_{j})}



 
 
 
 
(kc.2)
The KC of a point set is proportional, within a constant factor, to the logarithm of the information entropy. Observe that the KC is a measure of a "compactness" of the point set—trivially, if all points in the point set were at the same location, the KC would evaluate to zero. The cost function of the point set registration algorithm for some transformation parameter 



θ


{\displaystyle \theta }

 is defined thus:




cost
⁡
(


S


,


M


,
θ
)
=
−

∑

m
∈


M





∑

s
∈


S




K
C
(
s
,
T
(
m
,
θ
)
)


{\displaystyle \operatorname {cost} ({\mathcal {S}},{\mathcal {M}},\theta )=-\sum _{m\in {\mathcal {M}}}\sum _{s\in {\mathcal {S}}}KC(s,T(m,\theta ))}



 
 
 
 
(kc.3)
Some algebraic manipulation yields:




K
C
(


S


∪
T
(


M


,
θ
)
)
=
K
C
(


S


)
+
K
C
(
T
(


M


,
θ
)
)
−
2
cost
⁡
(


S


,


M


,
θ
)


{\displaystyle KC({\mathcal {S}}\cup T({\mathcal {M}},\theta ))=KC({\mathcal {S}})+KC(T({\mathcal {M}},\theta ))-2\operatorname {cost} ({\mathcal {S}},{\mathcal {M}},\theta )}



 
 
 
 
(kc.4)
The expression is simplified by observing that 



K
C
(


S


)


{\displaystyle KC({\mathcal {S}})}

 is independent of 



θ


{\displaystyle \theta }

. Furthermore, assuming rigid registration, 



K
C
(
T
(


M


,
θ
)
)


{\displaystyle KC(T({\mathcal {M}},\theta ))}

 is invariant when 



θ


{\displaystyle \theta }

 is changed because the Euclidean distance between every pair of points stays the same under rigid transformation. So the above equation may be rewritten as:




K
C
(


S


∪
T
(


M


,
θ
)
)
=
C
−
2
cost
⁡
(


S


,


M


,
θ
)


{\displaystyle KC({\mathcal {S}}\cup T({\mathcal {M}},\theta ))=C-2\operatorname {cost} ({\mathcal {S}},{\mathcal {M}},\theta )}



 
 
 
 
(kc.5)
The kernel density estimates are defined as:
The cost function can then be shown to be the correlation of the two kernel density estimates:




cost
⁡
(


S


,


M


,
θ
)
=
−

N

2



∫

x



P


M



⋅

P


S



 
d
x


{\displaystyle \operatorname {cost} ({\mathcal {S}},{\mathcal {M}},\theta )=-N^{2}\int _{x}P_{\mathcal {M}}\cdot P_{\mathcal {S}}~dx}



 
 
 
 
(kc.6)
Having established the cost function, the algorithm simply uses gradient descent to find the optimal transformation. It is computationally expensive to compute the cost function from scratch on every iteration, so a discrete version of the cost function Equation (kc.6) is used. The kernel density estimates 




P


M



,

P


S





{\displaystyle P_{\mathcal {M}},P_{\mathcal {S}}}

 can be evaluated at grid points and stored in a lookup table. Unlike the ICP and related methods, it is not necessary to find the nearest neighbour, which allows the KC algorithm to be comparatively simple in implementation.
Compared to ICP and EM-ICP for noisy 2D and 3D point sets, the KC algorithm is less sensitive to noise and results in correct registration more often.[6]
The kernel density estimates are sums of Gaussians and may therefore be represented as Gaussian mixture models (GMM).[11] Jian and Vemuri use the GMM version of the KC registration algorithm to perform non-rigid registration parametrized by thin plate splines.
Coherent point drift (CPD) was introduced by Myronenko and Song.[7][12] The algorithm takes a probabilistic approach to aligning point sets, similar to the GMM KC method. Unlike earlier approaches to non-rigid registration which assume a thin plate spline transformation model, CPD is agnostic with regard to the transformation model used. The point set 





M




{\displaystyle {\mathcal {M}}}

 represents the Gaussian mixture model (GMM) centroids. When the two point sets are optimally aligned, the correspondence is the maximum of the GMM posterior probability for a given data point. To preserve the topological structure of the point sets, the GMM centroids are forced to move coherently as a group. The expectation maximization algorithm is used to optimize the cost function.[7]
Let there be M points in 





M




{\displaystyle {\mathcal {M}}}

 and N points in 





S




{\displaystyle {\mathcal {S}}}

. The GMM probability density function for a point s is:




p
(
s
)
=

∑

i
=
1


M
+
1


P
(
i
)
p
(
s

|

i
)


{\displaystyle p(s)=\sum _{i=1}^{M+1}P(i)p(s|i)}



 
 
 
 
(cpd.1)
where, in D dimensions, 



p
(
s

|

i
)


{\displaystyle p(s|i)}

 is the Gaussian distribution centered on point 




m

i


∈


M




{\displaystyle m_{i}\in {\mathcal {M}}}

.
The membership probabilities 



P
(
i
)
=


1
M




{\displaystyle P(i)={\frac {1}{M}}}

 is equal for all GMM components. The weight of the uniform distribution is denoted as 



w
∈
[
0
,
1
]


{\displaystyle w\in [0,1]}

. The mixture model is then:




p
(
s
)
=
w


1
N


+
(
1
−
w
)

∑

i
=
1


M




1
M


p
(
s

|

i
)


{\displaystyle p(s)=w{\frac {1}{N}}+(1-w)\sum _{i=1}^{M}{\frac {1}{M}}p(s|i)}



 
 
 
 
(cpd.2)
The GMM centroids are re-parametrized by a set of parameters 



θ


{\displaystyle \theta }

 estimated by maximizing the likelihood. This is equivalent to minimizing the negative log-likelihood function:




E
(
θ
,

σ

2


)
=
−

∑

j
=
1


N


log
⁡

∑

i
=
1


M
+
1


P
(
i
)
p
(
s

|

i
)


{\displaystyle E(\theta ,\sigma ^{2})=-\sum _{j=1}^{N}\log \sum _{i=1}^{M+1}P(i)p(s|i)}



 
 
 
 
(cpd.3)
where it is assumed that the data is independent and identically distributed. The correspondence probability between two points 




m

i




{\displaystyle m_{i}}

 and 




s

j




{\displaystyle s_{j}}

 is defined as the posterior probability of the GMM centroid given the data point:
The expectation maximization (EM) algorithm is used to find 



θ


{\displaystyle \theta }

 and 




σ

2




{\displaystyle \sigma ^{2}}

. The EM algorithm consists of two steps. First, in the E-step or estimation step, it guesses the values of parameters ("old" parameter values) and then uses Bayes' theorem to compute the posterior probability distributions 




P

old


(
i
,

s

j


)


{\displaystyle P^{\text{old}}(i,s_{j})}

 of mixture components. Second, in the M-step or maximization step, the "new" parameter values are then found by minimizing the expectation of the complete negative log-likelihood function, i.e. the cost function:




cost
=
−

∑

j
=
1


N



∑

i
=
1


M
+
1



P

old


(
i

|


s

j


)
log
⁡
(

P

new


(
i
)

p

new


(

s

j



|

i
)
)


{\displaystyle \operatorname {cost} =-\sum _{j=1}^{N}\sum _{i=1}^{M+1}P^{\text{old}}(i|s_{j})\log(P^{\text{new}}(i)p^{\text{new}}(s_{j}|i))}



 
 
 
 
(cpd.4)
Ignoring constants independent of 



θ


{\displaystyle \theta }

 and 



σ


{\displaystyle \sigma }

, Equation (cpd.4) can be expressed thus:




cost
⁡
(
θ
,

σ

2


)
=


1

2

σ

2






∑

j
=
1


N



∑

i
=
1


M
+
1



P

old


(
i

|


s

j


)
∥

s

j


−
T
(

m

i


,
θ
)

∥

2


+




N


P



D

2


log
⁡


σ

2





{\displaystyle \operatorname {cost} (\theta ,\sigma ^{2})={\frac {1}{2\sigma ^{2}}}\sum _{j=1}^{N}\sum _{i=1}^{M+1}P^{\text{old}}(i|s_{j})\lVert s_{j}-T(m_{i},\theta )\rVert ^{2}+{\frac {N_{\mathbf {P} }D}{2}}\log {\sigma ^{2}}}



 
 
 
 
(cpd.5)
where
with 



N
=

N


P





{\displaystyle N=N_{\mathbf {P} }}

 only if 



w
=
0


{\displaystyle w=0}

. The posterior probabilities of GMM components computed using previous parameter values 




P

old




{\displaystyle P^{\text{old}}}

 is:





P

old


(
i

|


s

j


)
=



exp
⁡

(
−


1

2

σ


old

2





∥

s

j


−
T
(

m

i


,

θ

old


)

∥

2


)




∑

k
=
1


M


exp
⁡

(
−


1

2

σ


old

2





∥

s

j


−
T
(

m

k


,

θ

old


)

∥

2


)

+
(
2
π

σ

2



)


D
2





w

1
−
w





M
N







{\displaystyle P^{\text{old}}(i|s_{j})={\frac {\exp \left(-{\frac {1}{2\sigma ^{{\text{old}}2}}}\lVert s_{j}-T(m_{i},\theta ^{\text{old}})\rVert ^{2}\right)}{\sum _{k=1}^{M}\exp \left(-{\frac {1}{2\sigma ^{{\text{old}}2}}}\lVert s_{j}-T(m_{k},\theta ^{\text{old}})\rVert ^{2}\right)+(2\pi \sigma ^{2})^{\frac {D}{2}}{\frac {w}{1-w}}{\frac {M}{N}}}}}



 
 
 
 
(cpd.6)
Minimizing the cost function in Equation (cpd.5) necessarily decreases the negative log-likelihood function E in Equation (cpd.3) unless it is already at a local minimum.[7] Thus, the algorithm can be expressed using the following pseudocode, where the point sets 





M




{\displaystyle {\mathcal {M}}}

 and 





S




{\displaystyle {\mathcal {S}}}

 are represented as 



M
×
D


{\displaystyle M\times D}

 and 



N
×
D


{\displaystyle N\times D}

 matrices 




M



{\displaystyle \mathbf {M} }

 and 




S



{\displaystyle \mathbf {S} }

 respectively:[7]
where the vector 




1



{\displaystyle \mathbf {1} }

 is a column vector of ones. The solve function differs by the type of registration performed. For example, in rigid registration, the output is a scale a, a rotation matrix 




R



{\displaystyle \mathbf {R} }

, and a translation vector 




t



{\displaystyle \mathbf {t} }

. The parameter 



θ


{\displaystyle \theta }

 can be written as a tuple of these:
which is initialized to one, the identity matrix, and a column vector of zeroes:
The aligned point set is:
The solve_rigid function for rigid registration can then be written as follows, with derivation of the algebra explained in Myronenko's 2010 paper.[7]
For affine registration, where the goal is to find an affine transformation instead of a rigid one, the output is an affine transformation matrix 




B



{\displaystyle \mathbf {B} }

 and a translation 




t



{\displaystyle \mathbf {t} }

 such that the aligned point set is:
The solve_affine function for rigid registration can then be written as follows, with derivation of the algebra explained in Myronenko's 2010 paper.[7]
It is also possible to use CPD with non-rigid registration using a parametrization derived using calculus of variation.[7]
Sums of Gaussian distributions can be computed in linear time using the fast Gauss transform (FGT).[7] Consequently, the time complexity of CPD is 



O
(
M
+
N
)


{\displaystyle O(M+N)}

, which is asymptotically much faster than 



O
(
M
N
)


{\displaystyle O(MN)}

 methods.[7]