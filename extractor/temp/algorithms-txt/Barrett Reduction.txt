ABOUT
In modular arithmetic, Barrett reduction is a reduction algorithm introduced in 1986 by P.D. Barrett.[1] A naive way of computing
FULL TEXT
In modular arithmetic, Barrett reduction is a reduction algorithm introduced in 1986 by P.D. Barrett.[1] A naive way of computing
would be to use a fast division algorithm. Barrett reduction is an algorithm designed to optimize this operation assuming 



n


{\displaystyle n}

 is constant, and 



a
<

n

2




{\displaystyle a<n^{2}}

, replacing divisions by multiplications.


Let 



m
=
1

/

n


{\displaystyle m=1/n}

 be the inverse of 



n


{\displaystyle n}

 as a floating point number. Then
where 



⌊
x
⌋


{\displaystyle \lfloor x\rfloor }

 denotes the floor function. The result is exact, as long as m is computed with sufficient accuracy.
Barrett initially considered an integer version of the above algorithm when the values fit into machine words.
When calculating 



a


mod




n


{\displaystyle a\,{\bmod {\,}}n}

 using the method above, but with integers, the obvious analogue would be to use division by 



n


{\displaystyle n}

:
However, division can be expensive and, in cryptographic settings, may not be a constant-time instruction on some CPUs. Thus Barrett reduction approximates 



1

/

n


{\displaystyle 1/n}

 with a value 



x

/


2

k




{\displaystyle x/2^{k}}

 because division by 




2

k




{\displaystyle 2^{k}}

 is just a right-shift and so is cheap.
In order to calculate the best value for 



m


{\displaystyle m}

 given 




2

k




{\displaystyle 2^{k}}

 consider:
In order for 



m


{\displaystyle m}

 to be an integer, we need to round 





2

k




/


n



{\displaystyle {2^{k}}/{n}}

 somehow. Rounding to the nearest integer will give the best approximation but can result in 



m

/


2

k




{\displaystyle m/2^{k}}

 being larger than 



1

/

n


{\displaystyle 1/n}

, which can cause underflows. Thus 



m
=
⌊


2

k




/


n

⌋


{\displaystyle m=\lfloor {2^{k}}/{n}\rfloor }

 is generally used.
Thus we can approximate the function above with:
However, since 



m

/


2

k


≤
1

/

n


{\displaystyle m/2^{k}\leq 1/n}

, the value of q in that function can end up being one too small, and thus a is only guaranteed to be within 



[
0
,
2
n
)


{\displaystyle [0,2n)}

 rather than 



[
0
,
n
)


{\displaystyle [0,n)}

 as is generally required. A conditional subtraction will correct this:
Since 



m

/


2

k




{\displaystyle m/2^{k}}

 is only an approximation, the valid range of 



a


{\displaystyle a}

 needs to be considered. The error of the approximation of 



1

/

n


{\displaystyle 1/n}

 is:
Thus the error in the value of q is 



a
e


{\displaystyle ae}

. As long as 



a
e
<
1


{\displaystyle ae<1}

 then the reduction is valid thus 



a
<
1

/

e


{\displaystyle a<1/e}

. The reduction function might not immediately give the wrong answer when 



a
≥
1

/

e


{\displaystyle a\geq 1/e}

 but the bounds on 



a


{\displaystyle a}

 must be respected to ensure the correct answer in the general case.
By choosing larger values of 



k


{\displaystyle k}

, the range of values of 



a


{\displaystyle a}

 for which the reduction is valid can be increased, but larger values of 



k


{\displaystyle k}

 may cause overflow problems elsewhere.
Consider the case of 



n
=
101


{\displaystyle n=101}

 when operating with 16-bit integers.
The smallest value of 



k


{\displaystyle k}

 that makes sense is seven because if 




2

k


<
n


{\displaystyle 2^{k}<n}

 then the reduction will only be valid for values that are already minimal! For a value of seven, 



m
=
⌊

2

k



/

n
⌋
=
⌊
128

/

101
⌋
=
1


{\displaystyle m=\lfloor 2^{k}/n\rfloor =\lfloor 128/101\rfloor =1}

. For a value of eight 



m
=
⌊
256

/

101
⌋
=
2


{\displaystyle m=\lfloor 256/101\rfloor =2}

. Thus 



k
=
8


{\displaystyle k=8}

 provides no advantage because the approximation of 



1

/

101


{\displaystyle 1/101}

 in that case (



2

/

256


{\displaystyle 2/256}

) is exactly the same as 



1

/

128


{\displaystyle 1/128}

. For 



k


{\displaystyle k}

 equal to nine, 



m
=
512

/

101
=
5


{\displaystyle m=512/101=5}

, which is a better approximation.
Now we consider the valid input ranges for 



k
=
7


{\displaystyle k=7}

 and 



k
=
9


{\displaystyle k=9}

. In the first case, 



e
=
1

/

n
−
x

/


2

k


=
1

/

101
−
1

/

128
=
27

/

12928


{\displaystyle e=1/n-x/2^{k}=1/101-1/128=27/12928}

 so 



a
<
1

/

e


{\displaystyle a<1/e}

 implies 



a
<
478.81


{\displaystyle a<478.81}

. Since 



a


{\displaystyle a}

 is an integer, effectively the maximum value is 478. (In practice the function happens to work for values up to 504.)
If we take 



k
=
9


{\displaystyle k=9}

 then 



e
=
1

/

101
−
5

/

512
=
7

/

51712


{\displaystyle e=1/101-5/512=7/51712}

 and so the maximum value of 



a


{\displaystyle a}

 is 7387. (In practice the function happens to work until 7473.)
The next value of 



k


{\displaystyle k}

 that results in a better approximation is 13, giving 



81

/

8192


{\displaystyle 81/8192}

. However, note that the intermediate value 



a
x


{\displaystyle ax}

 in the calculation will then overflow an unsigned 16-bit value when 



810
≤
a


{\displaystyle 810\leq a}

, thus 



k
=
7


{\displaystyle k=7}

 works better in this situation.
Let 




k

0




{\displaystyle k_{0}}

 be the smallest integer such that 




2


k

0




>
n


{\displaystyle 2^{k_{0}}>n}

. Take 




k

0


+
1


{\displaystyle k_{0}+1}

 as a reasonable value for 



k


{\displaystyle k}

 in the above equations. As in the code snippets above, let
Because of the floor function, 



q


{\displaystyle q}

 is an integer and 



r
≡
a


(
mod

n
)



{\displaystyle r\equiv a{\pmod {n}}}

. Also, if 



a
<

2

k




{\displaystyle a<2^{k}}

 then 



r
<
2
n


{\displaystyle r<2n}

. In that case, writing the snippets above as an expression:
The proof that 



r
<
2
n


{\displaystyle r<2n}

 follows:
If 



a
<

2

k




{\displaystyle a<2^{k}}

, then
Since 



n
⋅



m
a

mod



2

k




2

k




<
n


{\displaystyle n\cdot {\frac {ma\mod 2^{k}}{2^{k}}}<n}

 regardless of 



a


{\displaystyle a}

, it follows that
Barrett's primary motivation for considering reduction was the implementation of RSA, where the values in question will almost certainly exceed the size of a machine word. In this situation, Barrett provided an algorithm that approximates the single-word version above but for multi-word values. For details see section 14.3.3 of the Handbook of Applied Cryptography.[2]
Montgomery reduction is another similar algorithm.