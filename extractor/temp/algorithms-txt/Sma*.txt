ABOUT
SMA* or Simplified Memory Bounded A* is a shortest path algorithm based on the A* algorithm. The main advantage of SMA* is that it uses a bounded memory, while the A* algorithm might need exponential memory. All other characteristics of SMA* are inherited from A*.
FULL TEXT
SMA* or Simplified Memory Bounded A* is a shortest path algorithm based on the A* algorithm. The main advantage of SMA* is that it uses a bounded memory, while the A* algorithm might need exponential memory. All other characteristics of SMA* are inherited from A*.


Like A*, it expands the most promising branches according to the heuristic. What sets SMA* apart is that it prunes nodes whose expansion has revealed less promising than expected. The approach allows the algorithm to explore branches and backtrack to explore other branches.
Expansion and pruning of nodes is driven by keeping two values of 



f


{\displaystyle f}

 for every node. Node 



x


{\displaystyle x}

 stores a value 



f
(
x
)


{\displaystyle f(x)}

 which estimates the cost of reaching the goal by taking a path through that node. The lower the value, the higher the priority. As in A* this value is initialized to 



h
(
x
)
+
g
(
x
)


{\displaystyle h(x)+g(x)}

, but will then be updated to reflect changes to this estimate when its children are expanded. A fully expanded node will have an 



f


{\displaystyle f}

 value at least as high as that of its successors. In addition, the node stores the 



f


{\displaystyle f}

 value of the best forgotten successor. This value is restored if the forgotten successor is revealed to be the most promising successor.
Starting with the first node, it maintains OPEN, ordered lexicographically by 



f


{\displaystyle f}

 and depth. When choosing a node to expand, it chooses the best according to that order. When selecting a node to prune, it chooses the worst.
SMA* has the following properties
The implementation of SMA* is very similar to the one of A*, the only difference is that when there isn't any space left, nodes with the highest f-cost are pruned from the queue. Because those nodes are deleted, the SMA* also has to remember the f-cost of the best forgotten child with the parent node. When it seems that all explored paths are worse than such a forgotten path, the path is re-generated.[1]
Pseudo code: