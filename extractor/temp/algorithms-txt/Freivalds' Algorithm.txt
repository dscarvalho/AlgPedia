ABOUT
Freivalds' algorithm (named after Rūsiņš Mārtiņš Freivalds) is a probabilistic randomized algorithm used to verify matrix multiplication. Given three n × n matrices 



A


{\displaystyle A}

, 



B


{\displaystyle B}

, and 



C


{\displaystyle C}

, a general problem is to verify whether 



A
×
B
=
C


{\displaystyle A\times B=C}

. A naïve algorithm would compute the product 



A
×
B


{\displaystyle A\times B}

 explicitly and compare term by term whether this product equals 



C


{\displaystyle C}

. However, the best known matrix multiplication algorithm runs in 



O
(

n

2.3729


)


{\displaystyle O(n^{2.3729})}

 time.[1] Freivalds' algorithm utilizes randomization in order to reduce this time bound to 



O
(

n

2


)


{\displaystyle O(n^{2})}

 [2] with high probability. In 



O
(
k

n

2


)


{\displaystyle O(kn^{2})}

 time the algorithm can verify a matrix product with probability of failure less than 




2

−
k




{\displaystyle 2^{-k}}

.
FULL TEXT
Freivalds' algorithm (named after Rūsiņš Mārtiņš Freivalds) is a probabilistic randomized algorithm used to verify matrix multiplication. Given three n × n matrices 



A


{\displaystyle A}

, 



B


{\displaystyle B}

, and 



C


{\displaystyle C}

, a general problem is to verify whether 



A
×
B
=
C


{\displaystyle A\times B=C}

. A naïve algorithm would compute the product 



A
×
B


{\displaystyle A\times B}

 explicitly and compare term by term whether this product equals 



C


{\displaystyle C}

. However, the best known matrix multiplication algorithm runs in 



O
(

n

2.3729


)


{\displaystyle O(n^{2.3729})}

 time.[1] Freivalds' algorithm utilizes randomization in order to reduce this time bound to 



O
(

n

2


)


{\displaystyle O(n^{2})}

 [2] with high probability. In 



O
(
k

n

2


)


{\displaystyle O(kn^{2})}

 time the algorithm can verify a matrix product with probability of failure less than 




2

−
k




{\displaystyle 2^{-k}}

.


Three n × n matrices 



A


{\displaystyle A}

, 



B


{\displaystyle B}

, and 



C


{\displaystyle C}

.
Yes, if 



A
×
B
=
C


{\displaystyle A\times B=C}

; No, otherwise.
If 



A
×
B
=
C


{\displaystyle A\times B=C}

, then the algorithm always returns "Yes". If 



A
×
B
≠
C


{\displaystyle A\times B\neq C}

, then the probability that the algorithm returns "Yes" is less than or equal to one half. This is called one-sided error.
By iterating the algorithm k times and returning "Yes" only if all iterations yield "Yes", a runtime of 



O
(
k

n

2


)


{\displaystyle O(kn^{2})}

 and error probability of 



≤
1

/


2

k




{\displaystyle \leq 1/2^{k}}

 is achieved.
Suppose one wished to determine whether:
A random two-element vector with entries equal to 0 or 1 is selected — say 






r
→



=


[



1




1



]




{\displaystyle {\vec {r}}={\begin{bmatrix}1\\1\end{bmatrix}}}

 — and used to compute:
This yields the zero vector, suggesting the possibility that AB = C. However, if in a second trial the vector 






r
→



=


[



1




0



]




{\displaystyle {\vec {r}}={\begin{bmatrix}1\\0\end{bmatrix}}}

 is selected, the result becomes:
The result is nonzero, proving that in fact AB ≠ C.
There are four two-element 0/1 vectors, and half of them give the zero vector in this case (






r
→



=


[



0




0



]




{\displaystyle {\vec {r}}={\begin{bmatrix}0\\0\end{bmatrix}}}

 and 






r
→



=


[



1




1



]




{\displaystyle {\vec {r}}={\begin{bmatrix}1\\1\end{bmatrix}}}

), so the chance of randomly selecting these in two trials (and falsely concluding that AB=C) is 1/22 or 1/4. In the general case, the proportion of r yielding the zero vector may be less than 1/2, and a larger number of trials (such as 20) would be used, rendering the probability of error very small.
Let p equal the probability of error. We claim that if A × B = C, then p = 0, and if A × B ≠ C, then p ≤ 1/2.
This is regardless of the value of 






r
→





{\displaystyle {\vec {r}}}

, since it uses only that 



A
×
B
−
C
=
0


{\displaystyle A\times B-C=0}

. Hence the probability for error in this case is:
Let
Where
Since 



A
×
B
≠
C


{\displaystyle A\times B\neq C}

, we have that some element of 



D


{\displaystyle D}

 is nonzero. Suppose that the element 




d

i
j


≠
0


{\displaystyle d_{ij}\neq 0}

. By the definition of matrix multiplication, we have:
For some constant 



y


{\displaystyle y}

. Using Bayes' Theorem, we can partition over 



y


{\displaystyle y}

:




Pr
[

p

i


=
0
]
=
Pr
[

p

i


=
0

|

y
=
0
]
⋅
Pr
[
y
=
0
]

+

Pr
[

p

i


=
0

|

y
≠
0
]
⋅
Pr
[
y
≠
0
]


{\displaystyle \Pr[p_{i}=0]=\Pr[p_{i}=0|y=0]\cdot \Pr[y=0]\,+\,\Pr[p_{i}=0|y\neq 0]\cdot \Pr[y\neq 0]}



 
 
 
 
(1)
We use that:
Plugging these in the equation (1), we get:
Therefore,
This completes the proof.
Simple algorithmic analysis shows that the running time of this algorithm is O(n2), beating the classical deterministic algorithm's bound of O(n3). The error analysis also shows that if we run our algorithm k times, we can achieve an error bound of less than 





1

2

k






{\displaystyle {\frac {1}{2^{k}}}}

, an exponentially small quantity. The algorithm is also fast in practice due to wide availability of fast implementations for matrix-vector products. Therefore, utilization of randomized algorithms can speed up a very slow deterministic algorithm. In fact, the best known deterministic matrix multiplication verification algorithm known at the current time is a variant of the Coppersmith–Winograd algorithm with an asymptotic running time of O(n2.3729).[1]
Freivalds' algorithm frequently arises in introductions to probabilistic algorithms due to its simplicity and how it illustrates the superiority of probabilistic algorithms in practice for some problems.