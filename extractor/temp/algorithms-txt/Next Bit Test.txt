ABOUT
In cryptography and the theory of computation, the next-bit test[1] is a test against pseudo-random number generators. We say that a sequence of bits passes the next bit test for at any position 



i


{\displaystyle i}

 in the sequence, if any attacker who knows the 



i


{\displaystyle i}

 first bits (but not the seed) cannot predict the 



(
i
+
1
)


{\displaystyle (i+1)}

st with reasonable computational power.
FULL TEXT
In cryptography and the theory of computation, the next-bit test[1] is a test against pseudo-random number generators. We say that a sequence of bits passes the next bit test for at any position 



i


{\displaystyle i}

 in the sequence, if any attacker who knows the 



i


{\displaystyle i}

 first bits (but not the seed) cannot predict the 



(
i
+
1
)


{\displaystyle (i+1)}

st with reasonable computational power.


Let 



P


{\displaystyle P}

 be a polynomial, and 



S
=
{

S

k


}


{\displaystyle S=\{S_{k}\}}

 be a collection of sets such that 




S

k




{\displaystyle S_{k}}

 contains 



P
(
k
)


{\displaystyle P(k)}

-bit long sequences. Moreover, let 




μ

k




{\displaystyle \mu _{k}}

 be the probability distribution of the strings in 




S

k




{\displaystyle S_{k}}

.
We now define the next-bit test in two different ways.
A predicting collection[2] 



C
=
{

C

k


i


}


{\displaystyle C=\{C_{k}^{i}\}}

 is a collection of boolean circuits, such that each circuit 




C

k


i




{\displaystyle C_{k}^{i}}

 has less than 




P

C


(
k
)


{\displaystyle P_{C}(k)}

 gates and exactly 



i


{\displaystyle i}

 inputs. Let 




p

k
,
i


C




{\displaystyle p_{k,i}^{C}}

 be the probability that, on input the 



i


{\displaystyle i}

 first bits of 



s


{\displaystyle s}

, a string randomly selected in 




S

k




{\displaystyle S_{k}}

 with probability 




μ

k


(
s
)


{\displaystyle \mu _{k}(s)}

, the circuit correctly predicts 




s

i
+
1




{\displaystyle s_{i+1}}

, i.e. :





p

k
,
i


C


=


P



[

C

k


(

s

1


…

s

i


)
=

s

i
+
1


|

s
∈

S

k



 with probability 


μ

k


(
s
)
]


{\displaystyle p_{k,i}^{C}={\mathcal {P}}\left[C_{k}(s_{1}\ldots s_{i})=s_{i+1}\right|s\in S_{k}{\text{ with probability }}\mu _{k}(s)]}


Now, we say that 



{

S

k



}

k




{\displaystyle \{S_{k}\}_{k}}

 passes the next-bit test if for any predicting collection 



C


{\displaystyle C}

, any polynomial 



Q


{\displaystyle Q}

 :





p

k
,
i


C


<


1
2


+


1

Q
(
k
)





{\displaystyle p_{k,i}^{C}<{\frac {1}{2}}+{\frac {1}{Q(k)}}}


We can also define the next-bit test in terms of probabilistic Turing machines, although this definition is somewhat stronger (see Adleman's theorem). Let 





M




{\displaystyle {\mathcal {M}}}

 be a probabilistic Turing machine, working in polynomial time. Let 




p

k
,
i



M





{\displaystyle p_{k,i}^{\mathcal {M}}}

 be the probability that 





M




{\displaystyle {\mathcal {M}}}

 predicts the 



(
i
+
1
)


{\displaystyle (i+1)}

st bit correctly, i.e.





p

k
,
i



M



=


P


[
M
(

s

1


…

s

i


)
=

s

i
+
1



|

s
∈

S

k



 with probability 


μ

k


(
s
)
]


{\displaystyle p_{k,i}^{\mathcal {M}}={\mathcal {P}}[M(s_{1}\ldots s_{i})=s_{i+1}|s\in S_{k}{\text{ with probability }}\mu _{k}(s)]}


We say that collection 



S
=
{

S

k


}


{\displaystyle S=\{S_{k}\}}

 passes the next-bit test if for all polynomial 



Q


{\displaystyle Q}

, for all but finitely many 



k


{\displaystyle k}

, for all 



0
<
i
<
k


{\displaystyle 0<i<k}

:





p

k
,
i



M



<


1
2


+


1

Q
(
k
)





{\displaystyle p_{k,i}^{\mathcal {M}}<{\frac {1}{2}}+{\frac {1}{Q(k)}}}


The next-bit test is a particular case of Yao's test for random sequences, and passing it is therefore a necessary condition for passing Yao's test. However, it has also been shown a sufficient condition by Yao.[1]
We prove it now in the case of probabilistic Turing machine, since Adleman has already done the work of replacing randomization with non-uniformity in his theorem. The case of boolean circuits cannot be derived from this case (since it involves deciding potentially undecidable problems), but the proof of Adleman's theorem can be easily adapted to the case of non-uniform boolean circuits families.
Let 





M




{\displaystyle {\mathcal {M}}}

 a distringuer for the probabilistic version of Yao's test, i.e. a probabilistic Turing machine, running in polynomial time, such that there is a polynomial 



Q


{\displaystyle Q}

 such that for infinitely many 



k


{\displaystyle k}


Let 




R

k
,
i


=
{

s

1


…

s

i



u

i
+
1


…

u

P
(
k
)



|

s
∈

S

k


,
u
∈
{
0
,
1

}

P
(
k
)


}


{\displaystyle R_{k,i}=\{s_{1}\ldots s_{i}u_{i+1}\ldots u_{P(k)}|s\in S_{k},u\in \{0,1\}^{P(k)}\}}

. We have : 




R

k
,
0


=
{
0
,
1

}

P
(
k
)




{\displaystyle R_{k,0}=\{0,1\}^{P(k)}}

 and 




R

k
,
P
(
k
)


=

S

k




{\displaystyle R_{k,P(k)}=S_{k}}

. Then, we notice that 




∑

i
=
0


P
(
k
)



|


p

k
,

R

k
,
i
+
1





M



−

p

k
,

R

k
,
i





M




|

≥

|


p

k
,

R

k
,
P
(
k
)





M



−

p

k
,

R

k
,
0





M




|

=

|


p

k
,
S



M



−

p

k
,
U



M




|

≥


1

Q
(
k
)





{\displaystyle \sum _{i=0}^{P(k)}|p_{k,R_{k,i+1}}^{\mathcal {M}}-p_{k,R_{k,i}}^{\mathcal {M}}|\geq |p_{k,R_{k,P(k)}}^{\mathcal {M}}-p_{k,R_{k,0}}^{\mathcal {M}}|=|p_{k,S}^{\mathcal {M}}-p_{k,U}^{\mathcal {M}}|\geq {\frac {1}{Q(k)}}}

. Therefore, at least one of the 




|


p

k
,

R

k
,
i
+
1





M



−

p

k
,

R

k
,
i





M




|



{\displaystyle |p_{k,R_{k,i+1}}^{\mathcal {M}}-p_{k,R_{k,i}}^{\mathcal {M}}|}

 should be no smaller than 





1

Q
(
k
)
P
(
k
)





{\displaystyle {\frac {1}{Q(k)P(k)}}}

.
Next, we consider probability distributions 




μ

k
,
i




{\displaystyle \mu _{k,i}}

 and 






μ

k
,
i


¯




{\displaystyle {\overline {\mu _{k,i}}}}

 on 




R

k
,
i




{\displaystyle R_{k,i}}

. Distribution 




μ

k
,
i




{\displaystyle \mu _{k,i}}

 is the probability distribution of choosing the 



i


{\displaystyle i}

 first bits in 




S

k




{\displaystyle S_{k}}

 with probability given by 




μ

k




{\displaystyle \mu _{k}}

, and the 



P
(
k
)
−
i


{\displaystyle P(k)-i}

 remaining bits uniformly at random. We have thus :





μ

k
,
i


(

w

1


…

w

P
(
k
)


)
=

(

∑

s
∈

S

k


,

s

1


…

s

i


=

w

1


…

w

i





μ

k


(
s
)
)



(


1
2


)


P
(
k
)
−
i




{\displaystyle \mu _{k,i}(w_{1}\ldots w_{P(k)})=\left(\sum _{s\in S_{k},s_{1}\ldots s_{i}=w_{1}\ldots w_{i}}\mu _{k}(s)\right)\left({\frac {1}{2}}\right)^{P(k)-i}}









μ

k
,
i


¯


(

w

1


…

w

P
(
k
)


)
=

(

∑

s
∈

S

k


,

s

1


…

s

i
−
1


(
1
−

s

i


)
=

w

1


…

w

i





μ

k


(
s
)
)



(


1
2


)


P
(
k
)
−
i




{\displaystyle {\overline {\mu _{k,i}}}(w_{1}\ldots w_{P(k)})=\left(\sum _{s\in S_{k},s_{1}\ldots s_{i-1}(1-s_{i})=w_{1}\ldots w_{i}}\mu _{k}(s)\right)\left({\frac {1}{2}}\right)^{P(k)-i}}


We thus have 




μ

k
,
i


=


1
2


(

μ

k
,
i
+
1


+



μ

k
,
i
+
1


¯


)


{\displaystyle \mu _{k,i}={\frac {1}{2}}(\mu _{k,i+1}+{\overline {\mu _{k,i+1}}})}

 (a simple calculus trick shows this), thus distributions 




μ

k
,
i
+
1




{\displaystyle \mu _{k,i+1}}

 and 






μ

k
,
i
+
1


¯




{\displaystyle {\overline {\mu _{k,i+1}}}}

 can be distinguished by 





M




{\displaystyle {\mathcal {M}}}

. Without loss of generality, we can assume that 




p


μ

k
,
i
+
1





M



−

p



μ

k
,
i
+
1


¯




M



≥


1
2


+


1

R
(
k
)





{\displaystyle p_{\mu _{k,i+1}}^{\mathcal {M}}-p_{\overline {\mu _{k,i+1}}}^{\mathcal {M}}\geq {\frac {1}{2}}+{\frac {1}{R(k)}}}

, with 



R


{\displaystyle R}

 a polynomial.
This gives us a possible construction of a Turing machine solving the next-bit test : upon receiving the 



i


{\displaystyle i}

 first bits of a sequence, 





N




{\displaystyle {\mathcal {N}}}

 pads this input with a guess of bit 



l


{\displaystyle l}

 and then 



P
(
k
)
−
i
−
1


{\displaystyle P(k)-i-1}

 random bits, chosen with uniform probability. Then it runs 





M




{\displaystyle {\mathcal {M}}}

, and outputs 



l


{\displaystyle l}

 if the result is 



1


{\displaystyle 1}

, and 



1
−
l


{\displaystyle 1-l}

 else.