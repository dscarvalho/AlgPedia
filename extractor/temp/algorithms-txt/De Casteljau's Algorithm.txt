ABOUT
In the mathematical field of numerical analysis, De Casteljau's algorithm is a recursive method to evaluate polynomials in Bernstein form or Bézier curves, named after its inventor Paul de Casteljau. De Casteljau's algorithm can also be used to split a single Bézier curve into two Bézier curves at an arbitrary parameter value.
FULL TEXT
In the mathematical field of numerical analysis, De Casteljau's algorithm is a recursive method to evaluate polynomials in Bernstein form or Bézier curves, named after its inventor Paul de Casteljau. De Casteljau's algorithm can also be used to split a single Bézier curve into two Bézier curves at an arbitrary parameter value.
Although the algorithm is slower for most architectures when compared with the direct approach, it is more numerically stable.


A Bézier curve B (of degree n, with control points 




β

0


,
…
,

β

n




{\displaystyle \beta _{0},\ldots ,\beta _{n}}

) can be written in Bernstein form as follows
where b is a Bernstein basis polynomial
The curve at point t0 can be evaluated with the recurrence relation
Then, the evaluation of 



B


{\displaystyle B}

 at point 




t

0




{\displaystyle t_{0}}

 can be evaluated in 



n


{\displaystyle n}

 steps of the algorithm. The result 



B
(

t

0


)


{\displaystyle B(t_{0})}

 is given by :
Moreover, the Bézier curve 



B


{\displaystyle B}

 can be split at point 




t

0




{\displaystyle t_{0}}

 into two curves with respective control points :
Here is an example implementation of De Casteljau's algorithm in Haskell:
When doing the calculation by hand it is useful to write down the coefficients in a triangle scheme as
When choosing a point t0 to evaluate a Bernstein polynomial we can use the two diagonals of the triangle scheme to construct a division of the polynomial
into
and
We want to evaluate the Bernstein polynomial of degree 2 with the Bernstein coefficients
at the point t0.
We start the recursion with
and with the second iteration the recursion stops with
which is the expected Bernstein polynomial of degree 2.
When evaluating a Bézier curve of degree n in 3-dimensional space with n+1 control points Pi
with
we split the Bézier curve into three separate equations
which we evaluate individually using De Casteljau's algorithm.
The geometric interpretation of De Casteljau's algorithm is straightforward.
The following picture shows this process for a cubic Bézier curve:

Note that the intermediate points that were constructed are in fact the control points for two new Bézier curves, both exactly coincident with the old one. This algorithm not only evaluates the curve at 




t



{\displaystyle \scriptstyle t}

, but splits the curve into two pieces at 




t



{\displaystyle \scriptstyle t}

, and provides the equations of the two sub-curves in Bézier form.
The interpretation given above is valid for a nonrational Bézier curve. To evaluate a rational Bézier curve in 






R


n





{\displaystyle \scriptstyle \mathbf {R} ^{n}}

, we may project the point into 






R


n
+
1





{\displaystyle \scriptstyle \mathbf {R} ^{n+1}}

; for example, a curve in three dimensions may have its control points 




{
(

x

i


,

y

i


,

z

i


)
}



{\displaystyle \scriptstyle \{(x_{i},y_{i},z_{i})\}}

 and weights 




{

w

i


}



{\displaystyle \scriptstyle \{w_{i}\}}

 projected to the weighted control points 




{
(

w

i



x

i


,

w

i



y

i


,

w

i



z

i


,

w

i


)
}



{\displaystyle \scriptstyle \{(w_{i}x_{i},w_{i}y_{i},w_{i}z_{i},w_{i})\}}

. The algorithm then proceeds as usual, interpolating in 






R


4





{\displaystyle \scriptstyle \mathbf {R} ^{4}}

. The resulting four-dimensional points may be projected back into three-space with a perspective divide.
In general, operations on a rational curve (or surface) are equivalent to operations on a nonrational curve in a projective space. This representation as the "weighted control points" and weights is often convenient when evaluating rational curves.