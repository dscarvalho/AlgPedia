ABOUT
In computer science, a family of hash functions is said to be 



k


{\displaystyle k}

-independent or 



k


{\displaystyle k}

-universal[1] if selecting a function at random from the family guarantees that the hash codes of any designated 



k


{\displaystyle k}

 keys are independent random variables (see precise mathematical definitions below). Such families allow good average case performance in randomized algorithms or data structures, even if the input data is chosen by an adversary. The trade-offs between the degree of independence and the efficiency of evaluating the hash function are well studied, and many 



k


{\displaystyle k}

-independent families have been proposed.
FULL TEXT
In computer science, a family of hash functions is said to be 



k


{\displaystyle k}

-independent or 



k


{\displaystyle k}

-universal[1] if selecting a function at random from the family guarantees that the hash codes of any designated 



k


{\displaystyle k}

 keys are independent random variables (see precise mathematical definitions below). Such families allow good average case performance in randomized algorithms or data structures, even if the input data is chosen by an adversary. The trade-offs between the degree of independence and the efficiency of evaluating the hash function are well studied, and many 



k


{\displaystyle k}

-independent families have been proposed.


The goal of hashing is usually to map keys from some large domain (universe) 



U


{\displaystyle U}

 into a smaller range, such as 



m


{\displaystyle m}

 bins (labelled 



[
m
]
=
{
0
,
…
,
m
−
1
}


{\displaystyle [m]=\{0,\dots ,m-1\}}

). In the analysis of randomized algorithms and data structures, it is often desirable for the hash codes of various keys to "behave randomly". For instance, if the hash code of each key were an independent random choice in 



[
m
]


{\displaystyle [m]}

, the number of keys per bin could be analyzed using the Chernoff bound. A deterministic hash function cannot offer any such guarantee in an adversarial setting, as the adversary may choose the keys to be the precisely the preimage of a bin. Furthermore, a deterministic hash function does not allow for rehashing: sometimes the input data turns out to be bad for the hash function (e.g. there are too many collisions), so one would like to change the hash function.
The solution to these problems is to pick a function randomly from a large family of hash functions. The randomness in choosing the hash function can be used to guarantee some desired random behavior of the hash codes of any keys of interest. The first definition along these lines was universal hashing, which guarantees a low collision probability for any two designated keys. The concept of 



k


{\displaystyle k}

-independent hashing, introduced by Wegman and Carter in 1981,[2] strengthens the guarantees of random behavior to families of 



k


{\displaystyle k}

 designated keys, and adds a guarantee on the uniform distribution of hash codes.
The strictest definition, introduced by Wegman and Carter[2] under the name "strongly universal






k




{\displaystyle _{k}}

 hash family", is the following. A family of hash functions 



H
=
{
h
:
U
→
[
m
]
}


{\displaystyle H=\{h:U\to [m]\}}

 is 



k


{\displaystyle k}

-independent if for any 



k


{\displaystyle k}

 distinct keys 



(

x

1


,
…
,

x

k


)
∈

U

k




{\displaystyle (x_{1},\dots ,x_{k})\in U^{k}}

 and any 



k


{\displaystyle k}

 hash codes (not necessarily distinct) 



(

y

1


,
…
,

y

k


)
∈
[
m

]

k




{\displaystyle (y_{1},\dots ,y_{k})\in [m]^{k}}

, we have:
This definition is equivalent to the following two conditions:
Often it is inconvenient to achieve the perfect joint probability of 




m

−
k




{\displaystyle m^{-k}}

 due to rounding issues. Following,[3] one may define a 



(
μ
,
k
)


{\displaystyle (\mu ,k)}

-independent family to satisfy:
Observe that, even if 



μ


{\displaystyle \mu }

 is close to 1, 



h
(

x

i


)


{\displaystyle h(x_{i})}

 are no longer independent random variables, which is often a problem in the analysis of randomized algorithms. Therefore, a more common alternative to dealing with rounding issues is to prove that the hash family is close in statistical distance to a 



k


{\displaystyle k}

-independent family, which allows black-box use of the independence properties.
The original technique for constructing k-independent hash functions, given by Carter and Wegman, was to select a large prime number p, choose k random numbers modulo p, and use these numbers as the coefficients of a polynomial of degree k whose values modulo p are used as the value of the hash function. All polynomials of the given degree modulo p are equally likely, and any polynomial is uniquely determined by any k-tuple of argument-value pairs with distinct arguments, from which it follows that any k-tuple of distinct arguments is equally likely to be mapped to any k-tuple of hash values.[2]
Tabulation hashing is a technique for mapping keys to hash values by partitioning each key into bytes, using each byte as the index into a table of random numbers (with a different table for each byte position), and combining the results of these table lookups by a bitwise exclusive or operation. Thus, it requires more randomness in its initialization than the polynomial method, but avoids possibly-slow multiplication operations. It is 3-independent but not 4-independent.[4] Variations of tabulation hashing can achieve higher degrees of independence by performing table lookups based on overlapping combinations of bits from the input key, or by applying simple tabulation hashing iteratively.[5][6]
The notion of k-independence can be used to differentiate between different hashing methods, according to the level of independence required to guarantee constant expected time per operation.
For instance, hash chaining takes constant expected time even with a 2-independent hash function, because the expected time to perform a search for a given key is bounded by the expected number of collisions that key is involved in. By linearity of expectation, this expected number equals the sum, over all other keys in the hash table, of the probability that the given key and the other key collide. Because the terms of this sum only involve probabilistic events involving two keys, 2-independence is sufficient to ensure that this sum has the same value that it would for a truly random hash function.[2]
Double hashing is another method of hashing that requires a low degree of independence. It is a form of open addressing that uses two hash functions: one to determine the start of a probe sequence, and the other to determine the step size between positions in the probe sequence. As long as both of these are 2-independent, this method gives constant expected time per operation.[7]
On the other hand, linear probing, a simpler form of open addressing where the step size is always one, requires 5-independence. It can be guaranteed to work in constant expected time per operation with a 5-independent hash function,[8] and there exist 4-independent hash functions for which it takes logarithmic time per operation.[9]