ABOUT
In numerical analysis, pairwise summation, also called cascade summation, is a technique to sum a sequence of finite-precision floating-point numbers that substantially reduces the accumulated round-off error compared to naively accumulating the sum in sequence.[1] Although there are other techniques such as Kahan summation that typically have even smaller round-off errors, pairwise summation is nearly as good (differing only by a logarithmic factor) while having much lower computational cost—it can be implemented so as to have nearly the same cost (and exactly the same number of arithmetic operations) as naive summation.
FULL TEXT
In numerical analysis, pairwise summation, also called cascade summation, is a technique to sum a sequence of finite-precision floating-point numbers that substantially reduces the accumulated round-off error compared to naively accumulating the sum in sequence.[1] Although there are other techniques such as Kahan summation that typically have even smaller round-off errors, pairwise summation is nearly as good (differing only by a logarithmic factor) while having much lower computational cost—it can be implemented so as to have nearly the same cost (and exactly the same number of arithmetic operations) as naive summation.
In particular, pairwise summation of a sequence of n numbers xn works by recursively breaking the sequence into two halves, summing each half, and adding the two sums: a divide and conquer algorithm. Its worst-case roundoff errors grow asymptotically as at most O(ε log n), where ε is the machine precision (assuming a fixed condition number, as discussed below).[1] In comparison, the naive technique of accumulating the sum in sequence (adding each xi one at a time for i = 1, ..., n) has roundoff errors that grow at worst as O(εn).[1] Kahan summation has a worst-case error of roughly O(ε), independent of n, but requires several times more arithmetic operations.[1] If the roundoff errors are random, and in particular have random signs, then they form a random walk and the error growth is reduced to an average of 



O
(
ε


log
⁡
n


)


{\displaystyle O(\varepsilon {\sqrt {\log n}})}

 for pairwise summation.[2]
A very similar recursive structure of summation is found in many fast Fourier transform (FFT) algorithms, and is responsible for the same slow roundoff accumulation of those FFTs.[2][3]
Pairwise summation is the default summation algorithm in NumPy[4] and the Julia technical-computing language,[5] where in both cases it was found to have comparable speed to naive summation (thanks to the use of a large base case).
In pseudocode, the pairwise summation algorithm for an array x of length n > 0 can be written:
For some sufficiently small N, this algorithm switches to a naive loop-based summation as a base case, whose error bound is O(Nε).[6] The entire sum has a worst-case error that grows asymptotically as O(ε log n) for large n, for a given condition number (see below).
In an algorithm of this sort (as for divide and conquer algorithms in general[7]), it is desirable to use a larger base case in order to amortize the overhead of the recursion. If N = 1, then there is roughly one recursive subroutine call for every input, but more generally there is one recursive call for (roughly) every N/2 inputs if the recursion stops at exactly n = N. By making N sufficiently large, the overhead of recursion can be made negligible (precisely this technique of a large base case for recursive summation is employed by high-performance FFT implementations[3]).
Regardless of N, exactly n−1 additions are performed in total, the same as for naive summation, so if the recursion overhead is made negligible then pairwise summation has essentially the same computational cost as for naive summation.
A variation on this idea is to break the sum into b blocks at each recursive stage, summing each block recursively, and then summing the results, which was dubbed a "superblock" algorithm by its proposers.[8] The above pairwise algorithm corresponds to b = 2 for every stage except for the last stage which is b = N.
Suppose that one is summing n values xi, for i = 1, ..., n. The exact sum is:
(computed with infinite precision).
With pairwise summation for a base case N = 1, one instead obtains 




S

n


+

E

n




{\displaystyle S_{n}+E_{n}}

, where the error 




E

n




{\displaystyle E_{n}}

 is bounded above by:[1]
where ε is the machine precision of the arithmetic being employed (e.g. ε ≈ 10−16 for standard double precision floating point). Usually, the quantity of interest is the relative error 




|


E

n



|


/


|


S

n



|



{\displaystyle |E_{n}|/|S_{n}|}

, which is therefore bounded above by:
In the expression for the relative error bound, the fraction (Σ|xi|/|Σxi|) is the condition number of the summation problem. Essentially, the condition number represents the intrinsic sensitivity of the summation problem to errors, regardless of how it is computed.[9] The relative error bound of every (backwards stable) summation method by a fixed algorithm in fixed precision (i.e. not those that use arbitrary-precision arithmetic, nor algorithms whose memory and time requirements change based on the data), is proportional to this condition number.[1] An ill-conditioned summation problem is one in which this ratio is large, and in this case even pairwise summation can have a large relative error. For example, if the summands xi are uncorrelated random numbers with zero mean, the sum is a random walk and the condition number will grow proportional to 





n




{\displaystyle {\sqrt {n}}}

. On the other hand, for random inputs with nonzero mean the condition number asymptotes to a finite constant as 



n
→
∞


{\displaystyle n\to \infty }

. If the inputs are all non-negative, then the condition number is 1.
Note that the 



1
−
ε

log

2


⁡
n


{\displaystyle 1-\varepsilon \log _{2}n}

 denominator is effectively 1 in practice, since 



ε

log

2


⁡
n


{\displaystyle \varepsilon \log _{2}n}

 is much smaller than 1 until n becomes of order 21/ε, which is roughly 101015 in double precision.
In comparison, the relative error bound for naive summation (simply adding the numbers in sequence, rounding at each step) grows as 



O
(
ε
n
)


{\displaystyle O(\varepsilon n)}

 multiplied by the condition number.[1] In practice, it is much more likely that the rounding errors have a random sign, with zero mean, so that they form a random walk; in this case, naive summation has a root mean square relative error that grows as 



O
(
ε


n


)


{\displaystyle O(\varepsilon {\sqrt {n}})}

 and pairwise summation as an error that grows as 



O
(
ε


log
⁡
n


)


{\displaystyle O(\varepsilon {\sqrt {\log n}})}

 on average.[2]