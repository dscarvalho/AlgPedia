ABOUT
In computer programming, in particular in a Unix-like environment, glob patterns specify sets of filenames with wildcard characters. For example, the Unix command mv *.txt textfiles/ moves (mv) all files with names ending in .txt from the current directory to the directory textfiles. Here, * is a wildcard standing for "any string of characters" and *.txt is a glob pattern. The other common wildcard is the question mark (?), which stands for one character.
FULL TEXT
In computer programming, in particular in a Unix-like environment, glob patterns specify sets of filenames with wildcard characters. For example, the Unix command mv *.txt textfiles/ moves (mv) all files with names ending in .txt from the current directory to the directory textfiles. Here, * is a wildcard standing for "any string of characters" and *.txt is a glob pattern. The other common wildcard is the question mark (?), which stands for one character.


The command interpreters of the early versions of Unix (1st through 6th Editions, 1969–75) relied on a separate program to expand wildcard characters in unquoted arguments to a command: /etc/glob.[1] That program performed the expansion and supplied the expanded list of file paths to the command for execution. Its name is an abbreviation for "global command".[2] Later, this functionality was provided as a library function, glob(), used by programs such as the shell.
The most common wildcards are *, ?, and […].
In all cases the path separator character (/ on unix or \ on windows) will never be matched.
On Linux and POSIX systems *, ? is defined as above while […] has two additional meanings:[3][4]
Some shells (such as the C shell and Bash) support additional syntax known as alternation or brace expansion.
The Bash shell also supports Extended Globbing which allows other pattern matching operators to be used to match multiple occurrences of a pattern enclosed in parentheses. It can be enabled by setting the extglob shell option.[5]
Windows PowerShell has all the common syntax defined as stated above without any additions.[6]
COMMAND.COM and cmd.exe have most of the common syntax with some limitations: There is no […] and for COMMAND.COM the * may only appear at the end of the pattern, not at the beginning.
The SQL LIKE operator has an equivalent of ? and *. There is no equivalent of […].
Standard SQL uses a glob-like syntax for simple string matching in its LIKE operator. The percent sign (%) matches zero or more characters, and the underscore matches exactly one character. The term "glob" is not generally used in the SQL community, however. Many implementations of SQL have extended the LIKE operator to allow a richer pattern-matching language incorporating elements of regular expressions.
Some proprietary extensions such as Transact-SQL provide the […] functionality, e.g., [characters] and [^characters].[7]
Globs do not include syntax for the Kleene star which allows multiple repetitions of the preceding part of the expression; thus they are not considered regular expressions, which can describe the full set of regular languages over any given finite alphabet.[citation needed]
Globs attempt to match the entire string (for example, S*.DOC matches S.DOC and SA.DOC, but not POST.DOC or SURREY.DOCKS), whereas regular expressions match a substring unless the expression is enclosed with ^ and $ (so the equivalent of S*.DOC is ^S.*\.DOC$[8]).
Unix shells such as Bash, tcsh, and zsh provide globbing on filenames at the command line and in shell scripts.[9]
The Windows command interpreter cmd.exe relies on a runtime function in applications to perform globbing.[10][11] Windows PowerShell Cmdlets support globbing.[12]
The term "glob" is also used to refer more generally to limited pattern-matching facilities of this kind, in other contexts: