ABOUT
In mathematics, a submodular set function (also known as a submodular function) is a set function whose value, informally, has the property that the difference in the incremental value of the function that a single element makes when added to an input set decreases as the size of the input set increases. Submodular functions have a natural diminishing returns property which makes them suitable for many applications, including approximation algorithms, game theory (as functions modeling user preferences) and electrical networks. Recently, submodular functions have also found immense utility in several real world problems in machine learning and artificial intelligence, including automatic summarization, multi-document summarization, feature selection, active learning, sensor placement, image collection summarization and many other domains.[1][2][3][4]
FULL TEXT
In mathematics, a submodular set function (also known as a submodular function) is a set function whose value, informally, has the property that the difference in the incremental value of the function that a single element makes when added to an input set decreases as the size of the input set increases. Submodular functions have a natural diminishing returns property which makes them suitable for many applications, including approximation algorithms, game theory (as functions modeling user preferences) and electrical networks. Recently, submodular functions have also found immense utility in several real world problems in machine learning and artificial intelligence, including automatic summarization, multi-document summarization, feature selection, active learning, sensor placement, image collection summarization and many other domains.[1][2][3][4]


If 



Ω


{\displaystyle \Omega }

 is a finite set, a submodular function is a set function 



f
:

2

Ω


→

R



{\displaystyle f:2^{\Omega }\rightarrow \mathbb {R} }

, where 




2

Ω




{\displaystyle 2^{\Omega }}

 denotes the power set of 



Ω


{\displaystyle \Omega }

, which satisfies one of the following equivalent definitions.[5]
A nonnegative submodular function is also a subadditive function, but a subadditive function need not be submodular. If 



Ω


{\displaystyle \Omega }

 is not assumed finite, then the above conditions are not equivalent. In particular a function 



f


{\displaystyle f}

 defined by 



f
(
S
)
=
1


{\displaystyle f(S)=1}

 if 



S


{\displaystyle S}

 is finite and 



f
(
S
)
=
0


{\displaystyle f(S)=0}

 if 



S


{\displaystyle S}

 is infinite satisfies the first condition above, but the second condition fails when 



S


{\displaystyle S}

 and 



T


{\displaystyle T}

 are infinite sets with finite intersection.
A submodular function 



f


{\displaystyle f}

 is monotone if for every 



T
⊆
S


{\displaystyle T\subseteq S}

 we have that 



f
(
T
)
≤
f
(
S
)


{\displaystyle f(T)\leq f(S)}

. Examples of monotone submodular functions include:
A submodular function which is not monotone is called non-monotone.
A non-monotone submodular function 



f


{\displaystyle f}

 is called symmetric if for every 



S
⊆
Ω


{\displaystyle S\subseteq \Omega }

 we have that 



f
(
S
)
=
f
(
Ω
−
S
)


{\displaystyle f(S)=f(\Omega -S)}

. Examples of symmetric non-monotone submodular functions include:
A non-monotone submodular function which is not symmetric is called asymmetric.
This extension is named after mathematician László Lovász. Consider any vector 





x


=
{

x

1


,

x

2


,
…
,

x

n


}


{\displaystyle {\mathbf {x}}=\{x_{1},x_{2},\dots ,x_{n}\}}

 such that each 



0
≤

x

i


≤
1


{\displaystyle 0\leq x_{i}\leq 1}

. Then the Lovász extension is defined as 




f

L


(


x


)
=

E

(
f
(
{
i

|


x

i


≥
λ
}
)
)


{\displaystyle f^{L}({\mathbf {x}})=\mathbb {E} (f(\{i|x_{i}\geq \lambda \}))}

 where the expectation is over 



λ


{\displaystyle \lambda }

 chosen from the uniform distribution on the interval 



[
0
,
1
]


{\displaystyle [0,1]}

. The Lovász extension is a convex function.
Consider any vector 





x


=
{

x

1


,

x

2


,
…
,

x

n


}


{\displaystyle {\mathbf {x}}=\{x_{1},x_{2},\ldots ,x_{n}\}}

 such that each 



0
≤

x

i


≤
1


{\displaystyle 0\leq x_{i}\leq 1}

. Then the multilinear extension is defined as 



F
(


x


)
=

∑

S
⊆
Ω


f
(
S
)

∏

i
∈
S



x

i



∏

i
∉
S


(
1
−

x

i


)


{\displaystyle F({\mathbf {x}})=\sum _{S\subseteq \Omega }f(S)\prod _{i\in S}x_{i}\prod _{i\notin S}(1-x_{i})}

.
Consider any vector 





x


=
{

x

1


,

x

2


,
…
,

x

n


}


{\displaystyle {\mathbf {x}}=\{x_{1},x_{2},\dots ,x_{n}\}}

 such that each 



0
≤

x

i


≤
1


{\displaystyle 0\leq x_{i}\leq 1}

. Then the convex closure is defined as 




f

−


(


x


)
=
min
(

∑

S



α

S


f
(
S
)
:

∑

S



α

S



1

S


=


x


,

∑

S



α

S


=
1
,

α

S


≥
0
)


{\displaystyle f^{-}({\mathbf {x}})=\min(\sum _{S}\alpha _{S}f(S):\sum _{S}\alpha _{S}1_{S}={\mathbf {x}},\sum _{S}\alpha _{S}=1,\alpha _{S}\geq 0)}

. It can be shown that 




f

L


(


x


)
=

f

−


(


x


)


{\displaystyle f^{L}({\mathbf {x}})=f^{-}({\mathbf {x}})}

.
Consider any vector 





x


=
{

x

1


,

x

2


,
…
,

x

n


}


{\displaystyle {\mathbf {x}}=\{x_{1},x_{2},\dots ,x_{n}\}}

 such that each 



0
≤

x

i


≤
1


{\displaystyle 0\leq x_{i}\leq 1}

. Then the concave closure is defined as 




f

+


(


x


)
=
max
(

∑

S



α

S


f
(
S
)
:

∑

S



α

S



1

S


=


x


,

∑

S



α

S


=
1
,

α

S


≥
0
)


{\displaystyle f^{+}({\mathbf {x}})=\max(\sum _{S}\alpha _{S}f(S):\sum _{S}\alpha _{S}1_{S}={\mathbf {x}},\sum _{S}\alpha _{S}=1,\alpha _{S}\geq 0)}

.
Submodular functions have properties which are very similar to convex and concave functions. For this reason, an optimization problem which concerns optimizing a convex or concave function can also be described as the problem of maximizing or minimizing a submodular function subject to some constraints.
The simplest minimization problem is to find a set 



S
⊆
Ω


{\displaystyle S\subseteq \Omega }

 which minimizes a submodular function subject to no constraints. This problem is computable in (strongly)[8][9] polynomial time.[10][11] Computing the minimum cut in a graph is a special case of this general minimization problem. However, even simple constraints like cardinality lower bound constraints make this problem NP hard, with polynomial lower bound approximation factors.[12][13]
Unlike minimization, maximization of submodular functions is usually NP-hard. Many problems, such as max cut and the maximum coverage problem, can be cast as special cases of this general maximization problem under suitable constraints. Typically, the approximation algorithms for these problems are based on either greedy algorithms or local search algorithms. The problem of maximizing a symmetric non-monotone submodular function subject to no constraints admits a 1/2 approximation algorithm.[14] Computing the maximum cut of a graph is a special case of this problem. The more general problem of maximizing an arbitrary non-monotone submodular function subject to no constraints also admits a 1/2 approximation algorithm.[15] The problem of maximizing a monotone submodular function subject to a cardinality constraint admits a 



1
−
1

/

e


{\displaystyle 1-1/e}

 approximation algorithm.[16] The maximum coverage problem is a special case of this problem. The more general problem of maximizing a monotone submodular function subject to a matroid constraint also admits a 



1
−
1

/

e


{\displaystyle 1-1/e}

 approximation algorithm.[17][18] Many of these algorithms can be unified within a semi-differential based framework of algorithms.[13]
Apart from submodular minimization and maximization, another natural problem is Difference of Submodular Optimization.[19][20] Unfortunately, this problem is not only NP hard, but also inapproximable.[20] A related optimization problem is minimize or maximize a submodular function, subject to a submodular level set constraint (also called submodular optimization subject to submodular cover or submodular knapsack constraint). This problem admits bounded approximation guarantees.[21] Another optimization problem involves partitioning data based on a submodular function, so as to maximize the average welfare. This problem is called the submodular welfare problem.[22]
Submodular functions naturally occur in several real world applications, in economics, game theory, machine learning and computer vision. Owing the diminishing returns property, submodular functions naturally model costs of items, since there is often a larger discount, with an increase in the items one buys. Submodular functions model notions of complexity, similarity and cooperation when they appear in minimization problems. In maximization problems, on the other hand, they model notions of diversity, information and coverage. For more information on applications of submodularity, particularly in machine learning, see [4][23][24]