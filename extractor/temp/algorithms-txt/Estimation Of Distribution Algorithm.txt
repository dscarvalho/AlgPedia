ABOUT
Estimation of distribution algorithms (EDAs), sometimes called probabilistic model-building genetic algorithms (PMBGAs), are stochastic optimization methods that guide the search for the optimum by building and sampling explicit probabilistic models of promising candidate solutions. Optimization is viewed as a series of incremental updates of a probabilistic model, starting with the model encoding the uniform distribution over admissible solutions and ending with the model that generates only the global optima.[1][2][3]
FULL TEXT
Estimation of distribution algorithms (EDAs), sometimes called probabilistic model-building genetic algorithms (PMBGAs), are stochastic optimization methods that guide the search for the optimum by building and sampling explicit probabilistic models of promising candidate solutions. Optimization is viewed as a series of incremental updates of a probabilistic model, starting with the model encoding the uniform distribution over admissible solutions and ending with the model that generates only the global optima.[1][2][3]
EDAs belong to the class of evolutionary algorithms. The main difference between EDAs and most conventional evolutionary algorithms is that evolutionary algorithms generate new candidate solutions using an implicit distribution defined by one or more variation operators, whereas EDAs use an explicit probability distribution encoded by a Bayesian network, a multivariate normal distribution, or another model class. Similarly as other evolutionary algorithms, EDAs can be used to solve optimization problems defined over a number of representations from vectors to LISP style S expressions, and the quality of candidate solutions is often evaluated using one or more objective functions.
The general procedure of an EDA is outlined in the following:
Using explicit probabilistic models in optimization allowed EDAs to feasibly solve optimization problems that were notoriously difficult for most conventional evolutionary algorithms and traditional optimization techniques, such as problems with high levels of epistasis. Nonetheless, the advantage of EDAs is also that these algorithms provide an optimization practitioner with a series of probabilistic models that reveal a lot of information about the problem being solved. This information can in turn be used to design problem-speciﬁc neighborhood operators for local search, to bias future runs of EDAs on a similar problem, or to create an efficient computational model of the problem.
For example, if the population is represented by bit strings of length 4, the EDA can represent the population of promising solution using a single vector of four probabilities (p1, p2, p3, p4) where each component of p defines the probability of that position being a 1. Using this probability vector it is possible to create an arbitrary number of candidate solutions.


This section describes the models built by some well known EDAs of different levels of complexity. It is always assumed a population 



P
(
t
)


{\displaystyle P(t)}

 at the generation 



t


{\displaystyle t}

, a selection operator 



S


{\displaystyle S}

, a model-building operator 



α


{\displaystyle \alpha }

 and a sampling operator 



β


{\displaystyle \beta }

.
The most simple EDAs assume that decision variables are independent, i.e. 



p
(

X

1


,

X

2


)
=
p
(

X

1


)
⋅
p
(

X

2


)


{\displaystyle p(X_{1},X_{2})=p(X_{1})\cdot p(X_{2})}

. Therefore, univariate EDAs rely only on univariate statistics and multivariate distributions must be factorized as the product of 



N


{\displaystyle N}

 univariate probability distributions,





D

Univariate


:=
p
(

X

1


,
…
,

X

N


)
=

∏

i
=
1


N


p
(

X

i


)
.


{\displaystyle D_{\text{Univariate}}:=p(X_{1},\dots ,X_{N})=\prod _{i=1}^{N}p(X_{i}).}


Such factorizations are used in many different EDAs, next we describe some of them.
The UMDA[4] is a simple EDA that uses an operator 




α

U
M
D
A




{\displaystyle \alpha _{UMDA}}

 to estimate marginal probabilities from a selected population 



S
(
P
(
t
)
)


{\displaystyle S(P(t))}

. By assuming 



S
(
P
(
t
)
)


{\displaystyle S(P(t))}

 contain 



λ


{\displaystyle \lambda }

 elements, 




α

U
M
D
A




{\displaystyle \alpha _{UMDA}}

 produces probabilities:





p

t
+
1


(

X

i


)
=



1
λ




∑

x
∈
S
(
P
(
t
)
)



x

i


,
 
∀
i
∈
1
,
2
,
…
,
N
.


{\displaystyle p_{t+1}(X_{i})={\dfrac {1}{\lambda }}\sum _{x\in S(P(t))}x_{i},~\forall i\in 1,2,\dots ,N.}


Every UMDA step can be described as follows




D
(
t
+
1
)
=

α

UMDA


∘
S
∘

β

λ


(
D
(
t
)
)
.


{\displaystyle D(t+1)=\alpha _{\text{UMDA}}\circ S\circ \beta _{\lambda }(D(t)).}


The PBIL,[5] represents the population implicitly by its model, from which it samples new solutions and updates the model. At each generation, 



μ


{\displaystyle \mu }

 individuals are sampled and 



λ
≤
μ


{\displaystyle \lambda \leq \mu }

 are selected. Such individuals are then used to update the model as follows





p

t
+
1


(

X

i


)
=
(
1
−
γ
)

p

t


(

X

i


)
+
(
γ

/

λ
)

∑

x
∈
S
(
P
(
t
)
)



x

i


,
 
∀
i
∈
1
,
2
,
…
,
N
,


{\displaystyle p_{t+1}(X_{i})=(1-\gamma )p_{t}(X_{i})+(\gamma /\lambda )\sum _{x\in S(P(t))}x_{i},~\forall i\in 1,2,\dots ,N,}


where 



γ
∈
(
0
,
1
]


{\displaystyle \gamma \in (0,1]}

 is a parameter defining the learning rate, a small value determines that the previous model 




p

t


(

X

i


)


{\displaystyle p_{t}(X_{i})}

 should be only slightly modified by the new solutions sampled. PBIL can be described as




D
(
t
+
1
)
=

α

PIBIL


∘
S
∘

β

μ


(
D
(
t
)
)


{\displaystyle D(t+1)=\alpha _{\text{PIBIL}}\circ S\circ \beta _{\mu }(D(t))}


The CGA,[6] also relies on the implicit populations defined by univariate distributions. At each generation 



t


{\displaystyle t}

, two individuals 



x
,
y


{\displaystyle x,y}

 are sampled, 



P
(
t
)
=

β

2


(
D
(
t
)
)


{\displaystyle P(t)=\beta _{2}(D(t))}

. The population 



P
(
t
)


{\displaystyle P(t)}

 is then sort in decreasing order of fitness, 




S


Sort

(
f
)


(
P
(
t
)
)


{\displaystyle S_{{\text{Sort}}(f)}(P(t))}

, with 



u


{\displaystyle u}

 being the best and 



v


{\displaystyle v}

 being the worst solution. The CGA estimates univariate probabilities as follows





p

t
+
1


(

X

i


)
=

p

t


(

X

i


)
+
γ
(

u

i


−

v

i


)
,

∀
i
∈
1
,
2
,
…
,
N
,


{\displaystyle p_{t+1}(X_{i})=p_{t}(X_{i})+\gamma (u_{i}-v_{i}),\quad \forall i\in 1,2,\dots ,N,}


where, 



γ
∈
(
0
,
1
]


{\displaystyle \gamma \in (0,1]}

 is a constant defining the learning rate, usually set to 



γ
=
1

/

N


{\displaystyle \gamma =1/N}

. The CGA can be defined as




D
(
t
+
1
)
=

α

CGA


∘

S


Sort

(
f
)


∘

β

2


(
D
(
t
)
)


{\displaystyle D(t+1)=\alpha _{\text{CGA}}\circ S_{{\text{Sort}}(f)}\circ \beta _{2}(D(t))}


Although univariate models can be computed efficiently, in many cases they are not representative enough to provide better performance than GAs. In order to overcome such a drawback, the use of bivariate factorizations was proposed in the EDA community, in which dependencies between pairs of variables could be modeled. A bivariate factorization can be defined as follows, where 




π

i




{\displaystyle \pi _{i}}

 contains a possible variable dependent to 




X

i




{\displaystyle X_{i}}

, i.e. 




|


π

i



|

=
1


{\displaystyle |\pi _{i}|=1}

.





D

Bivariate


:=
p
(

X

1


,
…
,

X

N


)
=

∏

i
=
1


N


p
(

X

i



|


π

i


)
.


{\displaystyle D_{\text{Bivariate}}:=p(X_{1},\dots ,X_{N})=\prod _{i=1}^{N}p(X_{i}|\pi _{i}).}


Bivariate and multivariate distributions are usually represented as Probabilistic Graphical Models (graphs), in which edges denote statistical dependencies (or conditional probabilities) and vertices denote variables. To learn the structure of a PGM from data linkage-learning is employed.
The MIMIC[7] factorizes the joint probability distribution in a chain-like model representing successive dependencies between variables. It finds a permutation of the decision variables, 



r
:
i
↦
j


{\displaystyle r:i\mapsto j}

, such that 




x

r
(
1
)



x

r
(
2
)


,
…
,

x

r
(
N
)




{\displaystyle x_{r(1)}x_{r(2)},\dots ,x_{r(N)}}

 minimizes the Kullback-Leibler divergence in relation to the true probability distribution, i.e. 




π

r
(
i
+
1
)


=
{

X

r
(
i
)


}


{\displaystyle \pi _{r(i+1)}=\{X_{r(i)}\}}

. MIMIC models a distribution





p

t
+
1


(

X

1


,
…
,

X

N


)
=

p

t


(

X

r
(
N
)


)

∏

i
=
1


N
−
1



p

t


(

X

r
(
i
)



|


X

r
(
i
+
1
)


)
.


{\displaystyle p_{t+1}(X_{1},\dots ,X_{N})=p_{t}(X_{r(N)})\prod _{i=1}^{N-1}p_{t}(X_{r(i)}|X_{r(i+1)}).}


New solutions are sampled from the leftmost to the rightmost variable, the first is generated independently and the others according to conditional probabilities. Since the estimated distribution must be recomputed each generation, MIMIC uses concrete populations in the following way




P
(
t
+
1
)
=

β

μ


∘

α

MIMIC


∘
S
(
P
(
t
)
)
.


{\displaystyle P(t+1)=\beta _{\mu }\circ \alpha _{\text{MIMIC}}\circ S(P(t)).}


The BMDA[8] factorizes the joint probability distribution in bivariate distributions. First, a randomly chosen variable is added as a node in a graph, the most dependent variable to one of those in the graph is chosen among those not yet in the graph, this procedure is repeated until no remaining variable depends on any variable in the graph (verified according to a threshold value).
The resulting model is a forest with multiple trees rooted at nodes 




Υ

t




{\displaystyle \Upsilon _{t}}

. Considering 




I

t




{\displaystyle I_{t}}

 the non-root variables, BMDA estimates a factorized distribution in which the root variables can be sampled independently, whereas all the others must be conditioned to the parent variable 




π

i




{\displaystyle \pi _{i}}

.





p

t
+
1


(

X

1


,
…
,

X

N


)
=

∏


X

i


∈

Υ

t





p

t


(

X

i


)
⋅

∏


X

i


∈

I

t





p

t


(

X

i



|


π

i


)
.


{\displaystyle p_{t+1}(X_{1},\dots ,X_{N})=\prod _{X_{i}\in \Upsilon _{t}}p_{t}(X_{i})\cdot \prod _{X_{i}\in I_{t}}p_{t}(X_{i}|\pi _{i}).}


Each step of BMDA is defined as follows




P
(
t
+
1
)
=

β

μ


∘

α

BMDA


∘
S
(
P
(
t
)
)
.


{\displaystyle P(t+1)=\beta _{\mu }\circ \alpha _{\text{BMDA}}\circ S(P(t)).}


The next stage of EDAs development was the use of multivariate factorizations. In this case, the joint probability distribution is usually factorized in a number of components of limited size 




|


π

i



|

≤
K
,
 
∀
i
∈
1
,
2
,
…
,
N


{\displaystyle |\pi _{i}|\leq K,~\forall i\in 1,2,\dots ,N}

.




p
(

X

1


,
…
,

X

N


)
=

∏

i
=
1


N


p
(

X

i



|


π

i


)


{\displaystyle p(X_{1},\dots ,X_{N})=\prod _{i=1}^{N}p(X_{i}|\pi _{i})}


The learning of PGMs encoding multivariate distributions is a computationally expensive task, therefore, it is usual for EDAs to estimate multivariate statistics from bivariate statistics. Such relaxation allows PGM to be built in polynomial time in 



N


{\displaystyle N}

; however, it also limits the generality of such EDAs.
The ECGA[9] was one of the first EDA to employ multivariate factorizations, in which high-order dependencies among decision variables can be modeled. Its approach factorizes the joint probability distribution in the product of multivariate marginal distributions. Assume 




T

eCGA


=
{

τ

1


,
…
,

τ

Ψ


}


{\displaystyle T_{\text{eCGA}}=\{\tau _{1},\dots ,\tau _{\Psi }\}}

 is a set of subsets, in which every 



τ
∈

T

eCGA




{\displaystyle \tau \in T_{\text{eCGA}}}

 is a linkage set, containing 




|

τ

|

≤
K


{\displaystyle |\tau |\leq K}

 variables. The factorized joint probability distribution is represented as follows




p
(

X

1


,
…
,

X

N


)
=

∏

τ
∈

T

eCGA




p
(
τ
)
.


{\displaystyle p(X_{1},\dots ,X_{N})=\prod _{\tau \in T_{\text{eCGA}}}p(\tau ).}


The ECGA popularized the term linkage-learning as denoting procedures that identify linkage sets. Its linkage-learning procedure relies on two measures: (1) the Model Complexity (MC) and (2) the Compressed Population Complexity (CPC). The MC quantifies the model representation size in terms of number of bits required to store all the marginal probabilities




M
C
=

log

2


⁡
(
λ
+
1
)

∑

τ
∈

T

eCGA




(

2


|

τ

|

−
1


)
,


{\displaystyle MC=\log _{2}(\lambda +1)\sum _{\tau \in T_{\text{eCGA}}}(2^{|\tau |-1}),}


The CPC, on the other hand, quantifies the data compression in terms of entropy of the marginal distribution over all partitions, where 



λ


{\displaystyle \lambda }

 is the selected population size, 




|

τ

|



{\displaystyle |\tau |}

 is the number of decision variables in the linkage set 



τ


{\displaystyle \tau }

 and 



H
(
τ
)


{\displaystyle H(\tau )}

 is the joint entropy of the variables in 



τ


{\displaystyle \tau }






C
P
C
=
λ

∑

τ
∈

T

eCGA




H
(
τ
)
.


{\displaystyle CPC=\lambda \sum _{\tau \in T_{\text{eCGA}}}H(\tau ).}


The linkage-learning in ECGA works as follows: (1) Insert each variable in a cluster, (2) compute CCC = MC + CPC of the current linkage sets, (3) verify the increase on CCC provided by joining pairs of clusters, (4) effectively joins those clusters with highest CCC improvement. This procedure is repeated until no CCC improvements are possible and produces a linkage model 




T

eCGA




{\displaystyle T_{\text{eCGA}}}

. The ECGA works with concrete populations, therefore, using the factorized distribution modeled by ECGA, it can be described as




P
(
t
+
1
)
=

β

μ


∘

α

eCGA


∘
S
(
P
(
t
)
)


{\displaystyle P(t+1)=\beta _{\mu }\circ \alpha _{\text{eCGA}}\circ S(P(t))}


The BOA[10][11][12] uses Bayesian networks to model and sample promising solutions. Bayesian networks are directed acyclic graphs, with nodes representing variables and edges representing conditional probabilities between pair of variables. The value of a variable 




x

i




{\displaystyle x_{i}}

 can be conditioned on a maximum of 



K


{\displaystyle K}

 other variables, defined in 




π

i




{\displaystyle \pi _{i}}

. BOA builds a PGM encoding a factorized joint distribution, in which the parameters of the network, i.e. the conditional probabilities, are estimated from the selected population using the maximum likelihood estimator.




p
(

X

1


,

X

2


,
…
,

X

N


)
=

∏

i
=
1


N


p
(

X

i



|


π

i


)
.


{\displaystyle p(X_{1},X_{2},\dots ,X_{N})=\prod _{i=1}^{N}p(X_{i}|\pi _{i}).}


The Bayesian network structure, on the other hand, must be built iteratively (linkage-learning). It starts with a network without edges and, at each step, adds the edge which better improves some scoring metric (e.g. Bayesian information criterion (BIC) or Bayesian-Dirichlet metric with likelihood equivalence (BDe)).[13] The scoring metric evaluates the network structure according to its accuracy in modeling the selected population. From the built network, BOA samples new promising solutions as follows: (1) it computes the ancestral ordering for each variable, each node being preceded by its parents; (2) each variable is sampled conditionally to its parents. Given such scenario, every BOA step can be defined as




P
(
t
+
1
)
=

β

μ


∘

α

BOA


∘
S
(
P
(
t
)
)


{\displaystyle P(t+1)=\beta _{\mu }\circ \alpha _{\text{BOA}}\circ S(P(t))}


The LTGA[14] differs from most EDA in the sense it does not explicitly model a probabilisty distribution but only a linkage model, called linkage-tree. A linkage 



T


{\displaystyle T}

 is a set of linkage sets with no probability distribution associated, therefore, there is no way to sample new solutions directly from 



T


{\displaystyle T}

. The linkage model is a linkage-tree produced stored as a Family of sets (FOS).





T

LT


=
{
{

x

1


}
,
{

x

2


}
,
{

x

3


}
,
{

x

4


}
,
{

x

1


,

x

2


}
,
{

x

3


,

x

4


}
}
.


{\displaystyle T_{\text{LT}}=\{\{x_{1}\},\{x_{2}\},\{x_{3}\},\{x_{4}\},\{x_{1},x_{2}\},\{x_{3},x_{4}\}\}.}


The linkage-tree learning procedure is a hierarchical clustering algorithm, which work as follows. At each step the two closest clusters 



i


{\displaystyle i}

 and 



j


{\displaystyle j}

 are merged, this procedure repeats until only one cluster remains, each subtree is stored as a subset 



τ
∈

T

LT




{\displaystyle \tau \in T_{\text{LT}}}

.
The LTGA uses 




T

LT




{\displaystyle T_{\text{LT}}}

 to guide an "optimal mixing" procedure which resembles a recombination operator but only accepts improving moves. We denote it as 




R

LTGA




{\displaystyle R_{\text{LTGA}}}

, where the notation 



x
[
τ
]
←
y
[
τ
]


{\displaystyle x[\tau ]\gets y[\tau ]}

 indicates the transfer of the genetic material indexed by 



τ


{\displaystyle \tau }

 from 



y


{\displaystyle y}

 to 



x


{\displaystyle x}

.
The LTGA does not implement typical selection operators, instead, selection is performed during recombination. Similar ideas have been usually applied into local-search heuristics and, in this sense, the LTGA can be seen as an hybrid method. In summary, one step of the LTGA is defined as




P
(
t
+
1
)
=

R

LTGA


(
P
(
t
)
)
∘

α

LTGA


(
P
(
t
)
)


{\displaystyle P(t+1)=R_{\text{LTGA}}(P(t))\circ \alpha _{\text{LTGA}}(P(t))}

