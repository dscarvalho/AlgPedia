ABOUT
In coding theory, generalized minimum-distance (GMD) decoding provides an efficient algorithm for decoding concatenated codes, which is based on using an errors-and-erasures decoder for the outer code.
FULL TEXT
In coding theory, generalized minimum-distance (GMD) decoding provides an efficient algorithm for decoding concatenated codes, which is based on using an errors-and-erasures decoder for the outer code.
A naive decoding algorithm for concatenated codes can not be an optimal way of decoding because it does not take into account the information that maximum likelihood decoding (MLD) gives. In other words, in the naive algorithm, inner received codewords are treated the same regardless of the difference between their hamming distances. Intuitively, the outer decoder should place higher confidence in symbols whose inner encodings are close to the received word. David Forney in 1966 devised a better algorithm called generalized minimum distance (GMD) decoding which makes use of those information better. This method is achieved by measuring confidence of each received codeword, and erasing symbols whose confidence is below a desired value. And GMD decoding algorithm was one of the first examples of soft-decision decoders. We will present three versions of the GMD decoding algorithm. The first two will be randomized algorithms while the last one will be a deterministic algorithm.


Consider the received word 




y

=
(

y

1


,
…
,

y

N


)
∈
[

q

n



]

N




{\displaystyle \mathbf {y} =(y_{1},\ldots ,y_{N})\in [q^{n}]^{N}}

 which corrupted by noisy channel. The following is the algorithm description for the general case. In this algorithm, we can decode y by just declaring an erasure at every bad position and running the errors and erasure decoding algorithm for 




C

out




{\displaystyle C_{\text{out}}}

 on the resulting vector.
Randomized_Decoder
Given : 




y

=
(

y

1


,
…
,

y

N


)
∈
[

q

n



]

N




{\displaystyle \mathbf {y} =(y_{1},\dots ,y_{N})\in [q^{n}]^{N}}

.
Theorem 1. Let y be a received word such that there exists a codeword 




c

=
(

c

1


,
⋯
,

c

N


)
∈

C

out


∘


C

in



⊆
[

q

n



]

N




{\displaystyle \mathbf {c} =(c_{1},\cdots ,c_{N})\in C_{\text{out}}\circ {C_{\text{in}}}\subseteq [q^{n}]^{N}}

 such that 



Δ
(

c

,

y

)
<




D
d

2





{\displaystyle \Delta (\mathbf {c} ,\mathbf {y} )<{\tfrac {Dd}{2}}}

. Then the deterministic GMD algorithm outputs 




c



{\displaystyle \mathbf {c} }

.
Note that a naive decoding algorithm for concatenated codes can correct up to 







D
d

4





{\displaystyle {\tfrac {Dd}{4}}}

 errors.
Remark. If 



2

e
′

+

s
′

<
D


{\displaystyle 2e'+s'<D}

, then the algorithm in Step 2 will output 




c



{\displaystyle \mathbf {c} }

. The lemma above says that in expectation, this is indeed the case. Note that this is not enough to prove Theorem 1, but can be crucial in developing future variations of the algorithm.
Proof of lemma 1. For every 



1
≤
i
≤
N
,


{\displaystyle 1\leq i\leq N,}

 define 




e

i


=
Δ
(

y

i


,

c

i


)
.


{\displaystyle e_{i}=\Delta (y_{i},c_{i}).}

 This implies that
Next for every 



1
≤
i
≤
N


{\displaystyle 1\leq i\leq N}

, we define two indicator variables:
We claim that we are done if we can show that for every 



1
≤
i
≤
N


{\displaystyle 1\leq i\leq N}

:
Clearly, by definition
Further, by the linearity of expectation, we get
To prove (2) we consider two cases: 



i


{\displaystyle i}

-th block is correctly decoded (Case 1), 



i


{\displaystyle i}

-th block is incorrectly decoded (Case 2):
Case 1: 



(

c

i


=

C

in


(

y

i

′

)
)


{\displaystyle (c_{i}=C_{\text{in}}(y_{i}'))}


Note that if 




y

i

″

=
?


{\displaystyle y_{i}''=?}

 then 




X

i


e


=
0


{\displaystyle X_{i}^{e}=0}

, and 



Pr
[

y

i

″

=
?
]
=




2

ω

i



d





{\displaystyle \Pr[y_{i}''=?]={\tfrac {2\omega _{i}}{d}}}

 implies 




E

[

X

i


?


]
=
Pr
[

X

i


?


=
1
]
=




2

ω

i



d



,


{\displaystyle \mathbb {E} [X_{i}^{?}]=\Pr[X_{i}^{?}=1]={\tfrac {2\omega _{i}}{d}},}

 and 




E

[

X

i


e


]
=
Pr
[

X

i


e


=
1
]
=
0


{\displaystyle \mathbb {E} [X_{i}^{e}]=\Pr[X_{i}^{e}=1]=0}

.
Further, by definition we have
Case 2: 



(

c

i


≠

C

in


(

y

i

′

)
)


{\displaystyle (c_{i}\neq C_{\text{in}}(y_{i}'))}


In this case, 




E

[

X

i


?


]
=




2

ω

i



d





{\displaystyle \mathbb {E} [X_{i}^{?}]={\tfrac {2\omega _{i}}{d}}}

 and 




E

[

X

i


e


]
=
Pr
[

X

i


e


=
1
]
=
1
−




2

ω

i



d



.


{\displaystyle \mathbb {E} [X_{i}^{e}]=\Pr[X_{i}^{e}=1]=1-{\tfrac {2\omega _{i}}{d}}.}


Since 




c

i


≠

C

in


(

y

i

′

)
,

e

i


+

ω

i


⩾
d


{\displaystyle c_{i}\neq C_{\text{in}}(y_{i}'),e_{i}+\omega _{i}\geqslant d}

. This follows another case analysis when 



(

ω

i


=
Δ
(

C

in


(

y

i

′

)
,

y

i


)
<



d
2



)


{\displaystyle (\omega _{i}=\Delta (C_{\text{in}}(y_{i}'),y_{i})<{\tfrac {d}{2}})}

 or not.
Finally, this implies
In the following sections, we will finally show that the deterministic version of the algorithm above can do unique decoding of 




C

out


∘

C

in




{\displaystyle C_{\text{out}}\circ C_{\text{in}}}

 up to half its design distance.
Note that, in the previous version of the GMD algorithm in step "3", we do not really need to use "fresh" randomness for each 



i


{\displaystyle i}

. Now we come up with another randomized version of the GMD algorithm that uses the same randomness for every 



i


{\displaystyle i}

. This idea follows the algorithm below.
Modified_Randomized_Decoder
Given : 




y

=
(

y

1


,
…
,

y

N


)
∈
[

q

n



]

N




{\displaystyle \mathbf {y} =(y_{1},\ldots ,y_{N})\in [q^{n}]^{N}}

, pick 



θ
∈
[
0
,
1
]


{\displaystyle \theta \in [0,1]}

 at random. Then every for every 



1
≤
i
≤
N


{\displaystyle 1\leq i\leq N}

:
For the proof of Lemma 1, we only use the randomness to show that
In this version of the GMD algorithm, we note that
The second equality above follows from the choice of 



θ


{\displaystyle \theta }

. The proof of Lemma 1 can be also used to show 




E

[
2

e
′

+

s
′

]
<
D


{\displaystyle \mathbb {E} [2e'+s']<D}

 for version2 of GMD. In the next section, we will see how to get a deterministic version of the GMD algorithm by choosing 



θ


{\displaystyle \theta }

 from a polynomially sized set as opposed to the current infinite set 



[
0
,
1
]


{\displaystyle [0,1]}

.
Let 



Q
=
{
0
,
1
}
∪
{



2

ω

1



d


,
…
,



2

ω

N



d


}


{\displaystyle Q=\{0,1\}\cup \{{2\omega _{1} \over d},\ldots ,{2\omega _{N} \over d}\}}

. Since for each 



i
,

ω

i


=
min
(
Δ
(


y

i

′


,


y

i



)
,


d
2


)


{\displaystyle i,\omega _{i}=\min(\Delta (\mathbf {y_{i}'} ,\mathbf {y_{i}} ),{d \over 2})}

, we have
where 




q

1


<
⋯
<

q

m




{\displaystyle q_{1}<\cdots <q_{m}}

 for some 



m
≤

⌊


d
2


⌋



{\displaystyle m\leq \left\lfloor {\frac {d}{2}}\right\rfloor }

. Note that for every 



θ
∈
[

q

i


,

q

i
+
1


]


{\displaystyle \theta \in [q_{i},q_{i+1}]}

, the step 1 of the second version of randomized algorithm outputs the same 





y

″

.


{\displaystyle \mathbf {y} ''.}

. Thus, we need to consider all possible value of 



θ
∈
Q


{\displaystyle \theta \in Q}

. This gives the deterministic algorithm below.
Deterministic_Decoder
Given : 




y

=
(

y

1


,
…
,

y

N


)
∈
[

q

n



]

N




{\displaystyle \mathbf {y} =(y_{1},\ldots ,y_{N})\in [q^{n}]^{N}}

, for every 



θ
∈
Q


{\displaystyle \theta \in Q}

, repeat the following.
Every loop of 1~4 can be run in polynomial time, the algorithm above can also be computed in polynomial time. Specifically, each call to an errors and erasures decoder of 



<
d
D

/

2


{\displaystyle <dD/2}

 errors takes 



O
(
d
)


{\displaystyle O(d)}

 time. Finally, the runtime of the algorithm above is 



O
(
N
Q

n

O
(
1
)


+
N

T

out


)


{\displaystyle O(NQn^{O(1)}+NT_{\text{out}})}

 where 




T

out




{\displaystyle T_{\text{out}}}

 is the running time of the outer errors and erasures decoder.