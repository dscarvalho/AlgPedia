ABOUT
The Karatsuba algorithm is a fast multiplication algorithm. It was discovered by Anatoly Karatsuba in 1960 and published in 1962.[1][2][3] It reduces the multiplication of two n-digit numbers to at most 




n


log

2


⁡
3


≈

n

1.585




{\displaystyle n^{\log _{2}3}\approx n^{1.585}}

 single-digit multiplications in general (and exactly 




n


log

2


⁡
3




{\displaystyle n^{\log _{2}3}}

 when n is a power of 2). It is therefore faster than the classical algorithm, which requires n2 single-digit products. For example, the Karatsuba algorithm requires 310 = 59,049 single-digit multiplications to multiply two 1024-digit numbers (n = 1024 = 210), whereas the classical algorithm requires (210)2 = 1,048,576.
FULL TEXT
The Karatsuba algorithm is a fast multiplication algorithm. It was discovered by Anatoly Karatsuba in 1960 and published in 1962.[1][2][3] It reduces the multiplication of two n-digit numbers to at most 




n


log

2


⁡
3


≈

n

1.585




{\displaystyle n^{\log _{2}3}\approx n^{1.585}}

 single-digit multiplications in general (and exactly 




n


log

2


⁡
3




{\displaystyle n^{\log _{2}3}}

 when n is a power of 2). It is therefore faster than the classical algorithm, which requires n2 single-digit products. For example, the Karatsuba algorithm requires 310 = 59,049 single-digit multiplications to multiply two 1024-digit numbers (n = 1024 = 210), whereas the classical algorithm requires (210)2 = 1,048,576.
The Karatsuba algorithm was the first multiplication algorithm asymptotically faster than the quadratic "grade school" algorithm. The Toom–Cook algorithm is a faster generalization of Karatsuba's method, and the Schönhage–Strassen algorithm is even faster, for sufficiently large n.


The standard procedure for multiplication of two n-digit numbers requires a number of elementary operations proportional to 




n

2






{\displaystyle n^{2}\,\!}

, or 



Θ
(

n

2


)




{\displaystyle \Theta (n^{2})\,\!}

 in the big-O notation. Andrey Kolmogorov conjectured that the classical algorithm was asymptotically optimal, meaning that any algorithm for that task would require 



Ω
(

n

2


)




{\displaystyle \Omega (n^{2})\,\!}

 elementary operations.
In 1960, Kolmogorov organized a seminar on mathematical problems in cybernetics at the Moscow State University, where he stated the 



Ω
(

n

2


)




{\displaystyle \Omega (n^{2})\,\!}

 conjecture and other problems in the complexity of computation. Within a week, Karatsuba, then a 23-year-old student, found an algorithm (later it was called "divide and conquer") that multiplies two n-digit numbers in 



Θ
(

n


log

2


⁡
3


)


{\displaystyle \Theta (n^{\log _{2}3})}

 elementary steps, thus disproving the conjecture. Kolmogorov was very agitated about the discovery; he communicated it at the next meeting of the seminar, which was then terminated. Kolmogorov did some lectures on the Karatsuba result at the conferences all over the world (see, for example, "Proceedings of the international congress of mathematicians 1962", pp. 351--356, and also "6 Lectures delivered at the International Congress of Mathematicians in Stockholm, 1962") and published the method in 1962, in the Proceedings of the USSR Academy of Sciences. The article had been written by Kolmogorov and contained two results on multiplication, Karatsuba's algorithm and a separate result by Yuri Ofman; it listed "A. Karatsuba and Yu. Ofman" as the authors. Karatsuba only became aware of the paper when he received the reprints from the publisher.[2]
The basic step of Karatsuba's algorithm is a formula that allows one to compute the product of two large numbers 



x


{\displaystyle x}

 and 



y


{\displaystyle y}

 using three multiplications of smaller numbers, each with about half as many digits as 



x


{\displaystyle x}

 or 



y


{\displaystyle y}

, plus some additions and digit shifts.
Let 



x


{\displaystyle x}

 and 



y


{\displaystyle y}

 be represented as 



n


{\displaystyle n}

-digit strings in some base 



B


{\displaystyle B}

. For any positive integer 



m


{\displaystyle m}

 less than 



n


{\displaystyle n}

, one can write the two given numbers as




x
=

x

1



B

m


+

x

0




{\displaystyle x=x_{1}B^{m}+x_{0}}






y
=

y

1



B

m


+

y

0




{\displaystyle y=y_{1}B^{m}+y_{0}}

,
where 




x

0




{\displaystyle x_{0}}

 and 




y

0




{\displaystyle y_{0}}

 are less than 




B

m




{\displaystyle B^{m}}

. The product is then




x
y
=
(

x

1



B

m


+

x

0


)
(

y

1



B

m


+

y

0


)


{\displaystyle xy=(x_{1}B^{m}+x_{0})(y_{1}B^{m}+y_{0})}






x
y
=

z

2



B

2
m


+

z

1



B

m


+

z

0




{\displaystyle xy=z_{2}B^{2m}+z_{1}B^{m}+z_{0}}

,
where





z

2


=

x

1



y

1




{\displaystyle z_{2}=x_{1}y_{1}}







z

1


=

x

1



y

0


+

x

0



y

1




{\displaystyle z_{1}=x_{1}y_{0}+x_{0}y_{1}}







z

0


=

x

0



y

0




{\displaystyle z_{0}=x_{0}y_{0}}

.
These formulae require four multiplications, and were known to Charles Babbage.[4] Karatsuba observed that 



x
y


{\displaystyle xy}

 can be computed in only three multiplications, at the cost of a few extra additions. With 




z

0




{\displaystyle z_{0}}

 and 




z

2




{\displaystyle z_{2}}

 as before one can calculate





z

1


=
(

x

1


+

x

0


)
(

y

1


+

y

0


)
−

z

2


−

z

0




{\displaystyle z_{1}=(x_{1}+x_{0})(y_{1}+y_{0})-z_{2}-z_{0}}


which holds since





z

1


=

x

1



y

0


+

x

0



y

1




{\displaystyle z_{1}=x_{1}y_{0}+x_{0}y_{1}}







z

1


=
(

x

1


+

x

0


)
(

y

1


+

y

0


)
−

x

1



y

1


−

x

0



y

0




{\displaystyle z_{1}=(x_{1}+x_{0})(y_{1}+y_{0})-x_{1}y_{1}-x_{0}y_{0}}

.
A more efficient implementation of Karatsuba multiplication can be set as [5] 



x
y
=
(

b

2


+
b
)

x

1



y

1


−
b
(

x

1


−

x

0


)
(

y

1


−

y

0


)
+
(
b
+
1
)

x

0



y

0




{\displaystyle xy=(b^{2}+b)x_{1}y_{1}-b(x_{1}-x_{0})(y_{1}-y_{0})+(b+1)x_{0}y_{0}}

, where 



b
=

B

m




{\displaystyle b=B^{m}}

.
To compute the product of 12345 and 6789, choose B = 10 and m = 3. Then we decompose the input operands using the resulting base (Bm = 1000), as:
Only three multiplications, which operate on smaller integers, are used to compute three partial results:
We get the result by just adding these three partial results, shifted accordingly (and then taking carries into account by decomposing these three inputs in base 1000 like for the input operands):
Note that the intermediate third multiplication operates on an input domain which is less than two times larger than for the two first multiplications, its output domain is less than four times larger, and base-1000 carries computed from the first two multiplications must be taken into account when computing these two subtractions; but note also that this partial result z1 cannot be negative: to compute these subtractions, equivalent additions using complements to 10002 can also be used, keeping only the two least significant base-1000 digits for each number:
If n is four or more, the three multiplications in Karatsuba's basic step involve operands with fewer than n digits. Therefore, those products can be computed by recursive calls of the Karatsuba algorithm. The recursion can be applied until the numbers are so small that they can (or must) be computed directly.
In a computer with a full 32-bit by 32-bit multiplier, for example, one could choose B = 231 = 2,147,483,648, and store each digit as a separate 32-bit binary word. Then the sums x1 + x0 and y1 + y0 will not need an extra binary word for storing the carry-over digit (as in carry-save adder), and the Karatsuba recursion can be applied until the numbers to multiply are only one digit long.
Karatsuba's original formula and other generalizations are symmetric themself. For example, the following formula computes
with 6 multiplications in 




GF

(
2
)
[
x
]


{\displaystyle {\text{GF}}(2)[x]}

, where 




GF

(
2
)


{\displaystyle {\text{GF}}(2)}

 is the Galois field with two elements 0 and 1.
where 




p

i


=

a

i



b

i


,
 
 

p

i
j


=
(

a

i


+

a

j


)
(

b

i


+

b

j


)


{\displaystyle p_{i}=a_{i}b_{i},\ \ p_{ij}=(a_{i}+a_{j})(b_{i}+b_{j})}

 and 




p

i
j
k


=
(

a

i


+

a

j


+

a

k


)
(

b

i


+

b

j


+

b

k


)


{\displaystyle p_{ijk}=(a_{i}+a_{j}+a_{k})(b_{i}+b_{j}+b_{k})}

. We note that addition and subtraction are the same in fields of characteristic 2.
This formula is symmetrical, namely, it does not change if we exchange 



a


{\displaystyle a}

 and 



b


{\displaystyle b}

 in 




p

i


,
 
 

p

i
j




{\displaystyle p_{i},\ \ p_{ij}}

 and 




p

i
j
k




{\displaystyle p_{ijk}}

.
Based on the second Generalized division algorithms [6], Fan et al. found the following asymmetric formula:
where 




m

3


=
(

a

1


+

a

2


)
(

b

0


+

b

2


)
,
 
 

m

4


=
(

a

0


+

a

1


)
(

b

1


+

b

2


)


{\displaystyle m_{3}=(a_{1}+a_{2})(b_{0}+b_{2}),\ \ m_{4}=(a_{0}+a_{1})(b_{1}+b_{2})}

 and 




m

5


=
(

a

0


+

a

2


)
(

b

0


+

b

1


)


{\displaystyle m_{5}=(a_{0}+a_{2})(b_{0}+b_{1})}

.
It is asymmetric because we can obtain the following new formula by exchanging 



a


{\displaystyle a}

 and 



b


{\displaystyle b}

 in 




m

3


,
 
 

m

4




{\displaystyle m_{3},\ \ m_{4}}

 and 




m

5




{\displaystyle m_{5}}

.
where 




m

3


=
(

a

0


+

a

2


)
(

b

1


+

b

2


)
,
 
 

m

4


=
(

a

1


+

a

2


)
(

b

0


+

b

1


)


{\displaystyle m_{3}=(a_{0}+a_{2})(b_{1}+b_{2}),\ \ m_{4}=(a_{1}+a_{2})(b_{0}+b_{1})}

 and 




m

5


=
(

a

0


+

a

1


)
(

b

0


+

b

2


)


{\displaystyle m_{5}=(a_{0}+a_{1})(b_{0}+b_{2})}

.
Karatsuba's basic step works for any base B and any m, but the recursive algorithm is most efficient when m is equal to n/2, rounded up. In particular, if n is 2k, for some integer k, and the recursion stops only when n is 1, then the number of single-digit multiplications is 3k, which is nc where c = log23.
Since one can extend any inputs with zero digits until their length is a power of two, it follows that the number of elementary multiplications, for any n, is at most 




3

⌈

log

2


⁡
n
⌉


≤
3

n


log

2


⁡
3






{\displaystyle 3^{\lceil \log _{2}n\rceil }\leq 3n^{\log _{2}3}\,\!}

.
Since the additions, subtractions, and digit shifts (multiplications by powers of B) in Karatsuba's basic step take time proportional to n, their cost becomes negligible as n increases. More precisely, if t(n) denotes the total number of elementary operations that the algorithm performs when multiplying two n-digit numbers, then
for some constants c and d. For this recurrence relation, the master theorem gives the asymptotic bound 



T
(
n
)
=
Θ
(

n


log

2


⁡
3


)




{\displaystyle T(n)=\Theta (n^{\log _{2}3})\,\!}

.
It follows that, for sufficiently large n, Karatsuba's algorithm will perform fewer shifts and single-digit additions than longhand multiplication, even though its basic step uses more additions and shifts than the straightforward formula. For small values of n, however, the extra shift and add operations may make it run slower than the longhand method. The point of positive return depends on the computer platform and context. As a rule of thumb, Karatsuba is usually faster when the multiplicands are longer than 320–640 bits.[7]