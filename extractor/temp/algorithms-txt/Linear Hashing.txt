ABOUT
Linear hashing is a dynamic hash table algorithm invented by Witold Litwin (1980),[1] and later popularized by Paul Larson. Linear hashing allows for the expansion of the hash table one slot at a time. The frequent single slot expansion can very effectively control the length of the collision chain. The cost of hash table expansion is spread out across each hash table insertion operation, as opposed to being incurred all at once.[2] Linear hashing is therefore well suited for interactive applications.
FULL TEXT
Linear hashing is a dynamic hash table algorithm invented by Witold Litwin (1980),[1] and later popularized by Paul Larson. Linear hashing allows for the expansion of the hash table one slot at a time. The frequent single slot expansion can very effectively control the length of the collision chain. The cost of hash table expansion is spread out across each hash table insertion operation, as opposed to being incurred all at once.[2] Linear hashing is therefore well suited for interactive applications.


First the initial hash table is set up with some arbitrary initial number of buckets. The following values need to be kept track of:
Bucket collisions can be handled in a variety of ways but it is typical to have space for two items in each bucket and to add more buckets whenever a bucket overflows. More than two items can be used once the implementation is debugged. Addresses are calculated in the following way:
To add a bucket:
The effect of all of this is that the table is split into three sections; the section before 



S


{\displaystyle S}

, the section from 



S


{\displaystyle S}

 to 



N
×

2

L




{\displaystyle N\times 2^{L}}

, and the section after 



N
×

2

L




{\displaystyle N\times 2^{L}}

. The first and last sections are stored using 



H

mod

(


N
×

2

L
+
1


)


{\displaystyle H{\bmod {(}}N\times 2^{L+1})}

 and the middle section is stored using 



H

mod

(


N
×

2

L


)


{\displaystyle H{\bmod {(}}N\times 2^{L})}

. Each time 



S


{\displaystyle S}

 reaches 



N
×

2

L




{\displaystyle N\times 2^{L}}

 the table has doubled in size.
Griswold and Townsend [3] discussed the adoption of linear hashing in the Icon language. They discussed the implementation alternatives of dynamic array algorithm used in linear hashing, and presented performance comparisons using a list of Icon benchmark applications.
Linear hashing is used in the BDB Berkeley database system, which in turn is used by many software systems such as OpenLDAP, using a C implementation derived from the CACM article and first published on the Usenet in 1988 by Esmond Pitt.