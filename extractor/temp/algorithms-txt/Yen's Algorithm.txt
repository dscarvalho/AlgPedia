ABOUT
Yen's algorithm computes single-source K-shortest loopless paths for a graph with non-negative edge cost.[1] The algorithm was published by Jin Y. Yen in 1971 and employs any shortest path algorithm to find the best path, then proceeds to find K − 1 deviations of the best path.[2]
FULL TEXT
Yen's algorithm computes single-source K-shortest loopless paths for a graph with non-negative edge cost.[1] The algorithm was published by Jin Y. Yen in 1971 and employs any shortest path algorithm to find the best path, then proceeds to find K − 1 deviations of the best path.[2]


The algorithm can be broken down into two parts, determining the first k-shortest path, 




A

1




{\displaystyle A^{1}}

, and then determining all other k-shortest paths. It is assumed that the container 



A


{\displaystyle A}

 will hold the k-shortest path, whereas the container 



B


{\displaystyle B}

, will hold the potential k-shortest paths. To determine 




A

1




{\displaystyle A^{1}}

, the shortest path from the source to the sink, any efficient shortest path algorithm can be used.
To find the 




A

k




{\displaystyle A^{k}}

, where 



k


{\displaystyle k}

 ranges from 



2


{\displaystyle 2}

 to 



K


{\displaystyle K}

, the algorithm assumes that all paths from 




A

1




{\displaystyle A^{1}}

 to 




A

k
−
1




{\displaystyle A^{k-1}}

 have previously been found. The 



k


{\displaystyle k}

 iteration can be divided into two processes, finding all the deviations 






A

k




i




{\displaystyle {A^{k}}_{i}}

 and choosing a minimum length path to become 




A

k




{\displaystyle A^{k}}

. Note that in this iteration, 



i


{\displaystyle i}

 ranges from 



1


{\displaystyle 1}

 to 






Q

k




k




{\displaystyle {Q^{k}}_{k}}

.
The first process can be further subdivided into three operations, choosing the 






R

k




i




{\displaystyle {R^{k}}_{i}}

, finding 






S

k




i




{\displaystyle {S^{k}}_{i}}

, and then adding 






A

k




i




{\displaystyle {A^{k}}_{i}}

 to the container 



B


{\displaystyle B}

. The root path, 






R

k




i




{\displaystyle {R^{k}}_{i}}

, is chosen by finding the subpath in 




A

k
−
1




{\displaystyle A^{k-1}}

 that follows the first 



i


{\displaystyle i}

 nodes of 




A

j




{\displaystyle A^{j}}

, where 



j


{\displaystyle j}

 ranges from 



1


{\displaystyle 1}

 to 



k
−
1


{\displaystyle k-1}

. Then, if a path is found, the cost of edge 




d

i
(
i
+
1
)




{\displaystyle d_{i(i+1)}}

 of 




A

j




{\displaystyle A^{j}}

 is set to infinity. Next, the spur path, 






S

k




i




{\displaystyle {S^{k}}_{i}}

, is found by computing the shortest path from the spur node, node 



i


{\displaystyle i}

, to the sink. The removal of previous used edges from 



(
i
)


{\displaystyle (i)}

 to 



(
i
+
1
)


{\displaystyle (i+1)}

 ensures that the spur path is different. 






A

k




i


=



R

k




i


+



S

k




i




{\displaystyle {A^{k}}_{i}={R^{k}}_{i}+{S^{k}}_{i}}

, the addition of the root path and the spur path, is added to 



B


{\displaystyle B}

. Next, the edges that were removed, i.e. had their cost set to infinity, are restored to their initial values.
The second process determines a suitable path for 




A

k




{\displaystyle A^{k}}

 by finding the path in container 



B


{\displaystyle B}

 with the lowest cost. This path is removed from container 



B


{\displaystyle B}

 and inserted into container 



A


{\displaystyle A}

 and the algorithm continues to the next iteration. Note that if the amount of paths in container 



B


{\displaystyle B}

 equal or exceed the amount of k-shortest paths that still need to be found, then the necessary paths of container 



B


{\displaystyle B}

 are added to container 



A


{\displaystyle A}

 and the algorithm is finished.
The algorithm assumes that the Dijkstra algorithm is used to find the shortest path between two nodes, but any shortest path algorithm can be used in its place.
The example uses Yen's K-Shortest Path Algorithm to compute three paths from 



(
C
)


{\displaystyle (C)}

 to 



(
H
)


{\displaystyle (H)}

. Dijkstra's algorithm is used to calculate the best path from 



(
C
)


{\displaystyle (C)}

 to 



(
H
)


{\displaystyle (H)}

, which is 



(
C
)
−
(
E
)
−
(
F
)
−
(
H
)


{\displaystyle (C)-(E)-(F)-(H)}

 with cost 5. This path is appended to container 



A


{\displaystyle A}

 and becomes the first k-shortest path, 




A

1




{\displaystyle A^{1}}

.
Node 



(
C
)


{\displaystyle (C)}

 of 




A

1




{\displaystyle A^{1}}

 becomes the spur node with a root path of itself, 






R

2




1


=
(
C
)


{\displaystyle {R^{2}}_{1}=(C)}

. The edge, 



(
C
)
−
(
E
)


{\displaystyle (C)-(E)}

, is removed because it coincides with the root path and a path in container 



A


{\displaystyle A}

. Dijkstra's algorithm is used to compute the spur path 






S

2




1




{\displaystyle {S^{2}}_{1}}

, which is 



(
C
)
−
(
D
)
−
(
F
)
−
(
H
)


{\displaystyle (C)-(D)-(F)-(H)}

, with a cost of 8. 






A

2




1


=



R

2




1


+



S

2




1


=
(
C
)
−
(
D
)
−
(
F
)
−
(
H
)


{\displaystyle {A^{2}}_{1}={R^{2}}_{1}+{S^{2}}_{1}=(C)-(D)-(F)-(H)}

 is added to container 



B


{\displaystyle B}

 as a potential k-shortest path.
Node 



(
E
)


{\displaystyle (E)}

 of 




A

1




{\displaystyle A^{1}}

 becomes the spur node with 






R

2




2


=
(
C
)
−
(
E
)


{\displaystyle {R^{2}}_{2}=(C)-(E)}

. The edge, 



(
E
)
−
(
F
)


{\displaystyle (E)-(F)}

, is removed because it coincides with the root path and a path in container 



A


{\displaystyle A}

. Dijkstra's algorithm is used to compute the spur path 






S

2




2




{\displaystyle {S^{2}}_{2}}

, which is 



(
E
)
−
(
G
)
−
(
H
)


{\displaystyle (E)-(G)-(H)}

, with a cost of 7. 






A

2




2


=



R

2




2


+



S

2




2


=
(
C
)
−
(
E
)
−
(
G
)
−
(
H
)


{\displaystyle {A^{2}}_{2}={R^{2}}_{2}+{S^{2}}_{2}=(C)-(E)-(G)-(H)}

 is added to container 



B


{\displaystyle B}

 as a potential k-shortest path.
Node 



(
F
)


{\displaystyle (F)}

 of 




A

1




{\displaystyle A^{1}}

 becomes the spur node with a root path, 






R

2




3


=
(
C
)
−
(
E
)
−
(
F
)


{\displaystyle {R^{2}}_{3}=(C)-(E)-(F)}

. The edge, 



(
F
)
−
(
H
)


{\displaystyle (F)-(H)}

, is removed because it coincides with the root path and a path in container 



A


{\displaystyle A}

. Dijkstra's algorithm is used to compute the spur path 






S

2




3




{\displaystyle {S^{2}}_{3}}

, which is 



(
F
)
−
(
G
)
−
(
H
)


{\displaystyle (F)-(G)-(H)}

, with a cost of 8. 






A

2




3


=



R

2




3


+



S

2




3


=
(
C
)
−
(
E
)
−
(
F
)
−
(
G
)
−
(
H
)


{\displaystyle {A^{2}}_{3}={R^{2}}_{3}+{S^{2}}_{3}=(C)-(E)-(F)-(G)-(H)}

 is added to container 



B


{\displaystyle B}

 as a potential k-shortest path.
Of the three paths in container B, 






A

2




2




{\displaystyle {A^{2}}_{2}}

 is chosen to become 




A

2




{\displaystyle A^{2}}

 because it has the lowest cost of 7. This process is continued to the 3rd k-shortest path. However, within this 3rd iteration, note that some spur paths do not exist.And the path that is chosen to become 




A

3




{\displaystyle A^{3}}

 is 



(
C
)
−
(
D
)
−
(
F
)
−
(
H
)


{\displaystyle (C)-(D)-(F)-(H)}

.
To store the edges of the graph, the shortest path list 



A


{\displaystyle A}

, and the potential shortest path list 



B


{\displaystyle B}

, 




N

2


+
K
N


{\displaystyle N^{2}+KN}

 memory addresses are required.[2] At worse case, the every node in the graph has an edge to every other node in the graph, thus 




N

2




{\displaystyle N^{2}}

 addresses are needed. Only 



K
N


{\displaystyle KN}

 addresses are need for both list 



A


{\displaystyle A}

 and 



B


{\displaystyle B}

 because at most only 



K


{\displaystyle K}

 paths will be stored,[2] where it is possible for each path to have 



N


{\displaystyle N}

 nodes.
The time complexity of Yen's algorithm is dependent on the shortest path algorithm used in the computation of the spur paths, so the Dijkstra algorithm is assumed. Dijkstra's algorithm has a worse case time complexity of 



O
(

N

2


)


{\displaystyle O(N^{2})}

, but using a Fibonacci heap it becomes 



O
(
M
+
N
log
⁡
N
)


{\displaystyle O(M+N\log N)}

,[3] where 



M


{\displaystyle M}

 is the amount of edges in the graph. Since Yen's algorithm makes 



K
l


{\displaystyle Kl}

 calls to the Dijkstra in computing the spur paths, where 



l


{\displaystyle l}

 is the length of spur paths. In a condensed graph, the expected value of 



l


{\displaystyle l}

 is 



O
(
log
⁡
N
)


{\displaystyle O(\log N)}

, while the worst case is 



N


{\displaystyle N}

. , the time complexity becomes 



O
(
K
N
(
M
+
N
log
⁡
N
)
)


{\displaystyle O(KN(M+N\log N))}

. [4]
Yen's algorithm can be improved by using a heap to store 



B


{\displaystyle B}

, the set of potential k-shortest paths. Using a heap instead of a list will improve the performance of the algorithm, but not the complexity.[5] One method to slightly decrease complexity is to skip the nodes where there are non-existent spur paths. This case is produced when all the spur paths from a spur node have been used in the previous 




A

k




{\displaystyle A^{k}}

. Also, if container 



B


{\displaystyle B}

 has 



K
−
k


{\displaystyle K-k}

 paths of minimum length, in reference to those in container 



A


{\displaystyle A}

, then they can be extract and inserted into container 



A


{\displaystyle A}

 since no shorter paths will be found.
Eugene Lawler proposed a modification to Yen's algorithm in which duplicates path are not calculated as opposed to the original algorithm where they are calculated and then discarded when they are found to be duplicates.[6] These duplicates paths result from calculating spur paths of nodes in the root of 




A

k




{\displaystyle A^{k}}

. For instance, 




A

k




{\displaystyle A^{k}}

 deviates from 




A

k
−
1




{\displaystyle A^{k-1}}

 at some node 



(
i
)


{\displaystyle (i)}

. Any spur path, 






S

k




j




{\displaystyle {S^{k}}_{j}}

 where 



j
=
0
,
…
,
i


{\displaystyle j=0,\ldots ,i}

, that is calculated will be a duplicate because they have already been calculated during the 



k
−
1


{\displaystyle k-1}

 iteration. Therefore, only spur paths for nodes that were on the spur path of 




A

k
−
1




{\displaystyle A^{k-1}}

 must be calculated, i.e. only 






S

k




h




{\displaystyle {S^{k}}_{h}}

 where 



h


{\displaystyle h}

 ranges from 



(
i
+
1

)

k
−
1




{\displaystyle (i+1)^{k-1}}

 to 



(

Q

k



)

k
−
1




{\displaystyle (Q_{k})^{k-1}}

. To perform this operation for 




A

k




{\displaystyle A^{k}}

, a record is needed to identify the node where 




A

k
−
1




{\displaystyle A^{k-1}}

 branched from 




A

k
−
2




{\displaystyle A^{k-2}}

.