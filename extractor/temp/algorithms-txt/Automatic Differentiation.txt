ABOUT
In mathematics and computer algebra, automatic differentiation (AD), also called algorithmic differentiation or computational differentiation,[1][2] is a set of techniques to numerically evaluate the derivative of a function specified by a computer program. AD exploits the fact that every computer program, no matter how complicated, executes a sequence of elementary arithmetic operations (addition, subtraction, multiplication, division, etc.) and elementary functions (exp, log, sin, cos, etc.). By applying the chain rule repeatedly to these operations, derivatives of arbitrary order can be computed automatically, accurately to working precision, and using at most a small constant factor more arithmetic operations than the original program.
FULL TEXT
In mathematics and computer algebra, automatic differentiation (AD), also called algorithmic differentiation or computational differentiation,[1][2] is a set of techniques to numerically evaluate the derivative of a function specified by a computer program. AD exploits the fact that every computer program, no matter how complicated, executes a sequence of elementary arithmetic operations (addition, subtraction, multiplication, division, etc.) and elementary functions (exp, log, sin, cos, etc.). By applying the chain rule repeatedly to these operations, derivatives of arbitrary order can be computed automatically, accurately to working precision, and using at most a small constant factor more arithmetic operations than the original program.
Automatic differentiation is not:
These classical methods run into problems: symbolic differentiation leads to inefficient code (unless carefully done) and faces the difficulty of converting a computer program into a single expression, while numerical differentiation can introduce round-off errors in the discretization process and cancellation. Both classical methods have problems with calculating higher derivatives, where the complexity and errors increase. Finally, both classical methods are slow at computing the partial derivatives of a function with respect to many inputs, as is needed for gradient-based optimization algorithms. Automatic differentiation solves all of these problems, at the expense of introducing more software dependencies.


Fundamental to AD is the decomposition of differentials provided by the chain rule. For the simple composition y = g(h(x)) = g(w) the chain rule gives
Usually, two distinct modes of AD are presented, forward accumulation (or forward mode) and reverse accumulation (or reverse mode). Forward accumulation specifies that one traverses the chain rule from inside to outside (that is, first one computes dw/dx and then dy/dw, while reverse accumulation has the traversal from outside to inside.
Generally, both forward and reverse accumulation are specific manifestations of applying the operator of program composition, with the appropriate one of the two mappings 



(
w
,
y
)


{\displaystyle (w,y)}

 being fixed.
In forward accumulation AD, one first fixes the independent variable to which differentiation is performed and computes the derivative of each sub-expression recursively. In a pen-and-paper calculation, one can do so by repeatedly substituting the derivative of the inner functions in the chain rule:
This can be generalized to multiple variables as a matrix product of Jacobians.
Compared to reverse accumulation, forward accumulation is very natural and easy to implement as the flow of derivative information coincides with the order of evaluation. One simply augments each variable w with its derivative ẇ (stored as a numerical value, not a symbolic expression),
as denoted by the dot. The derivatives are then computed in sync with the evaluation steps and combined with other derivatives via the chain rule.
As an example, consider the function:
For clarity, the individual sub-expressions have been labeled with the variables wi.
The choice of the independent variable to which differentiation is performed affects the seed values ẇ1 and ẇ2. Suppose one is interested in the derivative of this function with respect to x1. In this case, the seed values should be set to:
With the seed values set, one may then propagate the values using the chain rule as shown in both the table below. Figure 2 shows a pictorial depiction of this process as a computational graph.
To compute the gradient of this example function, which requires the derivatives of f with respect to not only x1 but also x2, one must perform an additional sweep over the computational graph using the seed values 







w
˙




1


=
0
;




w
˙




2


=
1


{\displaystyle {\dot {w}}_{1}=0;{\dot {w}}_{2}=1}

.
The computational complexity of one sweep of forward accumulation is proportional to the complexity of the original code.
Forward accumulation is more efficient than reverse accumulation for functions f : ℝn → ℝm with m ≫ n as only n sweeps are necessary, compared to m sweeps for reverse accumulation.
In reverse accumulation AD, one first fixes the dependent variable to be differentiated and computes the derivative with respect to each sub-expression recursively. In a pen-and-paper calculation, one can perform the equivalent by repeatedly substituting the derivative of the outer functions in the chain rule:
In reverse accumulation, the quantity of interest is the adjoint, denoted with a bar (w̄); it is a derivative of a chosen dependent variable with respect to a subexpression w:
Reverse accumulation traverses the chain rule from outside to inside, or in the case of the computational graph in Figure 3, from top to bottom. The example function is real-valued, and thus there is only one seed for the derivative computation, and only one sweep of the computational graph is needed in order to calculate the (two-component) gradient. This is only half the work when compared to forward accumulation, but reverse accumulation requires the storage of the intermediate variables wi as well as the instructions that produced them in a data structure known as a Wengert list (or "tape"),[3][4] which may represent a significant memory issue if the computational graph is large. This can be mitigated to some extent by storing only a subset of the intermediate variables and then reconstructing the necessary work variables by repeating the evaluations, a technique known as checkpointing.
The operations to compute the derivative using reverse accumulation are shown in the table below (note the reversed order):
The data flow graph of a computation can be manipulated to calculate the gradient of its original calculation. This is done by adding an adjoint node for each primal node, connected by adjoint edges which parallel the primal edges but flow in the opposite direction. The nodes in the adjoint graph represent multiplication by the derivatives of the functions calculated by the nodes in the primal. For instance, addition in the primal causes fanout in the adjoint; fanout in the primal causes addition in the adjoint; a unary function y = f(x) in the primal causes x̄ = ȳ f′(x) in the adjoint; etc.
Reverse accumulation is more efficient than forward accumulation for functions f : ℝn → ℝm with m ≪ n as only m sweeps are necessary, compared to n sweeps for forward accumulation.
Reverse mode AD was first published in 1970 by Seppo Linnainmaa in his master thesis.[5][6][7]
Backpropagation of errors in multilayer perceptrons, a technique used in machine learning, is a special case of reverse mode AD.
Forward and reverse accumulation are just two (extreme) ways of traversing the chain rule. The problem of computing a full Jacobian of f : ℝn → ℝm with a minimum number of arithmetic operations is known as the optimal Jacobian accumulation (OJA) problem, which is NP-complete.[8] Central to this proof is the idea that there may exist algebraic dependencies between the local partials that label the edges of the graph. In particular, two or more edge labels may be recognized as equal. The complexity of the problem is still open if it is assumed that all edge labels are unique and algebraically independent.
Forward mode automatic differentiation is accomplished by augmenting the algebra of real numbers and obtaining a new arithmetic. An additional component is added to every number which will represent the derivative of a function at the number, and all arithmetic operators are extended for the augmented algebra. The augmented algebra is the algebra of dual numbers. This approach was generalized by the theory of operational calculus on programming spaces (see Analytic programming space), through tensor algebra of the dual space.
Replace every number 




x


{\displaystyle \,x}

 with the number 



x
+

x
′

ε


{\displaystyle x+x'\varepsilon }

, where 




x
′



{\displaystyle x'}

 is a real number, but 



ε


{\displaystyle \varepsilon }

 is an abstract number with the property 




ε

2


=
0


{\displaystyle \varepsilon ^{2}=0}

 (an infinitesimal; see Smooth infinitesimal analysis). Using only this, we get for the regular arithmetic
and likewise for subtraction and division.
Now, we may calculate polynomials in this augmented arithmetic. If 



P
(
x
)
=

p

0


+

p

1


x
+

p

2



x

2


+
⋯
+

p

n



x

n




{\displaystyle P(x)=p_{0}+p_{1}x+p_{2}x^{2}+\cdots +p_{n}x^{n}}

, then








P
(
x
+

x
′

ε
)



=

p

0


+

p

1


(
x
+

x
′

ε
)
+
⋯
+

p

n


(
x
+

x
′

ε

)

n








=

p

0


+

p

1


x
+
⋯
+

p

n



x

n


+

p

1



x
′

ε
+
2

p

2


x

x
′

ε
+
⋯
+
n

p

n



x

n
−
1



x
′

ε






=
P
(
x
)
+

P

(
1
)


(
x
)

x
′

ε






{\displaystyle {\begin{aligned}P(x+x'\varepsilon )&=p_{0}+p_{1}(x+x'\varepsilon )+\cdots +p_{n}(x+x'\varepsilon )^{n}\\&=p_{0}+p_{1}x+\cdots +p_{n}x^{n}+p_{1}x'\varepsilon +2p_{2}xx'\varepsilon +\cdots +np_{n}x^{n-1}x'\varepsilon \\&=P(x)+P^{(1)}(x)x'\varepsilon \end{aligned}}}


where 




P

(
1
)




{\displaystyle P^{(1)}}

 denotes the derivative of 



P


{\displaystyle P}

 with respect to its first argument, and 




x
′



{\displaystyle x'}

, called a seed, can be chosen arbitrarily.
The new arithmetic consists of ordered pairs, elements written 



⟨
x
,

x
′

⟩


{\displaystyle \langle x,x'\rangle }

, with ordinary arithmetics on the first component, and first order differentiation arithmetic on the second component, as described above. Extending the above results on polynomials to analytic functions we obtain a list of the basic arithmetic and some standard functions for the new arithmetic:
and in general for the primitive function 



g


{\displaystyle g}

,
where 




g

u




{\displaystyle g_{u}}

 and 




g

v




{\displaystyle g_{v}}

 are the derivatives of 



g


{\displaystyle g}

 with respect to its first and second arguments, respectively.
When a binary basic arithmetic operation is applied to mixed arguments—the pair 



⟨
u
,

u
′

⟩


{\displaystyle \langle u,u'\rangle }

 and the real number 



c


{\displaystyle c}

—the real number is first lifted to 



⟨
c
,
0
⟩


{\displaystyle \langle c,0\rangle }

. The derivative of a function 



f
:

R

→

R



{\displaystyle f:\mathbb {R} \rightarrow \mathbb {R} }

 at the point 




x

0




{\displaystyle x_{0}}

 is now found by calculating 



f
(
⟨

x

0


,
1
⟩
)


{\displaystyle f(\langle x_{0},1\rangle )}

 using the above arithmetic, which gives 



⟨
f
(

x

0


)
,

f
′

(

x

0


)
⟩


{\displaystyle \langle f(x_{0}),f'(x_{0})\rangle }

 as the result.
Multivariate functions can be handled with the same efficiency and mechanisms as univariate functions by adopting a directional derivative operator. That is, if it is sufficient to compute 




y
′

=
∇
f
(
x
)
⋅

x
′



{\displaystyle y'=\nabla f(x)\cdot x'}

, the directional derivative 




y
′

∈


R


m




{\displaystyle y'\in \mathbb {R} ^{m}}

 of 



f
:


R


n


→


R


m




{\displaystyle f:\mathbb {R} ^{n}\rightarrow \mathbb {R} ^{m}}

 at 



x
∈


R


n




{\displaystyle x\in \mathbb {R} ^{n}}

 in the direction 




x
′

∈


R


n




{\displaystyle x'\in \mathbb {R} ^{n}}

, this may be calculated as 



(
⟨

y

1


,

y

1

′

⟩
,
…
,
⟨

y

m


,

y

m

′

⟩
)
=
f
(
⟨

x

1


,

x

1

′

⟩
,
…
,
⟨

x

n


,

x

n

′

⟩
)


{\displaystyle (\langle y_{1},y'_{1}\rangle ,\ldots ,\langle y_{m},y'_{m}\rangle )=f(\langle x_{1},x'_{1}\rangle ,\ldots ,\langle x_{n},x'_{n}\rangle )}

 using the same arithmetic as above. If all the elements of 



∇
f


{\displaystyle \nabla f}

 are desired, then 



n


{\displaystyle n}

 function evaluations are required. Note that in many optimization applications, the directional derivative is indeed sufficient.
The above arithmetic can be generalized to calculate second order and higher derivatives of multivariate functions. However, the arithmetic rules quickly grow very complicated: complexity will be quadratic in the highest derivative degree. Instead, truncated Taylor polynomial algebra can be used. The resulting arithmetic, defined on generalized dual numbers, allows to efficiently compute using functions as if they were a new data type. Once the Taylor polynomial of a function is known, the derivatives are easily extracted. A rigorous, general formulation is achieved through the tensor series expansion using operational calculus on programming spaces. Currently there are a few software projects that implement the Taylor polynomial truncated algebra. AuDi, CTaylor and COSY infinity. Only the first two are open source.
Operational calculus on programming spaces [9] generalizes concepts of automatic differentiation and provides a framework that enables analytic conclusions about programs through algebraic means. This formulation using Tensor algebra is a broad generalization of the dual numbers approach. Theory allows computations on the operator level, before the operator is applied to a particular program, favoring efficient implementation.
Operational calculus on programming spaces [9] was first proposed by Žiga Sajovic, mentored by Martin Vuk, to unify existing approaches under a single theory and provide a rigorous framework for program analysis through calculus.
A differentiable programming space 






P



0




{\displaystyle {\mathcal {P}}_{0}}

 is any subspace of 






F



0


:


V


→


V




{\displaystyle {\mathcal {F}}_{0}:{\mathcal {V}}\to {\mathcal {V}}}

 such that
When all elements of 






P



0




{\displaystyle {\mathcal {P}}_{0}}

 are analytic, we call 






P



0




{\displaystyle {\mathcal {P}}_{0}}

 an analytic programming space.
Proofs can be found in.[9]
This means that we can represent calculation of derivatives of the map 



P
:


V


→


V




{\displaystyle P:{\mathcal {V}}\to {\mathcal {V}}}

, with only one mapping 



τ


{\displaystyle \tau }

. We define the operator 




τ

n




{\displaystyle \tau _{n}}

 as a direct sum of operators
The image 




τ

k


P
(

x

)


{\displaystyle \tau _{k}P(\mathbf {x} )}

 is a multitensor of order 



k


{\displaystyle k}

, which is a direct sum of the maps value and all derivatives of order 



n
≤
k


{\displaystyle n\leq k}

, all evaluated at the point 




x



{\displaystyle \mathbf {x} }

:
The operator 




τ

n




{\displaystyle \tau _{n}}

 satisfies the recursive relation.
that can be used to recursively construct programming spaces of arbitrary order. Only explicit knowledge of 



τ
:



P



0


→



P



1




{\displaystyle \tau :{\mathcal {P}}_{0}\to {\mathcal {P}}_{1}}

 is required for the construction of 






P



n




{\displaystyle {\mathcal {P}}_{n}}

 from 






P



1




{\displaystyle {\mathcal {P}}_{1}}

, which is evident from the above theorem.
The paper [9] proposed an abstract computational model, a virtual machine capable of constructing and implementing the theory. Such a machine provides a framework for analytic study of algorithmic procedures through algebraic means.
This claim allows a simple definition of such a machine.
An illustrative open source implementation dCpp is available, closely following the theorems, intended as an educational guide.
Expansion into a series offers valuable insights into programs through methods of analysis.
There exists a space spanned by the set 






D



n


=
{

∂

k


;

0
≤
k
≤
n
}


{\displaystyle {\mathcal {D}}^{n}=\{\partial ^{k};\quad 0\leq k\leq n\}}

 over a field 



K


{\displaystyle K}

. Thus, the expression
is well defined. The operator 




e

h
∂




{\displaystyle e^{h\partial }}

 is a mapping between function spaces
It also defines a map
by taking the image of the map 




e

h
∂


(
P
)


{\displaystyle e^{h\partial }(P)}

 at a certain point 




v

∈


V




{\displaystyle \mathbf {v} \in {\mathcal {V}}}

.
We may construct a map from the space of programs, to the space of polynomials. Note that the space of multivariate polynomials 





V


→
K


{\displaystyle {\mathcal {V}}\to K}

 is isomorphic to symmetric algebra 



S
(



V



∗


)


{\displaystyle S({\mathcal {V}}^{*})}

, which is in turn a quotient of tensor algebra 



T
(



V



∗


)


{\displaystyle T({\mathcal {V}}^{*})}

. To any element of 





V


⊗
T
(



V



∗


)


{\displaystyle {\mathcal {V}}\otimes T({\mathcal {V}}^{*})}

 one can attach corresponding element of 





V


⊗
S
(



V



i
∗


)


{\displaystyle {\mathcal {V}}\otimes S({\mathcal {V}}^{i*})}

 namely a polynomial map 





V


→


V




{\displaystyle {\mathcal {V}}\to {\mathcal {V}}}

. Thus, we consider the completion of the symmetric algebra 



S
(



V



∗


)


{\displaystyle S({\mathcal {V}}^{*})}

 as the Formal power series 





S


(



V



∗


)


{\displaystyle {\mathcal {S}}({\mathcal {V}}^{*})}

, which is in turn isomorphic to a quotient of tensor series algebra 





T


(



V



∗


)


{\displaystyle {\mathcal {T}}({\mathcal {V}}^{*})}

, arriving at
For any element 





v


0


∈


V




{\displaystyle \mathbf {v} _{0}\in {\mathcal {V}}}

, the expression 




e

h
∂


(
⋅
,


v


0


)


{\displaystyle e^{h\partial }(\cdot ,\mathbf {v} _{0})}

 is a map 





P


→


V


⊗


S


(



V



∗


)


{\displaystyle {\mathcal {P}}\to {\mathcal {V}}\otimes {\mathcal {S}}({\mathcal {V}}^{*})}

, mapping a program to a Formal power series. We can express the correspondence between multi-tensors in 





V


⊗
T
(



V



∗


)


{\displaystyle {\mathcal {V}}\otimes T({\mathcal {V}}^{*})}

 and polynomial maps 





V


→


V




{\displaystyle {\mathcal {V}}\to {\mathcal {V}}}

 given by multiple contractions for all possible indices.
Proof can be found in.[9] Evaluated at 



h
=
1


{\displaystyle h=1}

, the operator is a generalization of the Shift operator widely used in physics. For a specific 




v

0


∈


V




{\displaystyle v_{0}\in {\mathcal {V}}}

 it is heron denoted by
When the choice of 




v

0


∈


V




{\displaystyle v_{0}\in {\mathcal {V}}}

 is arbitrary, we omit it from expressions for brevity.
Theory offers a generalization of both forward and reverse mode of automatic differentiation to arbitrary order, under a single invariant operator in the theory. This condenses complex notions to simple expressions allowing meaningful manipulations before being applied to a particular programming space.
Proof can be found in.[9]
Both forward and reverse mode (generalized to arbitrary order) are obtainable using this operator, by fixing the appropriate one of the two maps. This generalizes both concepts under a single operator in the theory. For example, by considering projections of the operator onto the space spanned by 





D


=
{
1
,
∂
}


{\displaystyle {\mathcal {D}}=\{1,\partial \}}

, and fixing the second map 



g


{\displaystyle g}

, we retrieve the basic first order forward mode of automatic differentiation, or reverse mode, by fixing 



f


{\displaystyle f}

.
Thus the operator alleviates the need for explicit implementation of the higher order chain rule (see Faà di Bruno's formula), as it is encoded in the structure of the operator itself, which can be efficiently implemented by manipulating its generating map (see [9]).
It is useful to be able to use the 



k


{\displaystyle k}

-th derivative of a program 



P
∈


P




{\displaystyle P\in {\mathcal {P}}}

 as part of a different differentiable program 




P

1




{\displaystyle P_{1}}

. As such, we must be able to treat the derivative itself as a differentiable program 




P

′
k


∈


P




{\displaystyle P^{\prime k}\in {\mathcal {P}}}

, while only coding the original program 



P


{\displaystyle P}

.
By the above Theorem, 



n


{\displaystyle n}

-differentiable 



k


{\displaystyle k}

-th derivatives of a program 



P
∈



P



0




{\displaystyle P\in {\mathcal {P}}_{0}}

 can be extracted by
Thus, we gained the ability of writing a differentiable program acting on derivatives of another program, stressed as crucial by other authors.[10]
Forward-mode AD is implemented by a nonstandard interpretation of the program in which real numbers are replaced by dual numbers, constants are lifted to dual numbers with a zero epsilon coefficient, and the numeric primitives are lifted to operate on dual numbers. This nonstandard interpretation is generally implemented using one of two strategies: source code transformation or operator overloading.
The source code for a function is replaced by an automatically generated source code that includes statements for calculating the derivatives interleaved with the original instructions.
Source code transformation can be implemented for all programming languages, and it is also easier for the compiler to do compile time optimizations. However, the implementation of the AD tool itself is more difficult.
Operator overloading is a possibility for source code written in a language supporting it. Objects for real numbers and elementary mathematical operations must be overloaded to cater for the augmented arithmetic depicted above. This requires no change in the form or sequence of operations in the original source code for the function to be differentiated, but often requires changes in basic data types for numbers and vectors to support overloading and often also involves the insertion of special flagging operations.
Operator overloading for forward accumulation is easy to implement, and also possible for reverse accumulation. However, current compilers lag behind in optimizing the code when compared to forward accumulation.
Operator overloading, for both forward and reverse accumulation, can be well-suited to applications where the objects are vectors of real numbers rather than scalars. This is because the tape then comprises vector operations; this can facilitate computationally efficient implementations where each vector operation performs many scalar operations. Vector adjoint algorithmic differentiation (vector AAD) techniques may be used, for example, to differentiate values calculated by Monte-Carlo simulation.