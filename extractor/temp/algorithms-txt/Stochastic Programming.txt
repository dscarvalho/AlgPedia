ABOUT
In the field of mathematical optimization, stochastic programming is a framework for modeling optimization problems that involve uncertainty. Whereas deterministic optimization problems are formulated with known parameters, real world problems almost invariably include some unknown parameters. When the parameters are known only within certain bounds, one approach to tackling such problems is called robust optimization. Here the goal is to find a solution which is feasible for all such data and optimal in some sense. Stochastic programming models are similar in style but take advantage of the fact that probability distributions governing the data are known or can be estimated. The goal here is to find some policy that is feasible for all (or almost all) the possible data instances and maximizes the expectation of some function of the decisions and the random variables. More generally, such models are formulated, solved analytically or numerically, and analyzed in order to provide useful information to a decision-maker.[1]
FULL TEXT
In the field of mathematical optimization, stochastic programming is a framework for modeling optimization problems that involve uncertainty. Whereas deterministic optimization problems are formulated with known parameters, real world problems almost invariably include some unknown parameters. When the parameters are known only within certain bounds, one approach to tackling such problems is called robust optimization. Here the goal is to find a solution which is feasible for all such data and optimal in some sense. Stochastic programming models are similar in style but take advantage of the fact that probability distributions governing the data are known or can be estimated. The goal here is to find some policy that is feasible for all (or almost all) the possible data instances and maximizes the expectation of some function of the decisions and the random variables. More generally, such models are formulated, solved analytically or numerically, and analyzed in order to provide useful information to a decision-maker.[1]
As an example, consider two-stage linear programs. Here the decision maker takes some action in the first stage, after which a random event occurs affecting the outcome of the first-stage decision. A recourse decision can then be made in the second stage that compensates for any bad effects that might have been experienced as a result of the first-stage decision. The optimal policy from such a model is a single first-stage policy and a collection of recourse decisions (a decision rule) defining which second-stage action should be taken in response to each random outcome.
Stochastic programming has applications in a broad range of areas ranging from finance to transportation to energy optimization.[2][3] This article includes an example of optimizing an investment portfolio over time.


The basic idea of two-stage stochastic programming is that (optimal) decisions should be based on data available at the time the decisions are made and should not depend on future observations. Two-stage formulation is widely used in stochastic programming. The general formulation of a two-stage stochastic programming problem is given by: 




min

x
∈
X


{
g
(
x
)
=
f
(
x
)
+
E
[
Q
(
x
,
ξ
)
]
}


{\displaystyle \min _{x\in X}\{g(x)=f(x)+E[Q(x,\xi )]\}}

 where 



Q
(
x
,
ξ
)


{\displaystyle Q(x,\xi )}

 is the optimal value of the second-stage problem 




min

y


{
q
(
y
,
ξ
)


|


T
(
ξ
)
x
+
W
(
ξ
)
y
=
h
(
ξ
)
}
.


{\displaystyle \min _{y}\{q(y,\xi )\,|\,T(\xi )x+W(\xi )y=h(\xi )\}.}


The classical two-stage linear stochastic programming problems can be formulated as 








min

x
∈


R


n






g
(
x
)
=

c

T


x
+
E
[
Q
(
x
,
ξ
)
]






subject to



A
x
=
b






x
≥
0







{\displaystyle {\begin{array}{llr}\min \limits _{x\in \mathbb {R} ^{n}}&g(x)=c^{T}x+E[Q(x,\xi )]&\\{\text{subject to}}&Ax=b&\\&x\geq 0&\end{array}}}


where 



Q
(
x
,
ξ
)


{\displaystyle Q(x,\xi )}

 is the optimal value of the second-stage problem 








min

y
∈


R


m






q
(
ξ

)

T


y






subject to



T
(
ξ
)
x
+
W
(
ξ
)
y
=
h
(
ξ
)






y
≥
0







{\displaystyle {\begin{array}{llr}\min \limits _{y\in \mathbb {R} ^{m}}&q(\xi )^{T}y&\\{\text{subject to}}&T(\xi )x+W(\xi )y=h(\xi )&\\&y\geq 0&\end{array}}}


In such formulation 



x
∈


R


n




{\displaystyle x\in \mathbb {R} ^{n}}

 is the first-stage decision variable vector, 



y
∈


R


m




{\displaystyle y\in \mathbb {R} ^{m}}

 is the second-stage decision variable vector, and 



ξ
(
q
,
T
,
W
,
h
)


{\displaystyle \xi (q,T,W,h)}

 contains the data of the second-stage problem. In this formulation, at the first stage we have to make a "here-and-now" decision 



x


{\displaystyle x}

 before the realization of the uncertain data 



ξ


{\displaystyle \xi }

, viewed as a random vector, is known. At the second stage, after a realization of 



ξ


{\displaystyle \xi }

 becomes available, we optimize our behavior by solving an appropriate optimization problem.
At the first stage we optimize (minimize in the above formulation) the cost 




c

T


x


{\displaystyle c^{T}x}

 of the first-stage decision plus the expected cost of the (optimal) second-stage decision. We can view the second-stage problem simply as an optimization problem which describes our supposedly optimal behavior when the uncertain data is revealed, or we can consider its solution as a recourse action where the term 



W
y


{\displaystyle Wy}

 compensates for a possible inconsistency of the system 



T
x
≤
h


{\displaystyle Tx\leq h}

 and 




q

T


y


{\displaystyle q^{T}y}

 is the cost of this recourse action.
The considered two-stage problem is linear because the objective functions and the constraints are linear. Conceptually this is not essential and one can consider more general two-stage stochastic programs. For example, if the first-stage problem is integer, one could add integrality constraints to the first-stage problem so that the feasible set is discrete. Non-linear objectives and constraints could also be incorporated if needed.[4]
The formulation of the above two-stage problem assumes that the second-stage data 



ξ


{\displaystyle \xi }

 can be modeled as a random vector with a known probability distribution (not just uncertain). This would be justified in many situations. For example 



ξ


{\displaystyle \xi }

 could be information derived from historical data and the distribution does not significantly change over the considered period of time. In such situations one may reliably estimate the required probability distribution and the optimization on average could be justified by the Law of Large Numbers. Another example is that 



ξ


{\displaystyle \xi }

 could be realizations of a simulation model whose outputs are stochastic. The empirical distribution of the sample could be used as an approximation to the true but unknown output distribution.
To solve the two-stage stochastic problem numerically, one often needs to assume that the random vector 



ξ


{\displaystyle \xi }

 has a finite number of possible realizations, called scenarios, say 




ξ

1


,
…
,

ξ

K




{\displaystyle \xi _{1},\dots ,\xi _{K}}

, with respective probability masses 




p

1


,
…
,

p

K




{\displaystyle p_{1},\dots ,p_{K}}

. Then the expectation in the first-stage problem's objective function can be written as the summation: 



E
[
Q
(
x
,
ξ
)
]
=

∑

k
=
1


K



p

k


Q
(
x
,

ξ

k


)


{\displaystyle E[Q(x,\xi )]=\sum \limits _{k=1}^{K}p_{k}Q(x,\xi _{k})}

 and, moreover, the two-stage problem can be formulated as one large linear programming problem (this is called the deterministic equivalent of the original problem, see section § Deterministic equivalent of a stochastic problem).
When 



ξ


{\displaystyle \xi }

 has an infinite (or very large) number of possible realizations the standard approach is then to represent this distribution by scenarios. This approach raises three questions, namely:
These questions are not independent. For example, the number of scenarios constructed will affect both the tractability of the deterministic equivalent and the quality of the obtained solutions.
A stochastic linear program is a specific instance of the classical two-stage stochastic program. A stochastic LP is built from a collection of multi-period linear programs (LPs), each having the same structure but somewhat different data. The 




k

t
h




{\displaystyle k^{th}}

 two-period LP, representing the 




k

t
h




{\displaystyle k^{th}}

 scenario, may be regarded as having the following form:









Minimize




f

T


x


+



g

T


y


+



h

k


T



z

k









subject to



T
x


+


U
y




=


r








V

k


y


+



W

k



z

k




=



s

k







x


,


y


,



z

k




≥


0






{\displaystyle {\begin{array}{lccccccc}{\text{Minimize}}&f^{T}x&+&g^{T}y&+&h_{k}^{T}z_{k}&&\\{\text{subject to}}&Tx&+&Uy&&&=&r\\&&&V_{k}y&+&W_{k}z_{k}&=&s_{k}\\&x&,&y&,&z_{k}&\geq &0\end{array}}}


The vectors 



x


{\displaystyle x}

 and 



y


{\displaystyle y}

 contain the first-period variables, whose values must be chosen immediately. The vector 




z

k




{\displaystyle z_{k}}

 contains all of the variables for subsequent periods. The constraints 



T
x
+
U
y
=
r


{\displaystyle Tx+Uy=r}

 involve only first-period variables and are the same in every scenario. The other constraints involve variables of later periods and differ in some respects from scenario to scenario, reflecting uncertainty about the future.
Note that solving the 




k

t
h




{\displaystyle k^{th}}

 two-period LP is equivalent to assuming the 




k

t
h




{\displaystyle k^{th}}

 scenario in the second period with no uncertainty. In order to incorporate uncertainties in the second stage, one should assign probabilities to different scenarios and solve the corresponding deterministic equivalent.
With a finite number of scenarios, two-stage stochastic linear programs can be modelled as large linear programming problems. This formulation is often called the deterministic equivalent linear program, or abbreviated to deterministic equivalent. (Strictly speaking a deterministic equivalent is any mathematical program that can be used to compute the optimal first-stage decision, so these will exist for continuous probability distributions as well, when one can represent the second-stage cost in some closed form.) For example, to form the deterministic equivalent to the above stochastic linear program, we assign a probability 




p

k




{\displaystyle p_{k}}

 to each scenario 



k
=
1
,
…
,
K


{\displaystyle k=1,\dots ,K}

. Then we can minimize the expected value of the objective, subject to the constraints from all scenarios:









Minimize




f

⊤


x


+



g

⊤


y


+



p

1



h

1


⊤



z

1




+



p

2



h

2


T



z

2




+


⋯


+



p

K



h

K


⊤



z

K









subject to



T
x


+


U
y










=


r








V

1


y


+



W

1



z

1










=



s

1










V

2


y




+



W

2



z

2








=



s

2









⋮







⋱





⋮








V

K


y








+



W

K



z

K




=



s

K







x


,


y


,



z

1




,



z

2




,


…


,



z

K




≥


0






{\displaystyle {\begin{array}{lccccccccccccc}{\text{Minimize}}&f^{\top }x&+&g^{\top }y&+&p_{1}h_{1}^{\top }z_{1}&+&p_{2}h_{2}^{T}z_{2}&+&\cdots &+&p_{K}h_{K}^{\top }z_{K}&&\\{\text{subject to}}&Tx&+&Uy&&&&&&&&&=&r\\&&&V_{1}y&+&W_{1}z_{1}&&&&&&&=&s_{1}\\&&&V_{2}y&&&+&W_{2}z_{2}&&&&&=&s_{2}\\&&&\vdots &&&&&&\ddots &&&&\vdots \\&&&V_{K}y&&&&&&&+&W_{K}z_{K}&=&s_{K}\\&x&,&y&,&z_{1}&,&z_{2}&,&\ldots &,&z_{K}&\geq &0\\\end{array}}}


We have a different vector 




z

k




{\displaystyle z_{k}}

 of later-period variables for each scenario 



k


{\displaystyle k}

. The first-period variables 



x


{\displaystyle x}

 and 



y


{\displaystyle y}

 are the same in every scenario, however, because we must make a decision for the first period before we know which scenario will be realized. As a result, the constraints involving just 



x


{\displaystyle x}

 and 



y


{\displaystyle y}

 need only be specified once, while the remaining constraints must be given separately for each scenario.
In practice it might be possible to construct scenarios by eliciting experts' opinions on the future. The number of constructed scenarios should be relatively modest so that the obtained deterministic equivalent can be solved with reasonable computational effort. It is often claimed that a solution that is optimal using only a few scenarios provides more adaptable plans than one that assumes a single scenario only. In some cases such a claim could be verified by a simulation. In theory some measures of guarantee that an obtained solution solves the original problem with reasonable accuracy. Typically in applications only the first stage optimal solution 




x

∗




{\displaystyle x^{*}}

 has a practical value since almost always a "true" realization of the random data will be different from the set of constructed (generated) scenarios.
Suppose 



ξ


{\displaystyle \xi }

 contains 



d


{\displaystyle d}

 independent random components, each of which has three possible realizations (for example, future realizations of each random parameters are classified as low, medium and high), then the total number of scenarios is 



K
=

3

d




{\displaystyle K=3^{d}}

. Such exponential growth of the number of scenarios makes model development using expert opinion very difficult even for reasonable size 



d


{\displaystyle d}

. The situation becomes even worse if some random components of 



ξ


{\displaystyle \xi }

 have continuous distributions.
A common approach to reduce the scenario set to a manageable size is by using Monte Carlo simulation. Suppose the total number of scenarios is very large or even infinite. Suppose further that we can generate a sample 




ξ

1


,

ξ

2


,
…
,

ξ

N




{\displaystyle \xi ^{1},\xi ^{2},\dots ,\xi ^{N}}

 of 



N


{\displaystyle N}

 replications of the random vector 



ξ


{\displaystyle \xi }

. Usually the sample is assumed to be independent identically distributed (i.i.d sample). Given a sample, the expectation function 



q
(
x
)
=
E
[
Q
(
x
,
ξ
)
]


{\displaystyle q(x)=E[Q(x,\xi )]}

 is approximated by the sample average








q
^




N


(
x
)
=


1
N



∑

j
=
1


N


Q
(
x
,

ξ

j


)


{\displaystyle {\hat {q}}_{N}(x)={\frac {1}{N}}\sum _{j=1}^{N}Q(x,\xi ^{j})}


and consequently the first-stage problem is given by












g
^




N


(
x
)
=



min

x
∈


R


n







c

T


x
+


1
N



∑

j
=
1


N


Q
(
x
,

ξ

j


)







subject to



A
x


=


b






x


≥


0






{\displaystyle {\begin{array}{rlrrr}{\hat {g}}_{N}(x)=&\min \limits _{x\in \mathbb {R} ^{n}}&c^{T}x+{\frac {1}{N}}\sum _{j=1}^{N}Q(x,\xi ^{j})&\\&{\text{subject to}}&Ax&=&b\\&&x&\geq &0\end{array}}}


This formulation is known as the Sample Average Approximation method. The SAA problem is a function of the considered sample and in that sense is random. For a given sample 




ξ

1


,

ξ

2


,
…
,

ξ

N




{\displaystyle \xi ^{1},\xi ^{2},\dots ,\xi ^{N}}

 the SAA problem is of the same form as a two-stage stochastic linear programming problem with the scenarios 




ξ

j




{\displaystyle \xi ^{j}}

., 



j
=
1
,
…
,
N


{\displaystyle j=1,\dots ,N}

, each taken with the same probability 




p

j


=


1
N




{\displaystyle p_{j}={\frac {1}{N}}}

.
Consider the following stochastic programming problem
Here 



X


{\displaystyle X}

 is a nonempty closed subset of 





R


n




{\displaystyle \mathbb {R} ^{n}}

, 



ξ


{\displaystyle \xi }

 is a random vector whose probability distribution 



P


{\displaystyle P}

 is supported on a set 



Ξ
⊂


R


d




{\displaystyle \Xi \subset \mathbb {R} ^{d}}

, and 



Q
:
X
×
Ξ
→

R



{\displaystyle Q:X\times \Xi \rightarrow \mathbb {R} }

. In the framework of two-stage stochastic programming, 



Q
(
x
,
ξ
)


{\displaystyle Q(x,\xi )}

 is given by the optimal value of the corresponding second-stage problem.
Assume that 



g
(
x
)


{\displaystyle g(x)}

 is well defined and finite valued for all 



x
∈
X


{\displaystyle x\in X}

. This implies that for every 



x
∈
X


{\displaystyle x\in X}

 the value 



Q
(
x
,
ξ
)


{\displaystyle Q(x,\xi )}

 is finite almost surely.
Suppose that we have a sample 




ξ

1


,
…
,

ξ

N




{\displaystyle \xi ^{1},\dots ,\xi ^{N}}

 of 



N


{\displaystyle N}

realizations of the random vector 



ξ


{\displaystyle \xi }

. This random sample can be viewed as historical data of 



N


{\displaystyle N}

 observations of 



ξ


{\displaystyle \xi }

, or it can be generated by Monte Carlo sampling techniques. Then we can formulate a corresponding sample average approximation
By the Law of Large Numbers we have that, under some regularity conditions 





1
N



∑

j
=
1


N


Q
(
x
,

ξ

j


)


{\displaystyle {\frac {1}{N}}\sum _{j=1}^{N}Q(x,\xi ^{j})}

 converges pointwise with probability 1 to 



E
[
Q
(
x
,
ξ
)
]


{\displaystyle E[Q(x,\xi )]}

 as 



N
→
∞


{\displaystyle N\rightarrow \infty }

. Moreover, under mild additional conditions the convergence is uniform. We also have 



E
[




g
^




N


(
x
)
]
=
g
(
x
)


{\displaystyle E[{\hat {g}}_{N}(x)]=g(x)}

, i.e., 







g
^




N


(
x
)


{\displaystyle {\hat {g}}_{N}(x)}

 is an unbiased estimator of 



g
(
x
)


{\displaystyle g(x)}

. Therefore it is natural to expect that the optimal value and optimal solutions of the SAA problem converge to their counterparts of the true problem as 



N
→
∞


{\displaystyle N\rightarrow \infty }

.
Suppose the feasible set 



X


{\displaystyle X}

 of the SAA problem is fixed, i.e., it is independent of the sample. Let 




ϑ

∗




{\displaystyle \vartheta ^{*}}

 and 




S

∗




{\displaystyle S^{*}}

 be the optimal value and the set of optimal solutions, respectively, of the true problem and let 







ϑ
^




N




{\displaystyle {\hat {\vartheta }}_{N}}

 and 







S
^




N




{\displaystyle {\hat {S}}_{N}}

 be the optimal value and the set of optimal solutions, respectively, of the SAA problem.
In some situations the feasible set 



X


{\displaystyle X}

 of the SAA problem is estimated, then the corresponding SAA problem takes the form
where 




X

N




{\displaystyle X_{N}}

 is a subset of 





R


n




{\displaystyle \mathbb {R} ^{n}}

 depending on the sample and therefore is random. Nevertheless consistency results for SAA estimators can still be derived under some additional assumptions:
Suppose the sample 




ξ

1


,
…
,

ξ

N




{\displaystyle \xi ^{1},\dots ,\xi ^{N}}

 is i.i.d. and fix a point 



x
∈
X


{\displaystyle x\in X}

. Then the sample average estimator 







g
^




N


(
x
)


{\displaystyle {\hat {g}}_{N}(x)}

, of 



g
(
x
)


{\displaystyle g(x)}

, is unbiased and has variance 





1
N



σ

2


(
x
)


{\displaystyle {\frac {1}{N}}\sigma ^{2}(x)}

, where 




σ

2


(
x
)
:=
V
a
r
[
Q
(
x
,
ξ
)
]


{\displaystyle \sigma ^{2}(x):=Var[Q(x,\xi )]}

 is supposed to be finite. Moreover, by the central limit theorem we have that
where 





→


D






{\displaystyle {\xrightarrow {\mathcal {D}}}}

 denotes convergence in distribution and 




Y

x




{\displaystyle Y_{x}}

 has a normal distribution with mean 



0


{\displaystyle 0}

 and variance 




σ

2


(
x
)


{\displaystyle \sigma ^{2}(x)}

, written as 





N


(
0
,

σ

2


(
0
)
)


{\displaystyle {\mathcal {N}}(0,\sigma ^{2}(0))}

.
In other words, 







g
^




N


(
x
)


{\displaystyle {\hat {g}}_{N}(x)}

 has asymptotically normal distribution, i.e., for large 



N


{\displaystyle N}

, 







g
^




N


(
x
)


{\displaystyle {\hat {g}}_{N}(x)}

 has approximately normal distribution with mean 



g
(
x
)


{\displaystyle g(x)}

 and variance 





1
N



σ

2


(
x
)


{\displaystyle {\frac {1}{N}}\sigma ^{2}(x)}

. This leads to the following (approximate) 



100
(
1
−
α
)


{\displaystyle 100(1-\alpha )}

% confidence interval for 



f
(
x
)


{\displaystyle f(x)}

:
where 




z

α

/

2


:=

Φ

−
1


(
1
−
α

/

2
)


{\displaystyle z_{\alpha /2}:=\Phi ^{-1}(1-\alpha /2)}

 (here 



Φ
(
⋅
)


{\displaystyle \Phi (\cdot )}

 denotes the cdf of the standard normal distribution) and
is the sample variance estimate of 




σ

2


(
x
)


{\displaystyle \sigma ^{2}(x)}

. That is, the error of estimation of 



g
(
x
)


{\displaystyle g(x)}

 is (stochastically) of order 



O
(


N


)


{\displaystyle O({\sqrt {N}})}

.
The following is an example from finance of multi-stage stochastic programming. Suppose that at time 



t
=
0


{\displaystyle t=0}

 we have initial capital 




W

0




{\displaystyle W_{0}}

 to invest in 



n


{\displaystyle n}

 assets. Suppose further that we are allowed to rebalance our portfolio at times 



t
=
1
,
…
,
T
−
1


{\displaystyle t=1,\dots ,T-1}

 but without injecting additional cash into it. At each period 



t


{\displaystyle t}

 we make a decision about redistributing the current wealth 




W

t




{\displaystyle W_{t}}

 among the 



n


{\displaystyle n}

 assets. Let 




x

0


=
(

x

10


,
…
,

x

n
0


)


{\displaystyle x_{0}=(x_{10},\dots ,x_{n0})}

 be the initial amounts invested in the n assets. We require that each 




x

i
0




{\displaystyle x_{i0}}

 is nonnegative and that the balance equation 




∑

i
=
1


n



x

i
0


=

W

0




{\displaystyle \sum _{i=1}^{n}x_{i0}=W_{0}}

 should hold.
Consider the total returns 




ξ

t


=
(

ξ

1
t


,
…
,

ξ

n
t


)


{\displaystyle \xi _{t}=(\xi _{1t},\dots ,\xi _{nt})}

 for each period 



t
=
1
,
…
,
T


{\displaystyle t=1,\dots ,T}

. This forms a vector-valued random process 




ξ

1


,
…
,

ξ

T




{\displaystyle \xi _{1},\dots ,\xi _{T}}

. At time period 



t
=
1


{\displaystyle t=1}

, we can rebalance the portfolio by specifying the amounts 




x

1


=
(

x

11


,
…
,

x

n
1


)


{\displaystyle x_{1}=(x_{11},\dots ,x_{n1})}

 invested in the respective assets. At that time the returns in the first period have been realized so it is reasonable to use this information in the rebalancing decision. Thus, the second-stage decisions, at time 



t
=
1


{\displaystyle t=1}

, are actually functions of realization of the random vector 




ξ

1




{\displaystyle \xi _{1}}

, i.e., 




x

1


=

x

1


(

ξ

1


)


{\displaystyle x_{1}=x_{1}(\xi _{1})}

. Similarly, at time 



t


{\displaystyle t}

 the decision 




x

t


=
(

x

1
t


,
…
,

x

n
t


)


{\displaystyle x_{t}=(x_{1t},\dots ,x_{nt})}

 is a function 




x

t


=

x

t


(

ξ

[
t
]


)


{\displaystyle x_{t}=x_{t}(\xi _{[t]})}

 of the available information given by 




ξ

[
t
]


=
(

ξ

1


,
…
,

ξ

t


)


{\displaystyle \xi _{[t]}=(\xi _{1},\dots ,\xi _{t})}

 the history of the random process up to time 



t


{\displaystyle t}

. A sequence of functions 




x

t


=

x

t


(

ξ

[
t
]


)


{\displaystyle x_{t}=x_{t}(\xi _{[t]})}

, 



t
=
0
,
…
,
T
−
1


{\displaystyle t=0,\dots ,T-1}

, with 




x

0




{\displaystyle x_{0}}

 being constant, defines an implementable policy of the decision process. It is said that such a policy is feasible if it satisfies the model constraints with probability 1, i.e., the nonnegativity constraints 




x

i
t


(

ξ

[
t
]


)
≥
0


{\displaystyle x_{it}(\xi _{[t]})\geq 0}

, 



i
=
1
,
…
,
n


{\displaystyle i=1,\dots ,n}

, 



t
=
0
,
…
,
T
−
1


{\displaystyle t=0,\dots ,T-1}

, and the balance of wealth constraints,
where in period 



t
=
1
,
…
,
T


{\displaystyle t=1,\dots ,T}

 the wealth 




W

t




{\displaystyle W_{t}}

 is given by
which depends on the realization of the random process and the decisions up to time 



t


{\displaystyle t}

.
Suppose the objective is to maximize the expected utility of this wealth at the last period, that is, to consider the problem
This is a multistage stochastic programming problem, where stages are numbered from 



t
=
0


{\displaystyle t=0}

 to 



t
=
T
−
1


{\displaystyle t=T-1}

. Optimization is performed over all implementable and feasible policies. To complete the problem description one also needs to define the probability distribution of the random process 




ξ

1


,
…
,

ξ

T




{\displaystyle \xi _{1},\dots ,\xi _{T}}

. This can be done in various ways. For example, one can construct a particular scenario tree defining time evolution of the process. If at every stage the random return of each asset is allowed to have two continuations, independent of other assets, then the total number of scenarios is 




2

n
T




{\displaystyle 2^{nT}}

.
In order to write dynamic programming equations, consider the above multistage problem backward in time. At the last stage 



t
=
T
−
1


{\displaystyle t=T-1}

, a realization 




ξ

[
T
−
1
]


=
(

ξ

1


,
…
,

ξ

T
−
1


)


{\displaystyle \xi _{[T-1]}=(\xi _{1},\dots ,\xi _{T-1})}

 of the random process is known and 




x

T
−
2




{\displaystyle x_{T-2}}

 has been chosen. Therefore, one needs to solve the following problem
where 



E
[
U
(

W

T


)

|


ξ

[
T
−
1
]


]


{\displaystyle E[U(W_{T})|\xi _{[T-1]}]}

 denotes the conditional expectation of 



U
(

W

T


)


{\displaystyle U(W_{T})}

 given 




ξ

[
T
−
1
]




{\displaystyle \xi _{[T-1]}}

. The optimal value of the above problem depends on 




W

T
−
1




{\displaystyle W_{T-1}}

 and 




ξ

[
T
−
1
]




{\displaystyle \xi _{[T-1]}}

 and is denoted 




Q

T
−
1


(

W

T
−
1


,

ξ

[
T
−
1
]


)


{\displaystyle Q_{T-1}(W_{T-1},\xi _{[T-1]})}

.
Similarly, at stages 



t
=
T
−
2
,
…
,
1


{\displaystyle t=T-2,\dots ,1}

, one should solve the problem
whose optimal value is denoted by 




Q

t


(

W

t


,

ξ

[
t
]


)


{\displaystyle Q_{t}(W_{t},\xi _{[t]})}

. Finally, at stage 



t
=
0


{\displaystyle t=0}

, one solves the problem
For a general distribution of the process 




ξ

t




{\displaystyle \xi _{t}}

, it may be hard to solve these dynamic programming equations. The situation simplifies dramatically if the process 




ξ

t




{\displaystyle \xi _{t}}

 is stagewise independent, i.e., 




ξ

t




{\displaystyle \xi _{t}}

 is (stochastically) independent of 




ξ

1


,
…
,

ξ

t
−
1




{\displaystyle \xi _{1},\dots ,\xi _{t-1}}

 for 



t
=
2
,
…
,
T


{\displaystyle t=2,\dots ,T}

. In this case, the corresponding conditional expectations become unconditional expectations, and the function 




Q

t


(

W

t


)


{\displaystyle Q_{t}(W_{t})}

, 



t
=
1
,
…
,
T
−
1


{\displaystyle t=1,\dots ,T-1}

 does not depend on 




ξ

[
t
]




{\displaystyle \xi _{[t]}}

. That is, 




Q

T
−
1


(

W

T
−
1


)


{\displaystyle Q_{T-1}(W_{T-1})}

 is the optimal value of the problem
and 




Q

t


(

W

t


)


{\displaystyle Q_{t}(W_{t})}

 is the optimal value of
for 



t
=
T
−
2
,
…
,
1


{\displaystyle t=T-2,\dots ,1}

.
Stochastic dynamic programming is frequently used to model animal behaviour in such fields as behavioural ecology.[7][8] Empirical tests of models of optimal foraging, life-history transitions such as fledging in birds and egg laying in parasitoid wasps have shown the value of this modelling technique in explaining the evolution of behavioural decision making. These models are typically many-staged, rather than two-staged.
Stochastic dynamic programming is a useful tool in understanding decision making under uncertainty. The accumulation of capital stock under uncertainty is one example; often it is used by resource economists to analyze bioeconomic problems[disambiguation needed][9] where the uncertainty enters in such as weather, etc.
All discrete stochastic programming problems can be represented with any algebraic modeling language, manually implementing explicit or implicit non-anticipativity to make sure the resulting model respects the structure of the information made available at each stage. An instance of an SP problem generated by a general modelling language tends to grow quite large (linearly in the number of scenarios), and its matrix loses the structure that is intrinsic to this class of problems, which could otherwise be exploited at solution time by specific decomposition algorithms. Extensions to modelling languages specifically designed for SP are starting to appear, see:
They both can generate SMPS instance level format, which conveys in a non-redundant form the structure of the problem to the solver.