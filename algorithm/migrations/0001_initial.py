# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-07-18 03:30
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('description', models.TextField()),
                ('uri', models.URLField()),
                ('visible', models.BooleanField()),
                ('reputation', models.FloatField(default=0)),
                ('date', models.DateField(default=datetime.datetime(2017, 7, 18, 0, 30, 0, 947188))),
            ],
        ),
        migrations.CreateModel(
            name='AlgorithmFullText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alg_name', models.CharField(max_length=30)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=35)),
                ('uri', models.URLField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Implementation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('visible', models.BooleanField()),
                ('date', models.DateField(default=datetime.datetime(2017, 7, 18, 0, 30, 0, 948484))),
                ('reputation', models.FloatField(default=0)),
                ('accumulated_weight', models.FloatField(default=0)),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implementation_set', to='algorithm.Algorithm')),
            ],
        ),
        migrations.CreateModel(
            name='ImplementationQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime(2017, 7, 18, 0, 30, 0, 954069))),
                ('implementation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.Implementation')),
            ],
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime(2017, 7, 18, 0, 30, 0, 949106))),
                ('classification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.Classification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Paradigm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dbpedia_uri', models.CharField(max_length=100)),
                ('wikipedia_uri', models.CharField(max_length=100)),
                ('label', models.CharField(max_length=100)),
                ('abstract', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProeficiencyScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('priority', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UniversityRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('position', models.IntegerField()),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='UserQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime(2017, 7, 18, 0, 30, 0, 952112))),
                ('question_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.QuestionOption')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserReputation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reputation', models.FloatField(default=0)),
                ('university', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='algorithm.UniversityRank')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClassificationProeficiencyScale',
            fields=[
                ('proeficiencyscale_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algorithm.ProeficiencyScale')),
                ('classification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.Classification')),
            ],
            bases=('algorithm.proeficiencyscale',),
        ),
        migrations.CreateModel(
            name='ImplementationQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algorithm.Question')),
            ],
            bases=('algorithm.question',),
        ),
        migrations.CreateModel(
            name='ProgrammingLanguageProeficiencyScale',
            fields=[
                ('proeficiencyscale_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algorithm.ProeficiencyScale')),
                ('programming_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.ProgrammingLanguage')),
            ],
            bases=('algorithm.proeficiencyscale',),
        ),
        migrations.CreateModel(
            name='UserQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algorithm.Question')),
            ],
            bases=('algorithm.question',),
        ),
        migrations.AddField(
            model_name='questionoption',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionoption_set', to='algorithm.Question'),
        ),
        migrations.AddField(
            model_name='proeficiencyscale',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='implementationquestionanswer',
            name='question_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.QuestionOption'),
        ),
        migrations.AddField(
            model_name='implementationquestionanswer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='implementation',
            name='programming_language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.ProgrammingLanguage'),
        ),
        migrations.AddField(
            model_name='implementation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='classification',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='algorithm.Classification'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='tags',
            field=models.ManyToManyField(blank=True, null=True, to='algorithm.Tag'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='userquestionanswer',
            name='user_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.UserQuestion'),
        ),
        migrations.AddField(
            model_name='implementationquestionanswer',
            name='implementation_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algorithm.ImplementationQuestion'),
        ),
    ]
